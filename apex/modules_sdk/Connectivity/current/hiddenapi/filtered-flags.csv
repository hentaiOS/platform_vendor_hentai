Landroid/app/usage/NetworkStats$Bucket;-><init>()V,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->DEFAULT_NETWORK_ALL:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->DEFAULT_NETWORK_NO:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->DEFAULT_NETWORK_YES:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->METERED_ALL:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->METERED_NO:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->METERED_YES:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->ROAMING_ALL:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->ROAMING_NO:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->ROAMING_YES:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->STATE_ALL:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->STATE_DEFAULT:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->STATE_FOREGROUND:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->TAG_NONE:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->UID_ALL:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->UID_REMOVED:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->UID_TETHERING:I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->convertDefaultNetworkStatus(I)I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->convertMetered(I)I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->convertRoaming(I)I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->convertSet(I)I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->convertState(I)I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->convertTag(I)I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->convertUid(I)I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->getDefaultNetworkStatus()I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->getEndTimeStamp()J,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->getMetered()I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->getRoaming()I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->getRxBytes()J,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->getRxPackets()J,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->getStartTimeStamp()J,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->getState()I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->getTag()I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->getTxBytes()J,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->getTxPackets()J,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->getUid()I,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats$Bucket;->mBeginTimeStamp:J,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->mDefaultNetworkStatus:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->mEndTimeStamp:J,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->mMetered:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->mRoaming:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->mRxBytes:J,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->mRxPackets:J,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->mState:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->mTag:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->mTxBytes:J,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->mTxPackets:J,lo-prio,max-target-o
Landroid/app/usage/NetworkStats$Bucket;->mUid:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;-><init>(Landroid/content/Context;Landroid/net/NetworkTemplate;IJJLandroid/net/INetworkStatsService;)V,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats;->fillBucketFromSummaryEntry(Landroid/app/usage/NetworkStats$Bucket;)V,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->finalize()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats;->getDeviceSummaryForNetwork()Landroid/app/usage/NetworkStats$Bucket;,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->getNextBucket(Landroid/app/usage/NetworkStats$Bucket;)Z,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats;->getNextHistoryBucket(Landroid/app/usage/NetworkStats$Bucket;)Z,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->getNextSummaryBucket(Landroid/app/usage/NetworkStats$Bucket;)Z,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->getSummaryAggregate()Landroid/app/usage/NetworkStats$Bucket;,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->getUid()I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->hasNextBucket()Z,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStats;->hasNextUid()Z,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->isUidEnumeration()Z,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->mCloseGuard:Ldalvik/system/CloseGuard;,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->mEndTimeStamp:J,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->mEnumerationIndex:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->mHistory:Landroid/net/NetworkStatsHistory;,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->mRecycledHistoryEntry:Landroid/net/NetworkStatsHistory$Entry;,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->mRecycledSummaryEntry:Landroid/net/NetworkStats$Entry;,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->mSession:Landroid/net/INetworkStatsSession;,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->mStartTimeStamp:J,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->mState:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->mSummary:Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->mTag:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->mTemplate:Landroid/net/NetworkTemplate;,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->mUidOrUidIndex:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->mUids:[I,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->setSingleUidTagState(III)V,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->startSummaryEnumeration()V,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->startUserUidEnumeration()V,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->stepHistory()V,lo-prio,max-target-o
Landroid/app/usage/NetworkStats;->stepUid()V,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager$$ExternalSyntheticLambda0;->execute(Ljava/lang/Runnable;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager$$ExternalSyntheticLambda1;->execute(Ljava/lang/Runnable;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager$UsageCallback;-><init>()V,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager$UsageCallback;->onThresholdReached(ILjava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager$UsageCallback;->request:Landroid/net/DataUsageRequest;,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager$UsageCallbackWrapper$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager;-><init>(Landroid/content/Context;Landroid/net/INetworkStatsService;)V,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->CALLBACK_LIMIT_REACHED:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->CALLBACK_RELEASED:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->DBG:Z,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->FLAG_AUGMENT_WITH_SUBSCRIPTION_PLAN:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->FLAG_POLL_FORCE:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->FLAG_POLL_ON_OPEN:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->MIN_THRESHOLD_BYTES:J,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->createTemplate(ILjava/lang/String;)Landroid/net/NetworkTemplate;,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->mContext:Landroid/content/Context;,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->mFlags:I,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->mService:Landroid/net/INetworkStatsService;,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->queryDetails(ILjava/lang/String;JJ)Landroid/app/usage/NetworkStats;,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager;->queryDetailsForUid(ILjava/lang/String;JJI)Landroid/app/usage/NetworkStats;,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager;->queryDetailsForUidTag(ILjava/lang/String;JJII)Landroid/app/usage/NetworkStats;,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager;->queryDetailsForUidTagState(ILjava/lang/String;JJIII)Landroid/app/usage/NetworkStats;,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager;->querySummary(ILjava/lang/String;JJ)Landroid/app/usage/NetworkStats;,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager;->querySummaryForDevice(ILjava/lang/String;JJ)Landroid/app/usage/NetworkStats$Bucket;,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager;->querySummaryForDevice(Landroid/net/NetworkTemplate;JJ)Landroid/app/usage/NetworkStats$Bucket;,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->querySummaryForUser(ILjava/lang/String;JJ)Landroid/app/usage/NetworkStats$Bucket;,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager;->registerNetworkStatsProvider(Ljava/lang/String;Landroid/net/netstats/provider/NetworkStatsProvider;)V,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager;->registerUsageCallback(ILjava/lang/String;JLandroid/app/usage/NetworkStatsManager$UsageCallback;)V,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager;->registerUsageCallback(ILjava/lang/String;JLandroid/app/usage/NetworkStatsManager$UsageCallback;Landroid/os/Handler;)V,public-api,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager;->setAugmentWithSubscriptionPlan(Z)V,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->setPollForce(Z)V,max-target-r
Landroid/app/usage/NetworkStatsManager;->setPollOnOpen(Z)V,lo-prio,max-target-o
Landroid/app/usage/NetworkStatsManager;->unregisterNetworkStatsProvider(Landroid/net/netstats/provider/NetworkStatsProvider;)V,sdk,system-api,test-api
Landroid/app/usage/NetworkStatsManager;->unregisterUsageCallback(Landroid/app/usage/NetworkStatsManager$UsageCallback;)V,public-api,sdk,system-api,test-api
Landroid/nearby/BroadcastCallback;->STATUS_FAILURE:I,sdk,system-api,test-api
Landroid/nearby/BroadcastCallback;->STATUS_FAILURE_ALREADY_REGISTERED:I,sdk,system-api,test-api
Landroid/nearby/BroadcastCallback;->STATUS_FAILURE_MISSING_PERMISSIONS:I,sdk,system-api,test-api
Landroid/nearby/BroadcastCallback;->STATUS_FAILURE_SIZE_EXCEED_LIMIT:I,sdk,system-api,test-api
Landroid/nearby/BroadcastCallback;->STATUS_OK:I,sdk,system-api,test-api
Landroid/nearby/BroadcastCallback;->onStatusChanged(I)V,sdk,system-api,test-api
Landroid/nearby/BroadcastRequest;->BROADCAST_TYPE_NEARBY_PRESENCE:I,sdk,system-api,test-api
Landroid/nearby/BroadcastRequest;->BROADCAST_TYPE_UNKNOWN:I,sdk,system-api,test-api
Landroid/nearby/BroadcastRequest;->MEDIUM_BLE:I,sdk,system-api,test-api
Landroid/nearby/BroadcastRequest;->PRESENCE_VERSION_UNKNOWN:I,sdk,system-api,test-api
Landroid/nearby/BroadcastRequest;->PRESENCE_VERSION_V0:I,sdk,system-api,test-api
Landroid/nearby/BroadcastRequest;->PRESENCE_VERSION_V1:I,sdk,system-api,test-api
Landroid/nearby/BroadcastRequest;->UNKNOWN_TX_POWER:I,sdk,system-api,test-api
Landroid/nearby/BroadcastRequest;->getMediums()Ljava/util/List;,sdk,system-api,test-api
Landroid/nearby/BroadcastRequest;->getTxPower()I,sdk,system-api,test-api
Landroid/nearby/BroadcastRequest;->getType()I,sdk,system-api,test-api
Landroid/nearby/BroadcastRequest;->getVersion()I,sdk,system-api,test-api
Landroid/nearby/BroadcastRequestParcelable$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/BroadcastRequestParcelable$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/BroadcastRequestParcelable;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/nearby/BroadcastRequestParcelable;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/nearby/CredentialElement$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/CredentialElement$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/CredentialElement;-><init>(Ljava/lang/String;[B)V,sdk,system-api,test-api
Landroid/nearby/CredentialElement;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/nearby/CredentialElement;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/nearby/CredentialElement;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/CredentialElement;->getKey()Ljava/lang/String;,sdk,system-api,test-api
Landroid/nearby/CredentialElement;->getValue()[B,sdk,system-api,test-api
Landroid/nearby/CredentialElement;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/CredentialElement;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/nearby/DataElement$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/DataElement$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/DataElement;-><init>(I[B)V,sdk,system-api,test-api
Landroid/nearby/DataElement;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/nearby/DataElement;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/nearby/DataElement;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/DataElement;->getKey()I,sdk,system-api,test-api
Landroid/nearby/DataElement;->getValue()[B,sdk,system-api,test-api
Landroid/nearby/DataElement;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/DataElement;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/nearby/FastPairDevice$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/FastPairDevice$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/FastPairDevice;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/nearby/FastPairDevice;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/FastPairDevice;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/FastPairDevice;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/FastPairDevice;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/nearby/IBroadcastListener$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/nearby/IBroadcastListener$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/nearby/IBroadcastListener$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/nearby/IBroadcastListener$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/nearby/INearbyManager$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/nearby/INearbyManager$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/nearby/INearbyManager$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/nearby/INearbyManager$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/nearby/IScanListener$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/nearby/IScanListener$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/nearby/IScanListener$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/nearby/IScanListener$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyDevice;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyDevice;->getMediums()Ljava/util/List;,sdk,system-api,test-api
Landroid/nearby/NearbyDevice;->getName()Ljava/lang/String;,sdk,system-api,test-api
Landroid/nearby/NearbyDevice;->getRssi()I,sdk,system-api,test-api
Landroid/nearby/NearbyDevice;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyDevice;->isValidMedium(I)Z,sdk,system-api,test-api
Landroid/nearby/NearbyDevice;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyDeviceParcelable$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyDeviceParcelable$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyDeviceParcelable;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyDeviceParcelable;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyDeviceParcelable;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyDeviceParcelable;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyDeviceParcelable;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyFrameworkInitializer$$ExternalSyntheticLambda0;->createService(Landroid/content/Context;Landroid/os/IBinder;)Ljava/lang/Object;,sdk,system-api,test-api
Landroid/nearby/NearbyManager$BroadcastListenerTransport$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyManager$OffloadTransport$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyManager$ScanListenerTransport$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyManager$ScanListenerTransport$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyManager$ScanListenerTransport$$ExternalSyntheticLambda2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyManager$ScanListenerTransport$$ExternalSyntheticLambda3;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/NearbyManager;->queryOffloadCapability(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V,sdk,system-api,test-api
Landroid/nearby/NearbyManager;->startBroadcast(Landroid/nearby/BroadcastRequest;Ljava/util/concurrent/Executor;Landroid/nearby/BroadcastCallback;)V,sdk,system-api,test-api
Landroid/nearby/NearbyManager;->startScan(Landroid/nearby/ScanRequest;Ljava/util/concurrent/Executor;Landroid/nearby/ScanCallback;)I,sdk,system-api,test-api
Landroid/nearby/NearbyManager;->stopBroadcast(Landroid/nearby/BroadcastCallback;)V,sdk,system-api,test-api
Landroid/nearby/NearbyManager;->stopScan(Landroid/nearby/ScanCallback;)V,sdk,system-api,test-api
Landroid/nearby/OffloadCapability$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/OffloadCapability$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/OffloadCapability$Builder;-><init>()V,sdk,system-api,test-api
Landroid/nearby/OffloadCapability$Builder;->build()Landroid/nearby/OffloadCapability;,sdk,system-api,test-api
Landroid/nearby/OffloadCapability$Builder;->setFastPairSupported(Z)Landroid/nearby/OffloadCapability$Builder;,sdk,system-api,test-api
Landroid/nearby/OffloadCapability$Builder;->setNearbyShareSupported(Z)Landroid/nearby/OffloadCapability$Builder;,sdk,system-api,test-api
Landroid/nearby/OffloadCapability$Builder;->setVersion(J)Landroid/nearby/OffloadCapability$Builder;,sdk,system-api,test-api
Landroid/nearby/OffloadCapability;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/nearby/OffloadCapability;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/nearby/OffloadCapability;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/OffloadCapability;->getVersion()J,sdk,system-api,test-api
Landroid/nearby/OffloadCapability;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/OffloadCapability;->isFastPairSupported()Z,sdk,system-api,test-api
Landroid/nearby/OffloadCapability;->isNearbyShareSupported()Z,sdk,system-api,test-api
Landroid/nearby/OffloadCapability;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/OffloadCapability;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest$Builder;-><init>(Ljava/util/List;[BLandroid/nearby/PrivateCredential;)V,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest$Builder;->addAction(I)Landroid/nearby/PresenceBroadcastRequest$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest$Builder;->addExtendedProperty(Landroid/nearby/DataElement;)Landroid/nearby/PresenceBroadcastRequest$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest$Builder;->build()Landroid/nearby/PresenceBroadcastRequest;,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest$Builder;->setTxPower(I)Landroid/nearby/PresenceBroadcastRequest$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest$Builder;->setVersion(I)Landroid/nearby/PresenceBroadcastRequest$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest;->getActions()Ljava/util/List;,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest;->getCredential()Landroid/nearby/PrivateCredential;,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest;->getExtendedProperties()Ljava/util/List;,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest;->getSalt()[B,sdk,system-api,test-api
Landroid/nearby/PresenceBroadcastRequest;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceCredential;->CREDENTIAL_TYPE_PRIVATE:I,sdk,system-api,test-api
Landroid/nearby/PresenceCredential;->CREDENTIAL_TYPE_PUBLIC:I,sdk,system-api,test-api
Landroid/nearby/PresenceCredential;->IDENTITY_TYPE_PRIVATE:I,sdk,system-api,test-api
Landroid/nearby/PresenceCredential;->IDENTITY_TYPE_PROVISIONED:I,sdk,system-api,test-api
Landroid/nearby/PresenceCredential;->IDENTITY_TYPE_TRUSTED:I,sdk,system-api,test-api
Landroid/nearby/PresenceCredential;->IDENTITY_TYPE_UNKNOWN:I,sdk,system-api,test-api
Landroid/nearby/PresenceCredential;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceCredential;->getAuthenticityKey()[B,sdk,system-api,test-api
Landroid/nearby/PresenceCredential;->getCredentialElements()Ljava/util/List;,sdk,system-api,test-api
Landroid/nearby/PresenceCredential;->getIdentityType()I,sdk,system-api,test-api
Landroid/nearby/PresenceCredential;->getSecretId()[B,sdk,system-api,test-api
Landroid/nearby/PresenceCredential;->getType()I,sdk,system-api,test-api
Landroid/nearby/PresenceCredential;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceDevice$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceDevice$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceDevice$Builder;-><init>(Ljava/lang/String;[B[B[B)V,sdk,system-api,test-api
Landroid/nearby/PresenceDevice$Builder;->addExtendedProperty(Landroid/nearby/DataElement;)Landroid/nearby/PresenceDevice$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceDevice$Builder;->addMedium(I)Landroid/nearby/PresenceDevice$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceDevice$Builder;->build()Landroid/nearby/PresenceDevice;,sdk,system-api,test-api
Landroid/nearby/PresenceDevice$Builder;->setDeviceImageUrl(Ljava/lang/String;)Landroid/nearby/PresenceDevice$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceDevice$Builder;->setDeviceType(I)Landroid/nearby/PresenceDevice$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceDevice$Builder;->setDiscoveryTimestampMillis(J)Landroid/nearby/PresenceDevice$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceDevice$Builder;->setName(Ljava/lang/String;)Landroid/nearby/PresenceDevice$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceDevice$Builder;->setRssi(I)Landroid/nearby/PresenceDevice$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceDevice;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/nearby/PresenceDevice;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceDevice;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceDevice;->getDeviceId()Ljava/lang/String;,sdk,system-api,test-api
Landroid/nearby/PresenceDevice;->getDeviceImageUrl()Ljava/lang/String;,sdk,system-api,test-api
Landroid/nearby/PresenceDevice;->getDeviceType()I,sdk,system-api,test-api
Landroid/nearby/PresenceDevice;->getDiscoveryTimestampMillis()J,sdk,system-api,test-api
Landroid/nearby/PresenceDevice;->getEncryptedIdentity()[B,sdk,system-api,test-api
Landroid/nearby/PresenceDevice;->getExtendedProperties()Ljava/util/List;,sdk,system-api,test-api
Landroid/nearby/PresenceDevice;->getSalt()[B,sdk,system-api,test-api
Landroid/nearby/PresenceDevice;->getSecretId()[B,sdk,system-api,test-api
Landroid/nearby/PresenceDevice;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceDevice;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceScanFilter$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceScanFilter$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceScanFilter$Builder;-><init>()V,sdk,system-api,test-api
Landroid/nearby/PresenceScanFilter$Builder;->addCredential(Landroid/nearby/PublicCredential;)Landroid/nearby/PresenceScanFilter$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceScanFilter$Builder;->addExtendedProperty(Landroid/nearby/DataElement;)Landroid/nearby/PresenceScanFilter$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceScanFilter$Builder;->addPresenceAction(I)Landroid/nearby/PresenceScanFilter$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceScanFilter$Builder;->build()Landroid/nearby/PresenceScanFilter;,sdk,system-api,test-api
Landroid/nearby/PresenceScanFilter$Builder;->setMaxPathLoss(I)Landroid/nearby/PresenceScanFilter$Builder;,sdk,system-api,test-api
Landroid/nearby/PresenceScanFilter;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/nearby/PresenceScanFilter;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/nearby/PresenceScanFilter;->getCredentials()Ljava/util/List;,sdk,system-api,test-api
Landroid/nearby/PresenceScanFilter;->getExtendedProperties()Ljava/util/List;,sdk,system-api,test-api
Landroid/nearby/PresenceScanFilter;->getPresenceActions()Ljava/util/List;,sdk,system-api,test-api
Landroid/nearby/PresenceScanFilter;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/nearby/PrivateCredential$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/PrivateCredential$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/PrivateCredential$Builder;-><init>([B[B[BLjava/lang/String;)V,sdk,system-api,test-api
Landroid/nearby/PrivateCredential$Builder;->addCredentialElement(Landroid/nearby/CredentialElement;)Landroid/nearby/PrivateCredential$Builder;,sdk,system-api,test-api
Landroid/nearby/PrivateCredential$Builder;->build()Landroid/nearby/PrivateCredential;,sdk,system-api,test-api
Landroid/nearby/PrivateCredential$Builder;->setIdentityType(I)Landroid/nearby/PrivateCredential$Builder;,sdk,system-api,test-api
Landroid/nearby/PrivateCredential;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/nearby/PrivateCredential;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/nearby/PrivateCredential;->getDeviceName()Ljava/lang/String;,sdk,system-api,test-api
Landroid/nearby/PrivateCredential;->getMetadataEncryptionKey()[B,sdk,system-api,test-api
Landroid/nearby/PrivateCredential;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/nearby/PublicCredential$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/PublicCredential$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/PublicCredential$Builder;-><init>([B[B[B[B[B)V,sdk,system-api,test-api
Landroid/nearby/PublicCredential$Builder;->addCredentialElement(Landroid/nearby/CredentialElement;)Landroid/nearby/PublicCredential$Builder;,sdk,system-api,test-api
Landroid/nearby/PublicCredential$Builder;->build()Landroid/nearby/PublicCredential;,sdk,system-api,test-api
Landroid/nearby/PublicCredential$Builder;->setIdentityType(I)Landroid/nearby/PublicCredential$Builder;,sdk,system-api,test-api
Landroid/nearby/PublicCredential;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/nearby/PublicCredential;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/nearby/PublicCredential;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/PublicCredential;->getEncryptedMetadata()[B,sdk,system-api,test-api
Landroid/nearby/PublicCredential;->getEncryptedMetadataKeyTag()[B,sdk,system-api,test-api
Landroid/nearby/PublicCredential;->getPublicKey()[B,sdk,system-api,test-api
Landroid/nearby/PublicCredential;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/PublicCredential;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/nearby/ScanCallback;->ERROR_INVALID_ARGUMENT:I,sdk,system-api,test-api
Landroid/nearby/ScanCallback;->ERROR_PERMISSION_DENIED:I,sdk,system-api,test-api
Landroid/nearby/ScanCallback;->ERROR_RESOURCE_EXHAUSTED:I,sdk,system-api,test-api
Landroid/nearby/ScanCallback;->ERROR_UNKNOWN:I,sdk,system-api,test-api
Landroid/nearby/ScanCallback;->ERROR_UNSUPPORTED:I,sdk,system-api,test-api
Landroid/nearby/ScanCallback;->onDiscovered(Landroid/nearby/NearbyDevice;)V,sdk,system-api,test-api
Landroid/nearby/ScanCallback;->onError(I)V,sdk,system-api,test-api
Landroid/nearby/ScanCallback;->onLost(Landroid/nearby/NearbyDevice;)V,sdk,system-api,test-api
Landroid/nearby/ScanCallback;->onUpdated(Landroid/nearby/NearbyDevice;)V,sdk,system-api,test-api
Landroid/nearby/ScanFilter;->getMaxPathLoss()I,sdk,system-api,test-api
Landroid/nearby/ScanFilter;->getType()I,sdk,system-api,test-api
Landroid/nearby/ScanRequest$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/ScanRequest$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/nearby/ScanRequest$Builder;-><init>()V,sdk,system-api,test-api
Landroid/nearby/ScanRequest$Builder;->addScanFilter(Landroid/nearby/ScanFilter;)Landroid/nearby/ScanRequest$Builder;,sdk,system-api,test-api
Landroid/nearby/ScanRequest$Builder;->build()Landroid/nearby/ScanRequest;,sdk,system-api,test-api
Landroid/nearby/ScanRequest$Builder;->setBleEnabled(Z)Landroid/nearby/ScanRequest$Builder;,sdk,system-api,test-api
Landroid/nearby/ScanRequest$Builder;->setOffloadOnly(Z)Landroid/nearby/ScanRequest$Builder;,sdk,system-api,test-api
Landroid/nearby/ScanRequest$Builder;->setScanMode(I)Landroid/nearby/ScanRequest$Builder;,sdk,system-api,test-api
Landroid/nearby/ScanRequest$Builder;->setScanType(I)Landroid/nearby/ScanRequest$Builder;,sdk,system-api,test-api
Landroid/nearby/ScanRequest$Builder;->setWorkSource(Landroid/os/WorkSource;)Landroid/nearby/ScanRequest$Builder;,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->SCAN_MODE_BALANCED:I,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->SCAN_MODE_LOW_LATENCY:I,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->SCAN_MODE_LOW_POWER:I,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->SCAN_MODE_NO_POWER:I,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->SCAN_TYPE_FAST_PAIR:I,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->SCAN_TYPE_NEARBY_PRESENCE:I,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->getScanFilters()Ljava/util/List;,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->getScanMode()I,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->getScanType()I,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->getWorkSource()Landroid/os/WorkSource;,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->isBleEnabled()Z,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->isOffloadOnly()Z,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->isValidScanMode(I)Z,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->isValidScanType(I)Z,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->scanModeToString(I)Ljava/lang/String;,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/nearby/ScanRequest;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/nearby/aidl/IOffloadCallback$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/nearby/aidl/IOffloadCallback$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/nearby/aidl/IOffloadCallback$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/nearby/aidl/IOffloadCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/CaptivePortal$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/CaptivePortal$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/CaptivePortal;-><init>(Landroid/os/IBinder;)V,lo-prio,max-target-o
Landroid/net/CaptivePortal;->APP_REQUEST_REEVALUATION_REQUIRED:I,sdk,system-api,test-api
Landroid/net/CaptivePortal;->APP_RETURN_DISMISSED:I,sdk,system-api,test-api
Landroid/net/CaptivePortal;->APP_RETURN_UNWANTED:I,sdk,system-api,test-api
Landroid/net/CaptivePortal;->APP_RETURN_WANTED_AS_IS:I,sdk,system-api,test-api
Landroid/net/CaptivePortal;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/CaptivePortal;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/CaptivePortal;->ignoreNetwork()V,public-api,sdk,system-api,test-api
Landroid/net/CaptivePortal;->logEvent(ILjava/lang/String;)V,sdk,system-api,test-api
Landroid/net/CaptivePortal;->mBinder:Landroid/os/IBinder;,lo-prio,max-target-o
Landroid/net/CaptivePortal;->reevaluateNetwork()V,sdk,system-api,test-api
Landroid/net/CaptivePortal;->reportCaptivePortalDismissed()V,public-api,sdk,system-api,test-api
Landroid/net/CaptivePortal;->useNetwork()V,sdk,system-api,test-api
Landroid/net/CaptivePortal;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/CaptivePortalData$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/CaptivePortalData$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/CaptivePortalData$Builder;-><init>()V,sdk,system-api,test-api
Landroid/net/CaptivePortalData$Builder;-><init>(Landroid/net/CaptivePortalData;)V,sdk,system-api,test-api
Landroid/net/CaptivePortalData$Builder;->build()Landroid/net/CaptivePortalData;,sdk,system-api,test-api
Landroid/net/CaptivePortalData$Builder;->setBytesRemaining(J)Landroid/net/CaptivePortalData$Builder;,sdk,system-api,test-api
Landroid/net/CaptivePortalData$Builder;->setCaptive(Z)Landroid/net/CaptivePortalData$Builder;,sdk,system-api,test-api
Landroid/net/CaptivePortalData$Builder;->setExpiryTime(J)Landroid/net/CaptivePortalData$Builder;,sdk,system-api,test-api
Landroid/net/CaptivePortalData$Builder;->setRefreshTime(J)Landroid/net/CaptivePortalData$Builder;,sdk,system-api,test-api
Landroid/net/CaptivePortalData$Builder;->setSessionExtendable(Z)Landroid/net/CaptivePortalData$Builder;,sdk,system-api,test-api
Landroid/net/CaptivePortalData$Builder;->setUserPortalUrl(Landroid/net/Uri;)Landroid/net/CaptivePortalData$Builder;,sdk,system-api,test-api
Landroid/net/CaptivePortalData$Builder;->setUserPortalUrl(Landroid/net/Uri;I)Landroid/net/CaptivePortalData$Builder;,sdk,system-api,test-api
Landroid/net/CaptivePortalData$Builder;->setVenueFriendlyName(Ljava/lang/CharSequence;)Landroid/net/CaptivePortalData$Builder;,sdk,system-api,test-api
Landroid/net/CaptivePortalData$Builder;->setVenueInfoUrl(Landroid/net/Uri;)Landroid/net/CaptivePortalData$Builder;,sdk,system-api,test-api
Landroid/net/CaptivePortalData$Builder;->setVenueInfoUrl(Landroid/net/Uri;I)Landroid/net/CaptivePortalData$Builder;,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->CAPTIVE_PORTAL_DATA_SOURCE_OTHER:I,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->CAPTIVE_PORTAL_DATA_SOURCE_PASSPOINT:I,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->getByteLimit()J,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->getExpiryTimeMillis()J,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->getRefreshTimeMillis()J,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->getUserPortalUrl()Landroid/net/Uri;,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->getUserPortalUrlSource()I,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->getVenueFriendlyName()Ljava/lang/CharSequence;,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->getVenueInfoUrl()Landroid/net/Uri;,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->getVenueInfoUrlSource()I,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->isCaptive()Z,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->isSessionExtendable()Z,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/CaptivePortalData;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityDiagnosticsBinder$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityDiagnosticsBinder$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityDiagnosticsBinder$$ExternalSyntheticLambda2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback;->onConnectivityReportAvailable(Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback;->onDataStallSuspected(Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback;->onNetworkConnectivityReported(Landroid/net/Network;Z)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;-><init>(Landroid/net/Network;JLandroid/net/LinkProperties;Landroid/net/NetworkCapabilities;Landroid/os/PersistableBundle;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->KEY_NETWORK_PROBES_ATTEMPTED_BITMASK:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->KEY_NETWORK_PROBES_SUCCEEDED_BITMASK:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->KEY_NETWORK_VALIDATION_RESULT:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->NETWORK_PROBE_DNS:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->NETWORK_PROBE_FALLBACK:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->NETWORK_PROBE_HTTP:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->NETWORK_PROBE_HTTPS:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->NETWORK_PROBE_PRIVATE_DNS:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->NETWORK_VALIDATION_RESULT_INVALID:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->NETWORK_VALIDATION_RESULT_PARTIALLY_VALID:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->NETWORK_VALIDATION_RESULT_SKIPPED:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->NETWORK_VALIDATION_RESULT_VALID:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->getAdditionalInfo()Landroid/os/PersistableBundle;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->getLinkProperties()Landroid/net/LinkProperties;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->getNetwork()Landroid/net/Network;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->getNetworkCapabilities()Landroid/net/NetworkCapabilities;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->getReportTimestamp()J,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;-><init>(Landroid/net/Network;JILandroid/net/LinkProperties;Landroid/net/NetworkCapabilities;Landroid/os/PersistableBundle;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->DETECTION_METHOD_DNS_EVENTS:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->DETECTION_METHOD_TCP_METRICS:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->KEY_DNS_CONSECUTIVE_TIMEOUTS:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->KEY_TCP_METRICS_COLLECTION_PERIOD_MILLIS:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->KEY_TCP_PACKET_FAIL_RATE:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->getDetectionMethod()I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->getLinkProperties()Landroid/net/LinkProperties;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->getNetwork()Landroid/net/Network;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->getNetworkCapabilities()Landroid/net/NetworkCapabilities;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->getReportTimestamp()J,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->getStallDetails()Landroid/os/PersistableBundle;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager;->registerConnectivityDiagnosticsCallback(Landroid/net/NetworkRequest;Ljava/util/concurrent/Executor;Landroid/net/ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityDiagnosticsManager;->unregisterConnectivityDiagnosticsCallback(Landroid/net/ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityFrameworkInitializer$$ExternalSyntheticLambda0;->createService(Landroid/content/Context;Landroid/os/IBinder;)Ljava/lang/Object;,sdk,system-api,test-api
Landroid/net/ConnectivityFrameworkInitializer$$ExternalSyntheticLambda1;->createService(Landroid/content/Context;)Ljava/lang/Object;,sdk,system-api,test-api
Landroid/net/ConnectivityFrameworkInitializer$$ExternalSyntheticLambda2;->createService(Landroid/content/Context;)Ljava/lang/Object;,sdk,system-api,test-api
Landroid/net/ConnectivityFrameworkInitializer$$ExternalSyntheticLambda3;->createService(Landroid/content/Context;Landroid/os/IBinder;)Ljava/lang/Object;,sdk,system-api,test-api
Landroid/net/ConnectivityFrameworkInitializerTiramisu$$ExternalSyntheticLambda0;->createService(Landroid/content/Context;Landroid/os/IBinder;)Ljava/lang/Object;,sdk,system-api,test-api
Landroid/net/ConnectivityFrameworkInitializerTiramisu$$ExternalSyntheticLambda1;->createService(Landroid/content/Context;Landroid/os/IBinder;)Ljava/lang/Object;,sdk,system-api,test-api
Landroid/net/ConnectivityFrameworkInitializerTiramisu$$ExternalSyntheticLambda2;->createService(Landroid/content/Context;Landroid/os/IBinder;)Ljava/lang/Object;,sdk,system-api,test-api
Landroid/net/ConnectivityFrameworkInitializerTiramisu$$ExternalSyntheticLambda3;->createService(Landroid/content/Context;Landroid/os/IBinder;)Ljava/lang/Object;,sdk,system-api,test-api
Landroid/net/ConnectivityFrameworkInitializerTiramisu$$ExternalSyntheticLambda4;->createService(Landroid/os/IBinder;)Ljava/lang/Object;,sdk,system-api,test-api
Landroid/net/ConnectivityFrameworkInitializerTiramisu$$ExternalSyntheticLambda5;->createService(Landroid/content/Context;Landroid/os/IBinder;)Ljava/lang/Object;,sdk,system-api,test-api
Landroid/net/ConnectivityManager$2;->execute(Ljava/lang/Runnable;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$3;->onTetheringFailed(I)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager$3;->onTetheringStarted()V,sdk,system-api,test-api
Landroid/net/ConnectivityManager$4;->onUpstreamChanged(Landroid/net/Network;)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager$5$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$5;->onReceiveResult(ILandroid/os/Bundle;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$6$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$CallbackHandler;->DBG:Z,lo-prio,max-target-o
Landroid/net/ConnectivityManager$CallbackHandler;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager$CallbackHandler;->getObject(Landroid/os/Message;Ljava/lang/Class;)Ljava/lang/Object;,lo-prio,max-target-o
Landroid/net/ConnectivityManager$CallbackHandler;->handleMessage(Landroid/os/Message;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$DataSaverStatusTracker;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$Errors;->TOO_MANY_REQUESTS:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$LegacyRequest$1;->onAvailable(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$LegacyRequest$1;->onLost(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$LegacyRequest;-><init>()V,lo-prio,max-target-o
Landroid/net/ConnectivityManager$LegacyRequest;->clearDnsBinding()V,lo-prio,max-target-o
Landroid/net/ConnectivityManager$LegacyRequest;->currentNetwork:Landroid/net/Network;,lo-prio,max-target-o
Landroid/net/ConnectivityManager$LegacyRequest;->delay:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$LegacyRequest;->expireSequenceNumber:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$LegacyRequest;->networkCallback:Landroid/net/ConnectivityManager$NetworkCallback;,lo-prio,max-target-o
Landroid/net/ConnectivityManager$LegacyRequest;->networkCapabilities:Landroid/net/NetworkCapabilities;,lo-prio,max-target-o
Landroid/net/ConnectivityManager$LegacyRequest;->networkRequest:Landroid/net/NetworkRequest;,lo-prio,max-target-o
Landroid/net/ConnectivityManager$NetworkCallback;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$NetworkCallback;-><init>(I)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$NetworkCallback;->FLAG_INCLUDE_LOCATION_INFO:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$NetworkCallback;->networkRequest:Landroid/net/NetworkRequest;,lo-prio,max-target-o
Landroid/net/ConnectivityManager$NetworkCallback;->onAvailable(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$NetworkCallback;->onBlockedStatusChanged(Landroid/net/Network;Z)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$NetworkCallback;->onCapabilitiesChanged(Landroid/net/Network;Landroid/net/NetworkCapabilities;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$NetworkCallback;->onLinkPropertiesChanged(Landroid/net/Network;Landroid/net/LinkProperties;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$NetworkCallback;->onLosing(Landroid/net/Network;I)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$NetworkCallback;->onLost(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$NetworkCallback;->onNetworkResumed(Landroid/net/Network;)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager$NetworkCallback;->onNetworkSuspended(Landroid/net/Network;)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager$NetworkCallback;->onPreCheck(Landroid/net/Network;)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager$NetworkCallback;->onUnavailable()V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$OnNetworkActiveListener;->onNetworkActive()V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$OnStartTetheringCallback;-><init>()V,sdk,system-api,test-api
Landroid/net/ConnectivityManager$OnStartTetheringCallback;->onTetheringFailed()V,sdk,system-api,test-api
Landroid/net/ConnectivityManager$OnStartTetheringCallback;->onTetheringStarted()V,sdk,system-api,test-api
Landroid/net/ConnectivityManager$OnTetheringEntitlementResultListener;->onTetheringEntitlementResult(I)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager$OnTetheringEventCallback;-><init>()V,sdk,system-api,test-api
Landroid/net/ConnectivityManager$OnTetheringEventCallback;->onUpstreamChanged(Landroid/net/Network;)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager$PacketKeepalive$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$PacketKeepalive$1$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$PacketKeepalive$1$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$PacketKeepalive$1$$ExternalSyntheticLambda2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$PacketKeepalive$1$$ExternalSyntheticLambda3;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$PacketKeepalive$1$$ExternalSyntheticLambda4;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager$PacketKeepalive;->BINDER_DIED:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$PacketKeepalive;->ERROR_HARDWARE_ERROR:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$PacketKeepalive;->ERROR_HARDWARE_UNSUPPORTED:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$PacketKeepalive;->ERROR_INVALID_INTERVAL:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$PacketKeepalive;->ERROR_INVALID_IP_ADDRESS:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$PacketKeepalive;->ERROR_INVALID_LENGTH:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$PacketKeepalive;->ERROR_INVALID_NETWORK:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$PacketKeepalive;->ERROR_INVALID_PORT:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$PacketKeepalive;->MIN_INTERVAL:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$PacketKeepalive;->NATT_PORT:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$PacketKeepalive;->NO_KEEPALIVE:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$PacketKeepalive;->SUCCESS:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager$PacketKeepalive;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager$PacketKeepalive;->mNetwork:Landroid/net/Network;,lo-prio,max-target-o
Landroid/net/ConnectivityManager$PacketKeepalive;->stop()V,max-target-r
Landroid/net/ConnectivityManager$PacketKeepaliveCallback;-><init>()V,max-target-r
Landroid/net/ConnectivityManager$PacketKeepaliveCallback;->onError(I)V,max-target-r
Landroid/net/ConnectivityManager$PacketKeepaliveCallback;->onStarted()V,max-target-r
Landroid/net/ConnectivityManager$PacketKeepaliveCallback;->onStopped()V,max-target-r
Landroid/net/ConnectivityManager$TooManyRequestsException;-><init>()V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;-><init>(Landroid/content/Context;Landroid/net/IConnectivityManager;)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->ACTION_BACKGROUND_DATA_SETTING_CHANGED:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->ACTION_CAPTIVE_PORTAL_SIGN_IN:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->ACTION_CAPTIVE_PORTAL_TEST_COMPLETED:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->ACTION_DATA_ACTIVITY_CHANGE:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->ACTION_PROMPT_LOST_VALIDATION:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->ACTION_PROMPT_UNVALIDATED:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->ACTION_RESTRICT_BACKGROUND_CHANGED:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->ACTION_TETHER_STATE_CHANGED:Ljava/lang/String;,max-target-r
Landroid/net/ConnectivityManager;->ALREADY_UNREGISTERED:Landroid/net/NetworkRequest;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->CALLBACK_AVAILABLE:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->CALLBACK_CAP_CHANGED:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->CALLBACK_IP_CHANGED:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->CALLBACK_LOSING:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->CALLBACK_LOST:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->CALLBACK_PRECHECK:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->CALLBACK_RESUMED:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->CALLBACK_SUSPENDED:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->CALLBACK_UNAVAIL:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->CONNECTIVITY_ACTION:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->DEFAULT_NETWORK_PREFERENCE:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->EXPIRE_LEGACY_REQUEST:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->EXTRA_ACTIVE_LOCAL_ONLY:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->EXTRA_ACTIVE_TETHER:Ljava/lang/String;,max-target-r
Landroid/net/ConnectivityManager;->EXTRA_ADD_TETHER_TYPE:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->EXTRA_AVAILABLE_TETHER:Ljava/lang/String;,max-target-r
Landroid/net/ConnectivityManager;->EXTRA_CAPTIVE_PORTAL:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->EXTRA_CAPTIVE_PORTAL_PROBE_SPEC:Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->EXTRA_CAPTIVE_PORTAL_URL:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->EXTRA_CAPTIVE_PORTAL_USER_AGENT:Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->EXTRA_DEVICE_TYPE:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->EXTRA_ERRORED_TETHER:Ljava/lang/String;,max-target-r
Landroid/net/ConnectivityManager;->EXTRA_EXTRA_INFO:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->EXTRA_INET_CONDITION:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->EXTRA_IS_ACTIVE:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->EXTRA_IS_CAPTIVE_PORTAL:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->EXTRA_IS_FAILOVER:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->EXTRA_NETWORK:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->EXTRA_NETWORK_INFO:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->EXTRA_NETWORK_REQUEST:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->EXTRA_NETWORK_TYPE:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->EXTRA_NO_CONNECTIVITY:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->EXTRA_OTHER_NETWORK_INFO:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->EXTRA_PROVISION_CALLBACK:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->EXTRA_REALTIME_NS:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->EXTRA_REASON:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->EXTRA_REM_TETHER_TYPE:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->EXTRA_RUN_PROVISION:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->EXTRA_SET_ALARM:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->INET_CONDITION_ACTION:Ljava/lang/String;,unsupported
Landroid/net/ConnectivityManager;->MAX_NETWORK_TYPE:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->MAX_RADIO_TYPE:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->MIN_NETWORK_TYPE:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->MULTIPATH_PREFERENCE_HANDOVER:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->MULTIPATH_PREFERENCE_PERFORMANCE:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->MULTIPATH_PREFERENCE_RELIABILITY:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->MULTIPATH_PREFERENCE_UNMETERED:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->NETID_UNSET:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->REQUEST_ID_UNSET:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->RESTRICT_BACKGROUND_STATUS_DISABLED:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->RESTRICT_BACKGROUND_STATUS_ENABLED:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->RESTRICT_BACKGROUND_STATUS_WHITELISTED:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->TETHERING_BLUETOOTH:I,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TETHERING_INVALID:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->TETHERING_USB:I,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TETHERING_WIFI:I,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TETHER_ERROR_DISABLE_NAT_ERROR:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->TETHER_ERROR_ENABLE_NAT_ERROR:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->TETHER_ERROR_ENTITLEMENT_UNKONWN:I,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TETHER_ERROR_IFACE_CFG_ERROR:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->TETHER_ERROR_MASTER_ERROR:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->TETHER_ERROR_NO_ERROR:I,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TETHER_ERROR_PROVISION_FAILED:I,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TETHER_ERROR_SERVICE_UNAVAIL:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->TETHER_ERROR_TETHER_IFACE_ERROR:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->TETHER_ERROR_UNAVAIL_IFACE:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->TETHER_ERROR_UNKNOWN_IFACE:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->TETHER_ERROR_UNSUPPORTED:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->TETHER_ERROR_UNTETHER_IFACE_ERROR:I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->TYPE_BLUETOOTH:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TYPE_DUMMY:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TYPE_ETHERNET:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TYPE_MOBILE:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TYPE_MOBILE_CBS:I,max-target-p
Landroid/net/ConnectivityManager;->TYPE_MOBILE_DUN:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TYPE_MOBILE_EMERGENCY:I,max-target-p
Landroid/net/ConnectivityManager;->TYPE_MOBILE_FOTA:I,max-target-p
Landroid/net/ConnectivityManager;->TYPE_MOBILE_HIPRI:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TYPE_MOBILE_IA:I,unsupported
Landroid/net/ConnectivityManager;->TYPE_MOBILE_IMS:I,unsupported
Landroid/net/ConnectivityManager;->TYPE_MOBILE_MMS:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TYPE_MOBILE_SUPL:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TYPE_NONE:I,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TYPE_PROXY:I,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TYPE_VPN:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TYPE_WIFI:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TYPE_WIFI_P2P:I,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->TYPE_WIMAX:I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->addDefaultNetworkActiveListener(Landroid/net/ConnectivityManager$OnNetworkActiveListener;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->bindProcessToNetwork(Landroid/net/Network;)Z,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->checkCallbackNotNull(Landroid/net/ConnectivityManager$NetworkCallback;)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->checkLegacyRoutingApiAccess()V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->checkPendingIntentNotNull(Landroid/app/PendingIntent;)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->checkTimeout(I)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->convertServiceException(Landroid/os/ServiceSpecificException;)Ljava/lang/RuntimeException;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->createNattKeepalive(Landroid/net/Network;Landroid/os/ParcelFileDescriptor;Ljava/net/InetAddress;Ljava/net/InetAddress;Ljava/util/concurrent/Executor;Landroid/net/SocketKeepalive$Callback;)Landroid/net/SocketKeepalive;,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->createSocketKeepalive(Landroid/net/Network;Landroid/net/IpSecManager$UdpEncapsulationSocket;Ljava/net/InetAddress;Ljava/net/InetAddress;Ljava/util/concurrent/Executor;Landroid/net/SocketKeepalive$Callback;)Landroid/net/SocketKeepalive;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->createSocketKeepalive(Landroid/net/Network;Ljava/net/Socket;Ljava/util/concurrent/Executor;Landroid/net/SocketKeepalive$Callback;)Landroid/net/SocketKeepalive;,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->expireRequest(Landroid/net/NetworkCapabilities;I)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->factoryReset()V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->findRequestForFeature(Landroid/net/NetworkCapabilities;)Landroid/net/NetworkRequest;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->from(Landroid/content/Context;)Landroid/net/ConnectivityManager;,unsupported
Landroid/net/ConnectivityManager;->getActiveLinkProperties()Landroid/net/LinkProperties;,max-target-p
Landroid/net/ConnectivityManager;->getActiveNetwork()Landroid/net/Network;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getActiveNetworkForUid(I)Landroid/net/Network;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->getActiveNetworkForUid(IZ)Landroid/net/Network;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->getActiveNetworkInfo()Landroid/net/NetworkInfo;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getActiveNetworkInfoForUid(I)Landroid/net/NetworkInfo;,max-target-r
Landroid/net/ConnectivityManager;->getActiveNetworkInfoForUid(IZ)Landroid/net/NetworkInfo;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->getAllNetworkInfo()[Landroid/net/NetworkInfo;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getAllNetworks()[Landroid/net/Network;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getBackgroundDataSetting()Z,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getBoundNetworkForProcess()Landroid/net/Network;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getCallbackName(I)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->getCaptivePortalServerUrl()Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getConnectionOwnerUid(ILjava/net/InetSocketAddress;Ljava/net/InetSocketAddress;)I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getDefaultHandler()Landroid/net/ConnectivityManager$CallbackHandler;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->getDefaultNetworkCapabilitiesForUser(I)[Landroid/net/NetworkCapabilities;,unsupported
Landroid/net/ConnectivityManager;->getDefaultProxy()Landroid/net/ProxyInfo;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getGlobalProxy()Landroid/net/ProxyInfo;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->getInstance()Landroid/net/ConnectivityManager;,unsupported
Landroid/net/ConnectivityManager;->getInstanceOrNull()Landroid/net/ConnectivityManager;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->getLastTetherError(Ljava/lang/String;)I,max-target-r
Landroid/net/ConnectivityManager;->getLatestTetheringEntitlementResult(IZLjava/util/concurrent/Executor;Landroid/net/ConnectivityManager$OnTetheringEntitlementResultListener;)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getLinkProperties(I)Landroid/net/LinkProperties;,max-target-p
Landroid/net/ConnectivityManager;->getLinkProperties(Landroid/net/Network;)Landroid/net/LinkProperties;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getMobileDataEnabled()Z,unsupported
Landroid/net/ConnectivityManager;->getMultipathPreference(Landroid/net/Network;)I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getNetworkCapabilities(Landroid/net/Network;)Landroid/net/NetworkCapabilities;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getNetworkForType(I)Landroid/net/Network;,unsupported
Landroid/net/ConnectivityManager;->getNetworkInfo(I)Landroid/net/NetworkInfo;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getNetworkInfo(Landroid/net/Network;)Landroid/net/NetworkInfo;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getNetworkInfoForUid(Landroid/net/Network;IZ)Landroid/net/NetworkInfo;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->getNetworkPreference()I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getNetworkTypeName(I)Ljava/lang/String;,max-target-r
Landroid/net/ConnectivityManager;->getNetworkWatchlistConfigHash()[B,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getProcessDefaultNetwork()Landroid/net/Network;,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getProxyForNetwork(Landroid/net/Network;)Landroid/net/ProxyInfo;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->getRestrictBackgroundStatus()I,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->getTetherableBluetoothRegexs()[Ljava/lang/String;,unsupported
Landroid/net/ConnectivityManager;->getTetherableIfaces()[Ljava/lang/String;,unsupported
Landroid/net/ConnectivityManager;->getTetherableUsbRegexs()[Ljava/lang/String;,unsupported
Landroid/net/ConnectivityManager;->getTetherableWifiRegexs()[Ljava/lang/String;,unsupported
Landroid/net/ConnectivityManager;->getTetheredDhcpRanges()[Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->getTetheredIfaces()[Ljava/lang/String;,unsupported
Landroid/net/ConnectivityManager;->getTetheringErroredIfaces()[Ljava/lang/String;,unsupported
Landroid/net/ConnectivityManager;->isActiveNetworkMetered()Z,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->isDefaultNetworkActive()Z,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->isNetworkSupported(I)Z,max-target-p
Landroid/net/ConnectivityManager;->isNetworkTypeMobile(I)Z,max-target-p
Landroid/net/ConnectivityManager;->isNetworkTypeValid(I)Z,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->isNetworkTypeWifi(I)Z,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->isTetheringSupported()Z,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->legacyTypeForNetworkCapabilities(Landroid/net/NetworkCapabilities;)I,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->mContext:Landroid/content/Context;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->mNetworkActivityListeners:Landroid/util/ArrayMap;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->mService:Landroid/net/IConnectivityManager;,max-target-p
Landroid/net/ConnectivityManager;->networkCapabilitiesForFeature(ILjava/lang/String;)Landroid/net/NetworkCapabilities;,max-target-r
Landroid/net/ConnectivityManager;->networkCapabilitiesForType(I)Landroid/net/NetworkCapabilities;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->registerBestMatchingNetworkCallback(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->registerDefaultNetworkCallback(Landroid/net/ConnectivityManager$NetworkCallback;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->registerDefaultNetworkCallback(Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->registerNetworkCallback(Landroid/net/NetworkRequest;Landroid/app/PendingIntent;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->registerNetworkCallback(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->registerNetworkCallback(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->registerNetworkProvider(Landroid/net/NetworkProvider;)I,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->registerQosCallback(Landroid/net/QosSocketInfo;Ljava/util/concurrent/Executor;Landroid/net/QosCallback;)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->registerTetheringEventCallback(Ljava/util/concurrent/Executor;Landroid/net/ConnectivityManager$OnTetheringEventCallback;)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->releaseNetworkRequest(Landroid/app/PendingIntent;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->removeDefaultNetworkActiveListener(Landroid/net/ConnectivityManager$OnNetworkActiveListener;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->removeRequestForFeature(Landroid/net/NetworkCapabilities;)Z,max-target-r
Landroid/net/ConnectivityManager;->renewRequestLocked(Landroid/net/ConnectivityManager$LegacyRequest;)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->reportBadNetwork(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->reportInetCondition(II)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->reportNetworkConnectivity(Landroid/net/Network;Z)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->requestBandwidthUpdate(Landroid/net/Network;)Z,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->requestNetwork(Landroid/net/NetworkRequest;IILandroid/os/Handler;Landroid/net/ConnectivityManager$NetworkCallback;)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->requestNetwork(Landroid/net/NetworkRequest;Landroid/app/PendingIntent;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->requestNetwork(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->requestNetwork(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;I)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->requestNetwork(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->requestNetwork(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;I)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->requestNetworkForFeatureLocked(Landroid/net/NetworkCapabilities;)Landroid/net/NetworkRequest;,max-target-r
Landroid/net/ConnectivityManager;->requestRouteToHost(II)Z,removed,unsupported
Landroid/net/ConnectivityManager;->requestRouteToHostAddress(ILjava/net/InetAddress;)Z,unsupported
Landroid/net/ConnectivityManager;->sCallbackHandler:Landroid/net/ConnectivityManager$CallbackHandler;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->sCallbacks:Ljava/util/HashMap;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->sInstance:Landroid/net/ConnectivityManager;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->sLegacyRequests:Ljava/util/HashMap;,max-target-r
Landroid/net/ConnectivityManager;->sLegacyTypeToCapability:Landroid/util/SparseIntArray;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->sLegacyTypeToTransport:Landroid/util/SparseIntArray;,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->sendExpireMsgForFeature(Landroid/net/NetworkCapabilities;II)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->setAcceptUnvalidated(Landroid/net/Network;ZZ)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->setAirplaneMode(Z)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->setAvoidUnvalidated(Landroid/net/Network;)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->setBackgroundDataSetting(Z)V,unsupported
Landroid/net/ConnectivityManager;->setGlobalProxy(Landroid/net/ProxyInfo;)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->setNetworkPreference(I)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->setOemNetworkPreference(Landroid/net/OemNetworkPreferences;Ljava/util/concurrent/Executor;Ljava/lang/Runnable;)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->setProcessDefaultNetwork(Landroid/net/Network;)Z,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->setProcessDefaultNetworkForHostResolution(Landroid/net/Network;)Z,max-target-r
Landroid/net/ConnectivityManager;->setProvisioningNotificationVisible(ZILjava/lang/String;)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->setUsbTethering(Z)I,unsupported
Landroid/net/ConnectivityManager;->shouldAvoidBadWifi()Z,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->startCaptivePortalApp(Landroid/net/Network;)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->startCaptivePortalApp(Landroid/net/Network;Landroid/os/Bundle;)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->startNattKeepalive(Landroid/net/Network;ILandroid/net/ConnectivityManager$PacketKeepaliveCallback;Ljava/net/InetAddress;ILjava/net/InetAddress;)Landroid/net/ConnectivityManager$PacketKeepalive;,max-target-r
Landroid/net/ConnectivityManager;->startTethering(IZLandroid/net/ConnectivityManager$OnStartTetheringCallback;)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->startTethering(IZLandroid/net/ConnectivityManager$OnStartTetheringCallback;Landroid/os/Handler;)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->startUsingNetworkFeature(ILjava/lang/String;)I,removed,unsupported
Landroid/net/ConnectivityManager;->stopTethering(I)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->stopUsingNetworkFeature(ILjava/lang/String;)I,removed,unsupported
Landroid/net/ConnectivityManager;->tether(Ljava/lang/String;)I,max-target-r
Landroid/net/ConnectivityManager;->unregisterNetworkCallback(Landroid/app/PendingIntent;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->unregisterNetworkCallback(Landroid/net/ConnectivityManager$NetworkCallback;)V,public-api,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->unregisterNetworkProvider(Landroid/net/NetworkProvider;)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->unregisterQosCallback(Landroid/net/QosCallback;)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->unregisterTetheringEventCallback(Landroid/net/ConnectivityManager$OnTetheringEventCallback;)V,sdk,system-api,test-api
Landroid/net/ConnectivityManager;->unsupportedStartingFrom(I)V,lo-prio,max-target-o
Landroid/net/ConnectivityManager;->untether(Ljava/lang/String;)I,unsupported
Landroid/net/ConnectivityThread$Singleton;-><init>()V,lo-prio,max-target-o
Landroid/net/ConnectivityThread$Singleton;->INSTANCE:Landroid/net/ConnectivityThread;,lo-prio,max-target-o
Landroid/net/ConnectivityThread;-><init>()V,lo-prio,max-target-o
Landroid/net/ConnectivityThread;->createInstance()Landroid/net/ConnectivityThread;,lo-prio,max-target-o
Landroid/net/ConnectivityThread;->get()Landroid/net/ConnectivityThread;,lo-prio,max-target-o
Landroid/net/ConnectivityThread;->getInstanceLooper()Landroid/os/Looper;,lo-prio,max-target-o
Landroid/net/DataUsageRequest$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/DataUsageRequest$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/DataUsageRequest;-><init>(ILandroid/net/NetworkTemplate;J)V,lo-prio,max-target-o
Landroid/net/DataUsageRequest;->CREATOR:Landroid/os/Parcelable$Creator;,lo-prio,max-target-o
Landroid/net/DataUsageRequest;->PARCELABLE_KEY:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/DataUsageRequest;->REQUEST_ID_UNSET:I,lo-prio,max-target-o
Landroid/net/DataUsageRequest;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/DataUsageRequest;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DataUsageRequest;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DataUsageRequest;->requestId:I,lo-prio,max-target-o
Landroid/net/DataUsageRequest;->template:Landroid/net/NetworkTemplate;,lo-prio,max-target-o
Landroid/net/DataUsageRequest;->thresholdInBytes:J,lo-prio,max-target-o
Landroid/net/DataUsageRequest;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DataUsageRequest;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/DhcpInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/DhcpInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/DhcpInfo;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/DhcpInfo;-><init>(Landroid/net/DhcpInfo;)V,lo-prio,max-target-o
Landroid/net/DhcpInfo;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/DhcpInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/DhcpInfo;->dns1:I,public-api,sdk,system-api,test-api
Landroid/net/DhcpInfo;->dns2:I,public-api,sdk,system-api,test-api
Landroid/net/DhcpInfo;->gateway:I,public-api,sdk,system-api,test-api
Landroid/net/DhcpInfo;->ipAddress:I,public-api,sdk,system-api,test-api
Landroid/net/DhcpInfo;->leaseDuration:I,public-api,sdk,system-api,test-api
Landroid/net/DhcpInfo;->netmask:I,public-api,sdk,system-api,test-api
Landroid/net/DhcpInfo;->putAddress(Ljava/lang/StringBuffer;I)V,lo-prio,max-target-o
Landroid/net/DhcpInfo;->serverAddress:I,public-api,sdk,system-api,test-api
Landroid/net/DhcpInfo;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DhcpInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/DhcpOption$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/DhcpOption$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/DhcpOption;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/DhcpOption;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$$ExternalSyntheticLambda10;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$$ExternalSyntheticLambda1;->onCancel()V,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$$ExternalSyntheticLambda2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$$ExternalSyntheticLambda3;->onFileDescriptorEvents(Ljava/io/FileDescriptor;I)I,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$$ExternalSyntheticLambda4;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$$ExternalSyntheticLambda5;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$$ExternalSyntheticLambda6;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$$ExternalSyntheticLambda7;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$$ExternalSyntheticLambda8;->onCancel()V,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$$ExternalSyntheticLambda9;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$Callback;->onAnswer(Ljava/lang/Object;I)V,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$Callback;->onError(Landroid/net/DnsResolver$DnsException;)V,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$DnsException;-><init>(ILjava/lang/Throwable;)V,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$DnsException;->code:I,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$InetAddressAnswerAccumulator;->onAnswer(Ljava/lang/Object;I)V,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver$InetAddressAnswerAccumulator;->onError(Landroid/net/DnsResolver$DnsException;)V,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver;->CLASS_IN:I,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver;->ERROR_PARSE:I,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver;->ERROR_SYSTEM:I,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver;->FLAG_EMPTY:I,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver;->FLAG_NO_CACHE_LOOKUP:I,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver;->FLAG_NO_CACHE_STORE:I,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver;->FLAG_NO_RETRY:I,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver;->TYPE_A:I,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver;->TYPE_AAAA:I,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver;->getInstance()Landroid/net/DnsResolver;,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver;->query(Landroid/net/Network;Ljava/lang/String;IILjava/util/concurrent/Executor;Landroid/os/CancellationSignal;Landroid/net/DnsResolver$Callback;)V,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver;->query(Landroid/net/Network;Ljava/lang/String;ILjava/util/concurrent/Executor;Landroid/os/CancellationSignal;Landroid/net/DnsResolver$Callback;)V,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver;->rawQuery(Landroid/net/Network;Ljava/lang/String;IIILjava/util/concurrent/Executor;Landroid/os/CancellationSignal;Landroid/net/DnsResolver$Callback;)V,public-api,sdk,system-api,test-api
Landroid/net/DnsResolver;->rawQuery(Landroid/net/Network;[BILjava/util/concurrent/Executor;Landroid/os/CancellationSignal;Landroid/net/DnsResolver$Callback;)V,public-api,sdk,system-api,test-api
Landroid/net/DscpPolicy$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/DscpPolicy$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/DscpPolicy$Builder;-><init>(II)V,sdk,system-api,test-api
Landroid/net/DscpPolicy$Builder;->build()Landroid/net/DscpPolicy;,sdk,system-api,test-api
Landroid/net/DscpPolicy$Builder;->setDestinationAddress(Ljava/net/InetAddress;)Landroid/net/DscpPolicy$Builder;,sdk,system-api,test-api
Landroid/net/DscpPolicy$Builder;->setDestinationPortRange(Landroid/util/Range;)Landroid/net/DscpPolicy$Builder;,sdk,system-api,test-api
Landroid/net/DscpPolicy$Builder;->setProtocol(I)Landroid/net/DscpPolicy$Builder;,sdk,system-api,test-api
Landroid/net/DscpPolicy$Builder;->setSourceAddress(Ljava/net/InetAddress;)Landroid/net/DscpPolicy$Builder;,sdk,system-api,test-api
Landroid/net/DscpPolicy$Builder;->setSourcePort(I)Landroid/net/DscpPolicy$Builder;,sdk,system-api,test-api
Landroid/net/DscpPolicy;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/DscpPolicy;->PROTOCOL_ANY:I,sdk,system-api,test-api
Landroid/net/DscpPolicy;->SOURCE_PORT_ANY:I,sdk,system-api,test-api
Landroid/net/DscpPolicy;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/DscpPolicy;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DscpPolicy;->getDestinationAddress()Ljava/net/InetAddress;,sdk,system-api,test-api
Landroid/net/DscpPolicy;->getDestinationPortRange()Landroid/util/Range;,sdk,system-api,test-api
Landroid/net/DscpPolicy;->getDscpValue()I,sdk,system-api,test-api
Landroid/net/DscpPolicy;->getPolicyId()I,sdk,system-api,test-api
Landroid/net/DscpPolicy;->getProtocol()I,sdk,system-api,test-api
Landroid/net/DscpPolicy;->getSourceAddress()Ljava/net/InetAddress;,sdk,system-api,test-api
Landroid/net/DscpPolicy;->getSourcePort()I,sdk,system-api,test-api
Landroid/net/DscpPolicy;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DscpPolicy;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/DscpPolicy;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/EthernetManager$1$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/EthernetManager$2$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/EthernetManager$2$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/EthernetManager$3$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/EthernetManager$Listener;->onAvailabilityChanged(Ljava/lang/String;Z)V,max-target-r
Landroid/net/EthernetManager$NetworkInterfaceOutcomeReceiver$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/EthernetManager$NetworkInterfaceOutcomeReceiver$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/EthernetManager$TetheredInterfaceCallback;->onAvailable(Ljava/lang/String;)V,sdk,system-api,test-api
Landroid/net/EthernetManager$TetheredInterfaceCallback;->onUnavailable()V,sdk,system-api,test-api
Landroid/net/EthernetManager$TetheredInterfaceRequest;->release()V,sdk,system-api,test-api
Landroid/net/EthernetManager;-><init>(Landroid/content/Context;Landroid/net/IEthernetManager;)V,lo-prio,max-target-o
Landroid/net/EthernetManager;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/EthernetManager;->addListener(Landroid/net/EthernetManager$Listener;)V,max-target-r
Landroid/net/EthernetManager;->addListener(Landroid/net/EthernetManager$Listener;Ljava/util/concurrent/Executor;)V,max-target-r
Landroid/net/EthernetManager;->disableInterface(Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V,sdk,system-api,test-api
Landroid/net/EthernetManager;->enableInterface(Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V,sdk,system-api,test-api
Landroid/net/EthernetManager;->getAvailableInterfaces()[Ljava/lang/String;,max-target-r
Landroid/net/EthernetManager;->getConfiguration(Ljava/lang/String;)Landroid/net/IpConfiguration;,max-target-r
Landroid/net/EthernetManager;->isAvailable()Z,max-target-r
Landroid/net/EthernetManager;->isAvailable(Ljava/lang/String;)Z,max-target-r
Landroid/net/EthernetManager;->mService:Landroid/net/IEthernetManager;,lo-prio,max-target-o
Landroid/net/EthernetManager;->removeListener(Landroid/net/EthernetManager$Listener;)V,max-target-r
Landroid/net/EthernetManager;->requestTetheredInterface(Ljava/util/concurrent/Executor;Landroid/net/EthernetManager$TetheredInterfaceCallback;)Landroid/net/EthernetManager$TetheredInterfaceRequest;,sdk,system-api,test-api
Landroid/net/EthernetManager;->setConfiguration(Ljava/lang/String;Landroid/net/IpConfiguration;)V,max-target-r
Landroid/net/EthernetManager;->updateConfiguration(Ljava/lang/String;Landroid/net/EthernetNetworkUpdateRequest;Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V,sdk,system-api,test-api
Landroid/net/EthernetNetworkManagementException$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkManagementException$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkManagementException;-><init>(Ljava/lang/String;)V,sdk,system-api,test-api
Landroid/net/EthernetNetworkManagementException;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/EthernetNetworkManagementException;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkManagementException;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkManagementException;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkManagementException;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkSpecifier$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkSpecifier$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkSpecifier;-><init>(Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkSpecifier;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkSpecifier;->canBeSatisfiedBy(Landroid/net/NetworkSpecifier;)Z,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkSpecifier;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkSpecifier;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkSpecifier;->getInterfaceName()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkSpecifier;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkSpecifier;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkSpecifier;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest$Builder;-><init>()V,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest$Builder;-><init>(Landroid/net/EthernetNetworkUpdateRequest;)V,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest$Builder;->build()Landroid/net/EthernetNetworkUpdateRequest;,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest$Builder;->setIpConfiguration(Landroid/net/IpConfiguration;)Landroid/net/EthernetNetworkUpdateRequest$Builder;,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest$Builder;->setNetworkCapabilities(Landroid/net/NetworkCapabilities;)Landroid/net/EthernetNetworkUpdateRequest$Builder;,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest;->getIpConfiguration()Landroid/net/IpConfiguration;,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest;->getNetworkCapabilities()Landroid/net/NetworkCapabilities;,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/EthernetNetworkUpdateRequest;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/ICaptivePortal$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/ICaptivePortal$Stub$Proxy;-><init>(Landroid/os/IBinder;)V,lo-prio,max-target-o
Landroid/net/ICaptivePortal$Stub$Proxy;->appResponse(I)V,lo-prio,max-target-o
Landroid/net/ICaptivePortal$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/ICaptivePortal$Stub$Proxy;->getInterfaceDescriptor()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ICaptivePortal$Stub$Proxy;->mRemote:Landroid/os/IBinder;,lo-prio,max-target-o
Landroid/net/ICaptivePortal$Stub;-><init>()V,lo-prio,max-target-o
Landroid/net/ICaptivePortal$Stub;->DESCRIPTOR:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ICaptivePortal$Stub;->TRANSACTION_appResponse:I,lo-prio,max-target-o
Landroid/net/ICaptivePortal$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/ICaptivePortal$Stub;->asInterface(Landroid/os/IBinder;)Landroid/net/ICaptivePortal;,lo-prio,max-target-o
Landroid/net/ICaptivePortal$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/ICaptivePortal;->appResponse(I)V,lo-prio,max-target-o
Landroid/net/IConnectivityDiagnosticsCallback$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IConnectivityDiagnosticsCallback$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IConnectivityDiagnosticsCallback$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IConnectivityDiagnosticsCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/IConnectivityManager$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IConnectivityManager$Stub$Proxy;-><init>(Landroid/os/IBinder;)V,unsupported
Landroid/net/IConnectivityManager$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IConnectivityManager$Stub$Proxy;->factoryReset()V,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getActiveLinkProperties()Landroid/net/LinkProperties;,unsupported
Landroid/net/IConnectivityManager$Stub$Proxy;->getActiveNetwork()Landroid/net/Network;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getActiveNetworkForUid(IZ)Landroid/net/Network;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getActiveNetworkInfo()Landroid/net/NetworkInfo;,unsupported
Landroid/net/IConnectivityManager$Stub$Proxy;->getActiveNetworkInfoForUid(IZ)Landroid/net/NetworkInfo;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getAllNetworkInfo()[Landroid/net/NetworkInfo;,unsupported
Landroid/net/IConnectivityManager$Stub$Proxy;->getAllNetworkState()[Landroid/net/NetworkState;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getAllNetworks()[Landroid/net/Network;,unsupported
Landroid/net/IConnectivityManager$Stub$Proxy;->getCaptivePortalServerUrl()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getGlobalProxy()Landroid/net/ProxyInfo;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getInterfaceDescriptor()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getLastTetherError(Ljava/lang/String;)I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getLinkProperties(Landroid/net/Network;)Landroid/net/LinkProperties;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getLinkPropertiesForType(I)Landroid/net/LinkProperties;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getMultipathPreference(Landroid/net/Network;)I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getNetworkForType(I)Landroid/net/Network;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getNetworkInfo(I)Landroid/net/NetworkInfo;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getNetworkInfoForUid(Landroid/net/Network;IZ)Landroid/net/NetworkInfo;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getNetworkWatchlistConfigHash()[B,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getProxyForNetwork(Landroid/net/Network;)Landroid/net/ProxyInfo;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getRestoreDefaultNetworkDelay(I)I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getTetherableIfaces()[Ljava/lang/String;,unsupported
Landroid/net/IConnectivityManager$Stub$Proxy;->getTetherableUsbRegexs()[Ljava/lang/String;,unsupported
Landroid/net/IConnectivityManager$Stub$Proxy;->getTetherableWifiRegexs()[Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->getTetheredIfaces()[Ljava/lang/String;,unsupported
Landroid/net/IConnectivityManager$Stub$Proxy;->getTetheringErroredIfaces()[Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->isActiveNetworkMetered()Z,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->isNetworkSupported(I)Z,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->mRemote:Landroid/os/IBinder;,unsupported
Landroid/net/IConnectivityManager$Stub$Proxy;->releaseNetworkRequest(Landroid/net/NetworkRequest;)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->releasePendingNetworkRequest(Landroid/app/PendingIntent;)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->reportInetCondition(II)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->reportNetworkConnectivity(Landroid/net/Network;Z)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->requestBandwidthUpdate(Landroid/net/Network;)Z,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->setAcceptUnvalidated(Landroid/net/Network;ZZ)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->setAirplaneMode(Z)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->setAvoidUnvalidated(Landroid/net/Network;)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->setGlobalProxy(Landroid/net/ProxyInfo;)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->setProvisioningNotificationVisible(ZILjava/lang/String;)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub$Proxy;->startCaptivePortalApp(Landroid/net/Network;)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->DESCRIPTOR:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_factoryReset:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getActiveLinkProperties:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getActiveNetwork:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getActiveNetworkForUid:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getActiveNetworkInfo:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getActiveNetworkInfoForUid:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getAllNetworkInfo:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getAllNetworkState:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getAllNetworks:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getCaptivePortalServerUrl:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getDefaultNetworkCapabilitiesForUser:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getGlobalProxy:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getLastTetherError:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getLinkProperties:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getLinkPropertiesForType:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getMultipathPreference:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getNetworkCapabilities:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getNetworkForType:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getNetworkInfo:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getNetworkInfoForUid:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getNetworkWatchlistConfigHash:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getProxyForNetwork:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getRestoreDefaultNetworkDelay:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getTetherableIfaces:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getTetherableUsbRegexs:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getTetherableWifiRegexs:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getTetheredIfaces:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getTetheringErroredIfaces:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_isActiveNetworkMetered:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_isNetworkSupported:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_listenForNetwork:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_pendingListenForNetwork:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_pendingRequestForNetwork:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_registerNetworkAgent:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_releaseNetworkRequest:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_releasePendingNetworkRequest:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_reportInetCondition:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_reportNetworkConnectivity:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_requestBandwidthUpdate:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_requestNetwork:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_requestRouteToHostAddress:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setAcceptUnvalidated:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setAirplaneMode:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setAvoidUnvalidated:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setGlobalProxy:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setProvisioningNotificationVisible:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_startCaptivePortalApp:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_startNattKeepalive:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_stopKeepalive:I,lo-prio,max-target-o
Landroid/net/IConnectivityManager$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IConnectivityManager$Stub;->asInterface(Landroid/os/IBinder;)Landroid/net/IConnectivityManager;,unsupported
Landroid/net/IConnectivityManager$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/IConnectivityManager;->factoryReset()V,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getActiveLinkProperties()Landroid/net/LinkProperties;,unsupported
Landroid/net/IConnectivityManager;->getActiveNetwork()Landroid/net/Network;,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getActiveNetworkForUid(IZ)Landroid/net/Network;,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getActiveNetworkInfo()Landroid/net/NetworkInfo;,unsupported
Landroid/net/IConnectivityManager;->getActiveNetworkInfoForUid(IZ)Landroid/net/NetworkInfo;,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getAllNetworkInfo()[Landroid/net/NetworkInfo;,unsupported
Landroid/net/IConnectivityManager;->getAllNetworkState()[Landroid/net/NetworkState;,max-target-r
Landroid/net/IConnectivityManager;->getAllNetworks()[Landroid/net/Network;,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getCaptivePortalServerUrl()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getGlobalProxy()Landroid/net/ProxyInfo;,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getLastTetherError(Ljava/lang/String;)I,max-target-q
Landroid/net/IConnectivityManager;->getLinkProperties(Landroid/net/Network;)Landroid/net/LinkProperties;,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getLinkPropertiesForType(I)Landroid/net/LinkProperties;,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getMultipathPreference(Landroid/net/Network;)I,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getNetworkForType(I)Landroid/net/Network;,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getNetworkInfo(I)Landroid/net/NetworkInfo;,max-target-p
Landroid/net/IConnectivityManager;->getNetworkInfoForUid(Landroid/net/Network;IZ)Landroid/net/NetworkInfo;,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getNetworkWatchlistConfigHash()[B,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getProxyForNetwork(Landroid/net/Network;)Landroid/net/ProxyInfo;,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getRestoreDefaultNetworkDelay(I)I,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->getTetherableIfaces()[Ljava/lang/String;,max-target-q
Landroid/net/IConnectivityManager;->getTetherableUsbRegexs()[Ljava/lang/String;,max-target-q
Landroid/net/IConnectivityManager;->getTetherableWifiRegexs()[Ljava/lang/String;,max-target-q
Landroid/net/IConnectivityManager;->getTetheredIfaces()[Ljava/lang/String;,max-target-q
Landroid/net/IConnectivityManager;->getTetheringErroredIfaces()[Ljava/lang/String;,max-target-q
Landroid/net/IConnectivityManager;->isActiveNetworkMetered()Z,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->isNetworkSupported(I)Z,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->releaseNetworkRequest(Landroid/net/NetworkRequest;)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->releasePendingNetworkRequest(Landroid/app/PendingIntent;)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->reportInetCondition(II)V,max-target-p
Landroid/net/IConnectivityManager;->reportNetworkConnectivity(Landroid/net/Network;Z)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->requestBandwidthUpdate(Landroid/net/Network;)Z,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->setAcceptUnvalidated(Landroid/net/Network;ZZ)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->setAvoidUnvalidated(Landroid/net/Network;)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->setGlobalProxy(Landroid/net/ProxyInfo;)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->setProvisioningNotificationVisible(ZILjava/lang/String;)V,lo-prio,max-target-o
Landroid/net/IConnectivityManager;->startCaptivePortalApp(Landroid/net/Network;)V,lo-prio,max-target-o
Landroid/net/IEthernetManager$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IEthernetManager$Stub$Proxy;-><init>(Landroid/os/IBinder;)V,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub$Proxy;->addListener(Landroid/net/IEthernetServiceListener;)V,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IEthernetManager$Stub$Proxy;->getAvailableInterfaces()[Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub$Proxy;->getConfiguration(Ljava/lang/String;)Landroid/net/IpConfiguration;,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub$Proxy;->getInterfaceDescriptor()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub$Proxy;->isAvailable(Ljava/lang/String;)Z,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub$Proxy;->mRemote:Landroid/os/IBinder;,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub$Proxy;->removeListener(Landroid/net/IEthernetServiceListener;)V,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub$Proxy;->setConfiguration(Ljava/lang/String;Landroid/net/IpConfiguration;)V,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub;-><init>()V,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub;->DESCRIPTOR:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub;->TRANSACTION_addListener:I,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub;->TRANSACTION_getAvailableInterfaces:I,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub;->TRANSACTION_getConfiguration:I,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub;->TRANSACTION_isAvailable:I,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub;->TRANSACTION_removeListener:I,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub;->TRANSACTION_setConfiguration:I,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IEthernetManager$Stub;->asInterface(Landroid/os/IBinder;)Landroid/net/IEthernetManager;,lo-prio,max-target-o
Landroid/net/IEthernetManager$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/IEthernetManager;->addListener(Landroid/net/IEthernetServiceListener;)V,lo-prio,max-target-o
Landroid/net/IEthernetManager;->getAvailableInterfaces()[Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IEthernetManager;->getConfiguration(Ljava/lang/String;)Landroid/net/IpConfiguration;,lo-prio,max-target-o
Landroid/net/IEthernetManager;->isAvailable(Ljava/lang/String;)Z,lo-prio,max-target-o
Landroid/net/IEthernetManager;->removeListener(Landroid/net/IEthernetServiceListener;)V,lo-prio,max-target-o
Landroid/net/IEthernetManager;->setConfiguration(Ljava/lang/String;Landroid/net/IpConfiguration;)V,lo-prio,max-target-o
Landroid/net/IEthernetServiceListener$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IEthernetServiceListener$Stub$Proxy;-><init>(Landroid/os/IBinder;)V,lo-prio,max-target-o
Landroid/net/IEthernetServiceListener$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IEthernetServiceListener$Stub$Proxy;->getInterfaceDescriptor()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IEthernetServiceListener$Stub$Proxy;->mRemote:Landroid/os/IBinder;,lo-prio,max-target-o
Landroid/net/IEthernetServiceListener$Stub;-><init>()V,lo-prio,max-target-o
Landroid/net/IEthernetServiceListener$Stub;->DESCRIPTOR:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IEthernetServiceListener$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IEthernetServiceListener$Stub;->asInterface(Landroid/os/IBinder;)Landroid/net/IEthernetServiceListener;,lo-prio,max-target-o
Landroid/net/IEthernetServiceListener$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/IIntResultListener$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IIntResultListener$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IIntResultListener$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IIntResultListener$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/IIpSecService$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IIpSecService$Stub$Proxy;-><init>(Landroid/os/IBinder;)V,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->addAddressToTunnelInterface(ILandroid/net/LinkAddress;Ljava/lang/String;)V,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->allocateSecurityParameterIndex(Ljava/lang/String;ILandroid/os/IBinder;)Landroid/net/IpSecSpiResponse;,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->applyTransportModeTransform(Landroid/os/ParcelFileDescriptor;II)V,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->applyTunnelModeTransform(IIILjava/lang/String;)V,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IIpSecService$Stub$Proxy;->closeUdpEncapsulationSocket(I)V,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->createTransform(Landroid/net/IpSecConfig;Landroid/os/IBinder;Ljava/lang/String;)Landroid/net/IpSecTransformResponse;,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->createTunnelInterface(Ljava/lang/String;Ljava/lang/String;Landroid/net/Network;Landroid/os/IBinder;Ljava/lang/String;)Landroid/net/IpSecTunnelInterfaceResponse;,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->deleteTransform(I)V,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->deleteTunnelInterface(ILjava/lang/String;)V,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->getInterfaceDescriptor()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->mRemote:Landroid/os/IBinder;,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->openUdpEncapsulationSocket(ILandroid/os/IBinder;)Landroid/net/IpSecUdpEncapResponse;,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->releaseSecurityParameterIndex(I)V,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->removeAddressFromTunnelInterface(ILandroid/net/LinkAddress;Ljava/lang/String;)V,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub$Proxy;->removeTransportModeTransforms(Landroid/os/ParcelFileDescriptor;)V,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;-><init>()V,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->DESCRIPTOR:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->TRANSACTION_addAddressToTunnelInterface:I,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->TRANSACTION_allocateSecurityParameterIndex:I,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->TRANSACTION_applyTransportModeTransform:I,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->TRANSACTION_applyTunnelModeTransform:I,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->TRANSACTION_closeUdpEncapsulationSocket:I,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->TRANSACTION_createTransform:I,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->TRANSACTION_createTunnelInterface:I,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->TRANSACTION_deleteTransform:I,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->TRANSACTION_deleteTunnelInterface:I,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->TRANSACTION_openUdpEncapsulationSocket:I,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->TRANSACTION_releaseSecurityParameterIndex:I,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->TRANSACTION_removeAddressFromTunnelInterface:I,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->TRANSACTION_removeTransportModeTransforms:I,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/IIpSecService$Stub;->asInterface(Landroid/os/IBinder;)Landroid/net/IIpSecService;,lo-prio,max-target-o
Landroid/net/IIpSecService$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/IIpSecService;->addAddressToTunnelInterface(ILandroid/net/LinkAddress;Ljava/lang/String;)V,lo-prio,max-target-o
Landroid/net/IIpSecService;->allocateSecurityParameterIndex(Ljava/lang/String;ILandroid/os/IBinder;)Landroid/net/IpSecSpiResponse;,lo-prio,max-target-o
Landroid/net/IIpSecService;->applyTransportModeTransform(Landroid/os/ParcelFileDescriptor;II)V,lo-prio,max-target-o
Landroid/net/IIpSecService;->applyTunnelModeTransform(IIILjava/lang/String;)V,lo-prio,max-target-o
Landroid/net/IIpSecService;->closeUdpEncapsulationSocket(I)V,lo-prio,max-target-o
Landroid/net/IIpSecService;->createTransform(Landroid/net/IpSecConfig;Landroid/os/IBinder;Ljava/lang/String;)Landroid/net/IpSecTransformResponse;,lo-prio,max-target-o
Landroid/net/IIpSecService;->createTunnelInterface(Ljava/lang/String;Ljava/lang/String;Landroid/net/Network;Landroid/os/IBinder;Ljava/lang/String;)Landroid/net/IpSecTunnelInterfaceResponse;,lo-prio,max-target-o
Landroid/net/IIpSecService;->deleteTransform(I)V,lo-prio,max-target-o
Landroid/net/IIpSecService;->deleteTunnelInterface(ILjava/lang/String;)V,lo-prio,max-target-o
Landroid/net/IIpSecService;->openUdpEncapsulationSocket(ILandroid/os/IBinder;)Landroid/net/IpSecUdpEncapResponse;,lo-prio,max-target-o
Landroid/net/IIpSecService;->releaseSecurityParameterIndex(I)V,lo-prio,max-target-o
Landroid/net/IIpSecService;->removeAddressFromTunnelInterface(ILandroid/net/LinkAddress;Ljava/lang/String;)V,lo-prio,max-target-o
Landroid/net/IIpSecService;->removeTransportModeTransforms(Landroid/os/ParcelFileDescriptor;)V,lo-prio,max-target-o
Landroid/net/INetworkAgent$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/INetworkAgent$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/INetworkAgent$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/INetworkAgent$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/INetworkAgentRegistry$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/INetworkAgentRegistry$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/INetworkAgentRegistry$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/INetworkAgentRegistry$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/INetworkStatsService$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/INetworkStatsService$Stub$Proxy;-><init>(Landroid/os/IBinder;)V,unsupported
Landroid/net/INetworkStatsService$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/INetworkStatsService$Stub$Proxy;->forceUpdate()V,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub$Proxy;->getDataLayerSnapshotForUid(I)Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub$Proxy;->getIfaceStats(Ljava/lang/String;I)J,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub$Proxy;->getInterfaceDescriptor()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub$Proxy;->getMobileIfaces()[Ljava/lang/String;,unsupported
Landroid/net/INetworkStatsService$Stub$Proxy;->getTotalStats(I)J,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub$Proxy;->getUidStats(II)J,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub$Proxy;->incrementOperationCount(III)V,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub$Proxy;->mRemote:Landroid/os/IBinder;,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub$Proxy;->openSession()Landroid/net/INetworkStatsSession;,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub$Proxy;->openSessionForUsageStats(ILjava/lang/String;)Landroid/net/INetworkStatsSession;,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub$Proxy;->unregisterUsageRequest(Landroid/net/DataUsageRequest;)V,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub;-><init>()V,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub;->DESCRIPTOR:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub;->TRANSACTION_forceUpdate:I,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub;->TRANSACTION_getDataLayerSnapshotForUid:I,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub;->TRANSACTION_getIfaceStats:I,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub;->TRANSACTION_getMobileIfaces:I,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub;->TRANSACTION_getTotalStats:I,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub;->TRANSACTION_getUidStats:I,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub;->TRANSACTION_incrementOperationCount:I,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub;->TRANSACTION_openSession:I,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub;->TRANSACTION_openSessionForUsageStats:I,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub;->TRANSACTION_registerUsageCallback:I,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub;->TRANSACTION_unregisterUsageRequest:I,lo-prio,max-target-o
Landroid/net/INetworkStatsService$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/INetworkStatsService$Stub;->asInterface(Landroid/os/IBinder;)Landroid/net/INetworkStatsService;,unsupported
Landroid/net/INetworkStatsService$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/INetworkStatsService;->forceUpdate()V,unsupported
Landroid/net/INetworkStatsService;->getDataLayerSnapshotForUid(I)Landroid/net/NetworkStats;,unsupported
Landroid/net/INetworkStatsService;->getIfaceStats(Ljava/lang/String;I)J,lo-prio,max-target-o
Landroid/net/INetworkStatsService;->getMobileIfaces()[Ljava/lang/String;,unsupported
Landroid/net/INetworkStatsService;->getTotalStats(I)J,lo-prio,max-target-o
Landroid/net/INetworkStatsService;->getUidStats(II)J,lo-prio,max-target-o
Landroid/net/INetworkStatsService;->incrementOperationCount(III)V,lo-prio,max-target-o
Landroid/net/INetworkStatsService;->openSession()Landroid/net/INetworkStatsSession;,unsupported
Landroid/net/INetworkStatsService;->openSessionForUsageStats(ILjava/lang/String;)Landroid/net/INetworkStatsSession;,max-target-r
Landroid/net/INetworkStatsService;->unregisterUsageRequest(Landroid/net/DataUsageRequest;)V,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/INetworkStatsSession$Stub$Proxy;-><init>(Landroid/os/IBinder;)V,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/INetworkStatsSession$Stub$Proxy;->close()V,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub$Proxy;->getDeviceSummaryForNetwork(Landroid/net/NetworkTemplate;JJ)Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub$Proxy;->getHistoryForNetwork(Landroid/net/NetworkTemplate;I)Landroid/net/NetworkStatsHistory;,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub$Proxy;->getHistoryForUid(Landroid/net/NetworkTemplate;IIII)Landroid/net/NetworkStatsHistory;,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub$Proxy;->getHistoryIntervalForUid(Landroid/net/NetworkTemplate;IIIIJJ)Landroid/net/NetworkStatsHistory;,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub$Proxy;->getInterfaceDescriptor()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub$Proxy;->getRelevantUids()[I,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub$Proxy;->getSummaryForAllUid(Landroid/net/NetworkTemplate;JJZ)Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub$Proxy;->getSummaryForNetwork(Landroid/net/NetworkTemplate;JJ)Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub$Proxy;->mRemote:Landroid/os/IBinder;,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub;-><init>()V,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub;->DESCRIPTOR:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub;->TRANSACTION_close:I,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub;->TRANSACTION_getDeviceSummaryForNetwork:I,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub;->TRANSACTION_getHistoryForNetwork:I,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub;->TRANSACTION_getHistoryForUid:I,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub;->TRANSACTION_getHistoryIntervalForUid:I,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub;->TRANSACTION_getRelevantUids:I,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub;->TRANSACTION_getSummaryForAllUid:I,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub;->TRANSACTION_getSummaryForNetwork:I,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/INetworkStatsSession$Stub;->asInterface(Landroid/os/IBinder;)Landroid/net/INetworkStatsSession;,lo-prio,max-target-o
Landroid/net/INetworkStatsSession$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/INetworkStatsSession;->close()V,unsupported
Landroid/net/INetworkStatsSession;->getDeviceSummaryForNetwork(Landroid/net/NetworkTemplate;JJ)Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/net/INetworkStatsSession;->getHistoryForNetwork(Landroid/net/NetworkTemplate;I)Landroid/net/NetworkStatsHistory;,unsupported
Landroid/net/INetworkStatsSession;->getHistoryForUid(Landroid/net/NetworkTemplate;IIII)Landroid/net/NetworkStatsHistory;,unsupported
Landroid/net/INetworkStatsSession;->getHistoryIntervalForUid(Landroid/net/NetworkTemplate;IIIIJJ)Landroid/net/NetworkStatsHistory;,lo-prio,max-target-o
Landroid/net/INetworkStatsSession;->getRelevantUids()[I,lo-prio,max-target-o
Landroid/net/INetworkStatsSession;->getSummaryForAllUid(Landroid/net/NetworkTemplate;JJZ)Landroid/net/NetworkStats;,unsupported
Landroid/net/INetworkStatsSession;->getSummaryForNetwork(Landroid/net/NetworkTemplate;JJ)Landroid/net/NetworkStats;,unsupported
Landroid/net/ITetheringConnector$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/ITetheringConnector$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/ITetheringConnector$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/ITetheringConnector$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/ITetheringEventCallback$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/ITetheringEventCallback$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/ITetheringEventCallback$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/ITetheringEventCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/InetAddresses;->isNumericAddress(Ljava/lang/String;)Z,public-api,sdk,system-api,test-api
Landroid/net/InetAddresses;->parseNumericAddress(Ljava/lang/String;)Ljava/net/InetAddress;,public-api,sdk,system-api,test-api
Landroid/net/InvalidPacketException;-><init>(I)V,sdk,system-api,test-api
Landroid/net/InvalidPacketException;->ERROR_INVALID_IP_ADDRESS:I,sdk,system-api,test-api
Landroid/net/InvalidPacketException;->ERROR_INVALID_LENGTH:I,sdk,system-api,test-api
Landroid/net/InvalidPacketException;->ERROR_INVALID_PORT:I,sdk,system-api,test-api
Landroid/net/InvalidPacketException;->getError()I,sdk,system-api,test-api
Landroid/net/IpConfiguration$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpConfiguration$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpConfiguration$Builder;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/IpConfiguration$Builder;->build()Landroid/net/IpConfiguration;,public-api,sdk,system-api,test-api
Landroid/net/IpConfiguration$Builder;->setHttpProxy(Landroid/net/ProxyInfo;)Landroid/net/IpConfiguration$Builder;,public-api,sdk,system-api,test-api
Landroid/net/IpConfiguration$Builder;->setStaticIpConfiguration(Landroid/net/StaticIpConfiguration;)Landroid/net/IpConfiguration$Builder;,public-api,sdk,system-api,test-api
Landroid/net/IpConfiguration$IpAssignment;->DHCP:Landroid/net/IpConfiguration$IpAssignment;,sdk,system-api,test-api
Landroid/net/IpConfiguration$IpAssignment;->STATIC:Landroid/net/IpConfiguration$IpAssignment;,sdk,system-api,test-api
Landroid/net/IpConfiguration$IpAssignment;->UNASSIGNED:Landroid/net/IpConfiguration$IpAssignment;,sdk,system-api,test-api
Landroid/net/IpConfiguration$IpAssignment;->valueOf(Ljava/lang/String;)Landroid/net/IpConfiguration$IpAssignment;,sdk,system-api,test-api
Landroid/net/IpConfiguration$IpAssignment;->values()[Landroid/net/IpConfiguration$IpAssignment;,sdk,system-api,test-api
Landroid/net/IpConfiguration$ProxySettings;->NONE:Landroid/net/IpConfiguration$ProxySettings;,sdk,system-api,test-api
Landroid/net/IpConfiguration$ProxySettings;->PAC:Landroid/net/IpConfiguration$ProxySettings;,sdk,system-api,test-api
Landroid/net/IpConfiguration$ProxySettings;->STATIC:Landroid/net/IpConfiguration$ProxySettings;,sdk,system-api,test-api
Landroid/net/IpConfiguration$ProxySettings;->UNASSIGNED:Landroid/net/IpConfiguration$ProxySettings;,sdk,system-api,test-api
Landroid/net/IpConfiguration$ProxySettings;->valueOf(Ljava/lang/String;)Landroid/net/IpConfiguration$ProxySettings;,sdk,system-api,test-api
Landroid/net/IpConfiguration$ProxySettings;->values()[Landroid/net/IpConfiguration$ProxySettings;,sdk,system-api,test-api
Landroid/net/IpConfiguration;-><init>()V,sdk,system-api,test-api
Landroid/net/IpConfiguration;-><init>(Landroid/net/IpConfiguration$IpAssignment;Landroid/net/IpConfiguration$ProxySettings;Landroid/net/StaticIpConfiguration;Landroid/net/ProxyInfo;)V,max-target-r
Landroid/net/IpConfiguration;-><init>(Landroid/net/IpConfiguration;)V,sdk,system-api,test-api
Landroid/net/IpConfiguration;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/IpConfiguration;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpConfiguration;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/IpConfiguration;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpConfiguration;->getHttpProxy()Landroid/net/ProxyInfo;,public-api,sdk,system-api,test-api
Landroid/net/IpConfiguration;->getIpAssignment()Landroid/net/IpConfiguration$IpAssignment;,sdk,system-api,test-api
Landroid/net/IpConfiguration;->getProxySettings()Landroid/net/IpConfiguration$ProxySettings;,sdk,system-api,test-api
Landroid/net/IpConfiguration;->getStaticIpConfiguration()Landroid/net/StaticIpConfiguration;,public-api,sdk,system-api,test-api
Landroid/net/IpConfiguration;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpConfiguration;->httpProxy:Landroid/net/ProxyInfo;,unsupported
Landroid/net/IpConfiguration;->init(Landroid/net/IpConfiguration$IpAssignment;Landroid/net/IpConfiguration$ProxySettings;Landroid/net/StaticIpConfiguration;Landroid/net/ProxyInfo;)V,lo-prio,max-target-o
Landroid/net/IpConfiguration;->ipAssignment:Landroid/net/IpConfiguration$IpAssignment;,lo-prio,max-target-o
Landroid/net/IpConfiguration;->proxySettings:Landroid/net/IpConfiguration$ProxySettings;,lo-prio,max-target-o
Landroid/net/IpConfiguration;->setHttpProxy(Landroid/net/ProxyInfo;)V,sdk,system-api,test-api
Landroid/net/IpConfiguration;->setIpAssignment(Landroid/net/IpConfiguration$IpAssignment;)V,sdk,system-api,test-api
Landroid/net/IpConfiguration;->setProxySettings(Landroid/net/IpConfiguration$ProxySettings;)V,sdk,system-api,test-api
Landroid/net/IpConfiguration;->setStaticIpConfiguration(Landroid/net/StaticIpConfiguration;)V,sdk,system-api,test-api
Landroid/net/IpConfiguration;->staticIpConfiguration:Landroid/net/StaticIpConfiguration;,lo-prio,max-target-o
Landroid/net/IpConfiguration;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpConfiguration;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/IpPrefix$1;->compare(Ljava/lang/Object;Ljava/lang/Object;)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpPrefix$2;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpPrefix$2;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpPrefix;-><init>(Ljava/lang/String;)V,sdk,system-api,test-api
Landroid/net/IpPrefix;-><init>(Ljava/net/InetAddress;I)V,public-api,sdk,system-api,test-api
Landroid/net/IpPrefix;-><init>([BI)V,lo-prio,max-target-o
Landroid/net/IpPrefix;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/IpPrefix;->address:[B,lo-prio,max-target-o
Landroid/net/IpPrefix;->checkAndMaskAddressAndPrefixLength()V,lo-prio,max-target-o
Landroid/net/IpPrefix;->contains(Ljava/net/InetAddress;)Z,public-api,sdk,system-api,test-api
Landroid/net/IpPrefix;->containsPrefix(Landroid/net/IpPrefix;)Z,lo-prio,max-target-o
Landroid/net/IpPrefix;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/IpPrefix;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpPrefix;->getAddress()Ljava/net/InetAddress;,public-api,sdk,system-api,test-api
Landroid/net/IpPrefix;->getPrefixLength()I,public-api,sdk,system-api,test-api
Landroid/net/IpPrefix;->getRawAddress()[B,public-api,sdk,system-api,test-api
Landroid/net/IpPrefix;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpPrefix;->isIPv4()Z,lo-prio,max-target-o
Landroid/net/IpPrefix;->isIPv6()Z,lo-prio,max-target-o
Landroid/net/IpPrefix;->lengthComparator()Ljava/util/Comparator;,lo-prio,max-target-o
Landroid/net/IpPrefix;->prefixLength:I,lo-prio,max-target-o
Landroid/net/IpPrefix;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpPrefix;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;-><init>(Ljava/lang/String;[B)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;-><init>(Ljava/lang/String;[BI)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->AUTH_AES_CMAC:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->AUTH_AES_XCBC:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->AUTH_CRYPT_AES_GCM:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->AUTH_CRYPT_CHACHA20_POLY1305:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->AUTH_HMAC_MD5:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->AUTH_HMAC_SHA1:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->AUTH_HMAC_SHA256:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->AUTH_HMAC_SHA384:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->AUTH_HMAC_SHA512:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->CRYPT_AES_CBC:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->CRYPT_AES_CTR:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->CRYPT_NULL:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecAlgorithm;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecAlgorithm;->checkValidOrThrow(Ljava/lang/String;II)V,lo-prio,max-target-o
Landroid/net/IpSecAlgorithm;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->equals(Landroid/net/IpSecAlgorithm;Landroid/net/IpSecAlgorithm;)Z,lo-prio,max-target-o
Landroid/net/IpSecAlgorithm;->getKey()[B,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->getName()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->getSupportedAlgorithms()Ljava/util/Set;,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->getTruncationLengthBits()I,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->isAead()Z,lo-prio,max-target-o
Landroid/net/IpSecAlgorithm;->isAuthentication()Z,lo-prio,max-target-o
Landroid/net/IpSecAlgorithm;->isEncryption()Z,lo-prio,max-target-o
Landroid/net/IpSecAlgorithm;->mKey:[B,lo-prio,max-target-o
Landroid/net/IpSecAlgorithm;->mName:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecAlgorithm;->mTruncLenBits:I,lo-prio,max-target-o
Landroid/net/IpSecAlgorithm;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecAlgorithm;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecConfig$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpSecConfig$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpSecConfig;-><init>()V,lo-prio,max-target-o
Landroid/net/IpSecConfig;-><init>(Landroid/net/IpSecConfig;)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;-><init>(Landroid/os/Parcel;)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->CREATOR:Landroid/os/Parcelable$Creator;,lo-prio,max-target-o
Landroid/net/IpSecConfig;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecConfig;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/IpSecConfig;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecConfig;->getAuthenticatedEncryption()Landroid/net/IpSecAlgorithm;,lo-prio,max-target-o
Landroid/net/IpSecConfig;->getAuthentication()Landroid/net/IpSecAlgorithm;,lo-prio,max-target-o
Landroid/net/IpSecConfig;->getDestinationAddress()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecConfig;->getEncapRemotePort()I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->getEncapSocketResourceId()I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->getEncapType()I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->getEncryption()Landroid/net/IpSecAlgorithm;,lo-prio,max-target-o
Landroid/net/IpSecConfig;->getMarkMask()I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->getMarkValue()I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->getMode()I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->getNattKeepaliveInterval()I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->getNetwork()Landroid/net/Network;,lo-prio,max-target-o
Landroid/net/IpSecConfig;->getSourceAddress()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecConfig;->getSpiResourceId()I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->mAuthenticatedEncryption:Landroid/net/IpSecAlgorithm;,lo-prio,max-target-o
Landroid/net/IpSecConfig;->mAuthentication:Landroid/net/IpSecAlgorithm;,lo-prio,max-target-o
Landroid/net/IpSecConfig;->mDestinationAddress:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecConfig;->mEncapRemotePort:I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->mEncapSocketResourceId:I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->mEncapType:I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->mEncryption:Landroid/net/IpSecAlgorithm;,lo-prio,max-target-o
Landroid/net/IpSecConfig;->mMarkMask:I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->mMarkValue:I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->mMode:I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->mNattKeepaliveInterval:I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->mNetwork:Landroid/net/Network;,lo-prio,max-target-o
Landroid/net/IpSecConfig;->mSourceAddress:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecConfig;->mSpiResourceId:I,lo-prio,max-target-o
Landroid/net/IpSecConfig;->setAuthenticatedEncryption(Landroid/net/IpSecAlgorithm;)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->setAuthentication(Landroid/net/IpSecAlgorithm;)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->setDestinationAddress(Ljava/lang/String;)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->setEncapRemotePort(I)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->setEncapSocketResourceId(I)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->setEncapType(I)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->setEncryption(Landroid/net/IpSecAlgorithm;)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->setMarkMask(I)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->setMarkValue(I)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->setMode(I)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->setNattKeepaliveInterval(I)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->setNetwork(Landroid/net/Network;)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->setSourceAddress(Ljava/lang/String;)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->setSpiResourceId(I)V,lo-prio,max-target-o
Landroid/net/IpSecConfig;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecConfig;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager$IpSecTunnelInterface;-><init>(Landroid/content/Context;Landroid/net/IIpSecService;Ljava/net/InetAddress;Ljava/net/InetAddress;Landroid/net/Network;)V,lo-prio,max-target-o
Landroid/net/IpSecManager$IpSecTunnelInterface;->addAddress(Ljava/net/InetAddress;I)V,sdk,system-api,test-api
Landroid/net/IpSecManager$IpSecTunnelInterface;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager$IpSecTunnelInterface;->finalize()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager$IpSecTunnelInterface;->getInterfaceName()Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/IpSecManager$IpSecTunnelInterface;->getResourceId()I,lo-prio,max-target-o
Landroid/net/IpSecManager$IpSecTunnelInterface;->mCloseGuard:Ldalvik/system/CloseGuard;,lo-prio,max-target-o
Landroid/net/IpSecManager$IpSecTunnelInterface;->mInterfaceName:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecManager$IpSecTunnelInterface;->mLocalAddress:Ljava/net/InetAddress;,lo-prio,max-target-o
Landroid/net/IpSecManager$IpSecTunnelInterface;->mOpPackageName:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecManager$IpSecTunnelInterface;->mRemoteAddress:Ljava/net/InetAddress;,lo-prio,max-target-o
Landroid/net/IpSecManager$IpSecTunnelInterface;->mResourceId:I,lo-prio,max-target-o
Landroid/net/IpSecManager$IpSecTunnelInterface;->mService:Landroid/net/IIpSecService;,lo-prio,max-target-o
Landroid/net/IpSecManager$IpSecTunnelInterface;->mUnderlyingNetwork:Landroid/net/Network;,lo-prio,max-target-o
Landroid/net/IpSecManager$IpSecTunnelInterface;->removeAddress(Ljava/net/InetAddress;I)V,sdk,system-api,test-api
Landroid/net/IpSecManager$IpSecTunnelInterface;->setUnderlyingNetwork(Landroid/net/Network;)V,sdk,system-api,test-api
Landroid/net/IpSecManager$IpSecTunnelInterface;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager$ResourceUnavailableException;-><init>(Ljava/lang/String;)V,lo-prio,max-target-o
Landroid/net/IpSecManager$SecurityParameterIndex;-><init>(Landroid/net/IIpSecService;Ljava/net/InetAddress;I)V,lo-prio,max-target-o
Landroid/net/IpSecManager$SecurityParameterIndex;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager$SecurityParameterIndex;->finalize()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager$SecurityParameterIndex;->getResourceId()I,lo-prio,max-target-o
Landroid/net/IpSecManager$SecurityParameterIndex;->getSpi()I,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager$SecurityParameterIndex;->mCloseGuard:Ldalvik/system/CloseGuard;,lo-prio,max-target-o
Landroid/net/IpSecManager$SecurityParameterIndex;->mDestinationAddress:Ljava/net/InetAddress;,lo-prio,max-target-o
Landroid/net/IpSecManager$SecurityParameterIndex;->mResourceId:I,lo-prio,max-target-o
Landroid/net/IpSecManager$SecurityParameterIndex;->mService:Landroid/net/IIpSecService;,lo-prio,max-target-o
Landroid/net/IpSecManager$SecurityParameterIndex;->mSpi:I,lo-prio,max-target-o
Landroid/net/IpSecManager$SecurityParameterIndex;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager$SpiUnavailableException;-><init>(Ljava/lang/String;I)V,lo-prio,max-target-o
Landroid/net/IpSecManager$SpiUnavailableException;->getSpi()I,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager$SpiUnavailableException;->mSpi:I,lo-prio,max-target-o
Landroid/net/IpSecManager$Status;->OK:I,lo-prio,max-target-o
Landroid/net/IpSecManager$Status;->RESOURCE_UNAVAILABLE:I,lo-prio,max-target-o
Landroid/net/IpSecManager$Status;->SPI_UNAVAILABLE:I,lo-prio,max-target-o
Landroid/net/IpSecManager$UdpEncapsulationSocket;-><init>(Landroid/net/IIpSecService;I)V,lo-prio,max-target-o
Landroid/net/IpSecManager$UdpEncapsulationSocket;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager$UdpEncapsulationSocket;->finalize()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager$UdpEncapsulationSocket;->getFileDescriptor()Ljava/io/FileDescriptor;,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager$UdpEncapsulationSocket;->getPort()I,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager$UdpEncapsulationSocket;->getResourceId()I,lo-prio,max-target-o
Landroid/net/IpSecManager$UdpEncapsulationSocket;->mCloseGuard:Ldalvik/system/CloseGuard;,lo-prio,max-target-o
Landroid/net/IpSecManager$UdpEncapsulationSocket;->mPfd:Landroid/os/ParcelFileDescriptor;,lo-prio,max-target-o
Landroid/net/IpSecManager$UdpEncapsulationSocket;->mPort:I,lo-prio,max-target-o
Landroid/net/IpSecManager$UdpEncapsulationSocket;->mResourceId:I,lo-prio,max-target-o
Landroid/net/IpSecManager$UdpEncapsulationSocket;->mService:Landroid/net/IIpSecService;,lo-prio,max-target-o
Landroid/net/IpSecManager$UdpEncapsulationSocket;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager;-><init>(Landroid/content/Context;Landroid/net/IIpSecService;)V,lo-prio,max-target-o
Landroid/net/IpSecManager;->DIRECTION_IN:I,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager;->DIRECTION_OUT:I,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager;->INVALID_RESOURCE_ID:I,lo-prio,max-target-o
Landroid/net/IpSecManager;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecManager;->allocateSecurityParameterIndex(Ljava/net/InetAddress;)Landroid/net/IpSecManager$SecurityParameterIndex;,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager;->allocateSecurityParameterIndex(Ljava/net/InetAddress;I)Landroid/net/IpSecManager$SecurityParameterIndex;,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager;->applyTransportModeTransform(Ljava/io/FileDescriptor;ILandroid/net/IpSecTransform;)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager;->applyTransportModeTransform(Ljava/net/DatagramSocket;ILandroid/net/IpSecTransform;)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager;->applyTransportModeTransform(Ljava/net/Socket;ILandroid/net/IpSecTransform;)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager;->applyTunnelModeTransform(Landroid/net/IpSecManager$IpSecTunnelInterface;ILandroid/net/IpSecTransform;)V,sdk,system-api,test-api
Landroid/net/IpSecManager;->createIpSecTunnelInterface(Ljava/net/InetAddress;Ljava/net/InetAddress;Landroid/net/Network;)Landroid/net/IpSecManager$IpSecTunnelInterface;,sdk,system-api,test-api
Landroid/net/IpSecManager;->mContext:Landroid/content/Context;,lo-prio,max-target-o
Landroid/net/IpSecManager;->mService:Landroid/net/IIpSecService;,lo-prio,max-target-o
Landroid/net/IpSecManager;->maybeHandleServiceSpecificException(Landroid/os/ServiceSpecificException;)V,lo-prio,max-target-o
Landroid/net/IpSecManager;->openUdpEncapsulationSocket()Landroid/net/IpSecManager$UdpEncapsulationSocket;,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager;->openUdpEncapsulationSocket(I)Landroid/net/IpSecManager$UdpEncapsulationSocket;,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager;->removeTransportModeTransforms(Ljava/io/FileDescriptor;)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager;->removeTransportModeTransforms(Ljava/net/DatagramSocket;)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager;->removeTransportModeTransforms(Ljava/net/Socket;)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecManager;->removeTunnelModeTransform(Landroid/net/Network;Landroid/net/IpSecTransform;)V,lo-prio,max-target-o
Landroid/net/IpSecManager;->rethrowCheckedExceptionFromServiceSpecificException(Landroid/os/ServiceSpecificException;)Ljava/io/IOException;,lo-prio,max-target-o
Landroid/net/IpSecManager;->rethrowUncheckedExceptionFromServiceSpecificException(Landroid/os/ServiceSpecificException;)Ljava/lang/RuntimeException;,lo-prio,max-target-o
Landroid/net/IpSecManager;->startTunnelModeTransformMigration(Landroid/net/IpSecTransform;Ljava/net/InetAddress;Ljava/net/InetAddress;)V,sdk,system-api,test-api
Landroid/net/IpSecSpiResponse$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpSecSpiResponse$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpSecSpiResponse;-><init>(I)V,lo-prio,max-target-o
Landroid/net/IpSecSpiResponse;-><init>(III)V,lo-prio,max-target-o
Landroid/net/IpSecSpiResponse;-><init>(Landroid/os/Parcel;)V,lo-prio,max-target-o
Landroid/net/IpSecSpiResponse;->CREATOR:Landroid/os/Parcelable$Creator;,lo-prio,max-target-o
Landroid/net/IpSecSpiResponse;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecSpiResponse;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/IpSecSpiResponse;->resourceId:I,lo-prio,max-target-o
Landroid/net/IpSecSpiResponse;->spi:I,lo-prio,max-target-o
Landroid/net/IpSecSpiResponse;->status:I,lo-prio,max-target-o
Landroid/net/IpSecSpiResponse;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecTransform$Builder;-><init>(Landroid/content/Context;)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecTransform$Builder;->buildTransportModeTransform(Ljava/net/InetAddress;Landroid/net/IpSecManager$SecurityParameterIndex;)Landroid/net/IpSecTransform;,public-api,sdk,system-api,test-api
Landroid/net/IpSecTransform$Builder;->buildTunnelModeTransform(Ljava/net/InetAddress;Landroid/net/IpSecManager$SecurityParameterIndex;)Landroid/net/IpSecTransform;,sdk,system-api,test-api
Landroid/net/IpSecTransform$Builder;->mConfig:Landroid/net/IpSecConfig;,lo-prio,max-target-o
Landroid/net/IpSecTransform$Builder;->mContext:Landroid/content/Context;,lo-prio,max-target-o
Landroid/net/IpSecTransform$Builder;->setAuthenticatedEncryption(Landroid/net/IpSecAlgorithm;)Landroid/net/IpSecTransform$Builder;,public-api,sdk,system-api,test-api
Landroid/net/IpSecTransform$Builder;->setAuthentication(Landroid/net/IpSecAlgorithm;)Landroid/net/IpSecTransform$Builder;,public-api,sdk,system-api,test-api
Landroid/net/IpSecTransform$Builder;->setEncryption(Landroid/net/IpSecAlgorithm;)Landroid/net/IpSecTransform$Builder;,public-api,sdk,system-api,test-api
Landroid/net/IpSecTransform$Builder;->setIpv4Encapsulation(Landroid/net/IpSecManager$UdpEncapsulationSocket;I)Landroid/net/IpSecTransform$Builder;,public-api,sdk,system-api,test-api
Landroid/net/IpSecTransform$NattKeepaliveCallback;-><init>()V,lo-prio,max-target-o
Landroid/net/IpSecTransform$NattKeepaliveCallback;->ERROR_HARDWARE_ERROR:I,lo-prio,max-target-o
Landroid/net/IpSecTransform$NattKeepaliveCallback;->ERROR_HARDWARE_UNSUPPORTED:I,lo-prio,max-target-o
Landroid/net/IpSecTransform$NattKeepaliveCallback;->ERROR_INVALID_NETWORK:I,lo-prio,max-target-o
Landroid/net/IpSecTransform$NattKeepaliveCallback;->onError(I)V,lo-prio,max-target-o
Landroid/net/IpSecTransform$NattKeepaliveCallback;->onStarted()V,lo-prio,max-target-o
Landroid/net/IpSecTransform$NattKeepaliveCallback;->onStopped()V,lo-prio,max-target-o
Landroid/net/IpSecTransform;-><init>(Landroid/content/Context;Landroid/net/IpSecConfig;)V,lo-prio,max-target-o
Landroid/net/IpSecTransform;->ENCAP_ESPINUDP:I,lo-prio,max-target-o
Landroid/net/IpSecTransform;->ENCAP_ESPINUDP_NON_IKE:I,lo-prio,max-target-o
Landroid/net/IpSecTransform;->ENCAP_NONE:I,lo-prio,max-target-o
Landroid/net/IpSecTransform;->MODE_TRANSPORT:I,lo-prio,max-target-o
Landroid/net/IpSecTransform;->MODE_TUNNEL:I,lo-prio,max-target-o
Landroid/net/IpSecTransform;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecTransform;->activate()Landroid/net/IpSecTransform;,lo-prio,max-target-o
Landroid/net/IpSecTransform;->checkResultStatus(I)V,lo-prio,max-target-o
Landroid/net/IpSecTransform;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecTransform;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecTransform;->finalize()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecTransform;->getConfig()Landroid/net/IpSecConfig;,lo-prio,max-target-o
Landroid/net/IpSecTransform;->getResourceId()I,lo-prio,max-target-o
Landroid/net/IpSecTransform;->mCloseGuard:Ldalvik/system/CloseGuard;,lo-prio,max-target-o
Landroid/net/IpSecTransform;->mConfig:Landroid/net/IpSecConfig;,lo-prio,max-target-o
Landroid/net/IpSecTransform;->mContext:Landroid/content/Context;,lo-prio,max-target-o
Landroid/net/IpSecTransform;->mResourceId:I,lo-prio,max-target-o
Landroid/net/IpSecTransform;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/IpSecTransformResponse$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpSecTransformResponse$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpSecTransformResponse;-><init>(I)V,lo-prio,max-target-o
Landroid/net/IpSecTransformResponse;-><init>(II)V,lo-prio,max-target-o
Landroid/net/IpSecTransformResponse;-><init>(Landroid/os/Parcel;)V,lo-prio,max-target-o
Landroid/net/IpSecTransformResponse;->CREATOR:Landroid/os/Parcelable$Creator;,lo-prio,max-target-o
Landroid/net/IpSecTransformResponse;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecTransformResponse;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/IpSecTransformResponse;->resourceId:I,lo-prio,max-target-o
Landroid/net/IpSecTransformResponse;->status:I,lo-prio,max-target-o
Landroid/net/IpSecTransformResponse;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecTunnelInterfaceResponse$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpSecTunnelInterfaceResponse$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpSecTunnelInterfaceResponse;-><init>(I)V,lo-prio,max-target-o
Landroid/net/IpSecTunnelInterfaceResponse;-><init>(IILjava/lang/String;)V,lo-prio,max-target-o
Landroid/net/IpSecTunnelInterfaceResponse;-><init>(Landroid/os/Parcel;)V,lo-prio,max-target-o
Landroid/net/IpSecTunnelInterfaceResponse;->CREATOR:Landroid/os/Parcelable$Creator;,lo-prio,max-target-o
Landroid/net/IpSecTunnelInterfaceResponse;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecTunnelInterfaceResponse;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/IpSecTunnelInterfaceResponse;->interfaceName:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecTunnelInterfaceResponse;->resourceId:I,lo-prio,max-target-o
Landroid/net/IpSecTunnelInterfaceResponse;->status:I,lo-prio,max-target-o
Landroid/net/IpSecTunnelInterfaceResponse;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/IpSecUdpEncapResponse$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpSecUdpEncapResponse$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/IpSecUdpEncapResponse;-><init>(I)V,lo-prio,max-target-o
Landroid/net/IpSecUdpEncapResponse;-><init>(IIILjava/io/FileDescriptor;)V,lo-prio,max-target-o
Landroid/net/IpSecUdpEncapResponse;-><init>(Landroid/os/Parcel;)V,lo-prio,max-target-o
Landroid/net/IpSecUdpEncapResponse;->CREATOR:Landroid/os/Parcelable$Creator;,lo-prio,max-target-o
Landroid/net/IpSecUdpEncapResponse;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/IpSecUdpEncapResponse;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/IpSecUdpEncapResponse;->fileDescriptor:Landroid/os/ParcelFileDescriptor;,lo-prio,max-target-o
Landroid/net/IpSecUdpEncapResponse;->port:I,lo-prio,max-target-o
Landroid/net/IpSecUdpEncapResponse;->resourceId:I,lo-prio,max-target-o
Landroid/net/IpSecUdpEncapResponse;->status:I,lo-prio,max-target-o
Landroid/net/IpSecUdpEncapResponse;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/KeepalivePacketData;-><init>(Ljava/net/InetAddress;ILjava/net/InetAddress;I[B)V,sdk,system-api,test-api
Landroid/net/KeepalivePacketData;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/KeepalivePacketData;->getDstAddress()Ljava/net/InetAddress;,sdk,system-api,test-api
Landroid/net/KeepalivePacketData;->getDstPort()I,sdk,system-api,test-api
Landroid/net/KeepalivePacketData;->getPacket()[B,sdk,system-api,test-api
Landroid/net/KeepalivePacketData;->getSrcAddress()Ljava/net/InetAddress;,sdk,system-api,test-api
Landroid/net/KeepalivePacketData;->getSrcPort()I,sdk,system-api,test-api
Landroid/net/KeepalivePacketData;->mPacket:[B,lo-prio,max-target-o
Landroid/net/KeepalivePacketData;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/LinkAddress$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/LinkAddress$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/LinkAddress;-><init>(Ljava/lang/String;)V,sdk,system-api,test-api
Landroid/net/LinkAddress;-><init>(Ljava/lang/String;II)V,sdk,system-api,test-api
Landroid/net/LinkAddress;-><init>(Ljava/net/InetAddress;I)V,sdk,system-api,test-api
Landroid/net/LinkAddress;-><init>(Ljava/net/InetAddress;III)V,sdk,system-api,test-api
Landroid/net/LinkAddress;-><init>(Ljava/net/InetAddress;IIIJJ)V,sdk,system-api,test-api
Landroid/net/LinkAddress;-><init>(Ljava/net/InterfaceAddress;)V,lo-prio,max-target-o
Landroid/net/LinkAddress;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/LinkAddress;->LIFETIME_PERMANENT:J,sdk,system-api,test-api
Landroid/net/LinkAddress;->LIFETIME_UNKNOWN:J,sdk,system-api,test-api
Landroid/net/LinkAddress;->address:Ljava/net/InetAddress;,max-target-p
Landroid/net/LinkAddress;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/LinkAddress;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/LinkAddress;->flags:I,lo-prio,max-target-o
Landroid/net/LinkAddress;->getAddress()Ljava/net/InetAddress;,public-api,sdk,system-api,test-api
Landroid/net/LinkAddress;->getDeprecationTime()J,sdk,system-api,test-api
Landroid/net/LinkAddress;->getExpirationTime()J,sdk,system-api,test-api
Landroid/net/LinkAddress;->getFlags()I,public-api,sdk,system-api,test-api
Landroid/net/LinkAddress;->getNetworkPrefixLength()I,unsupported
Landroid/net/LinkAddress;->getPrefixLength()I,public-api,sdk,system-api,test-api
Landroid/net/LinkAddress;->getScope()I,public-api,sdk,system-api,test-api
Landroid/net/LinkAddress;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/LinkAddress;->isGlobalPreferred()Z,sdk,system-api,test-api
Landroid/net/LinkAddress;->isIPv6()Z,max-target-p
Landroid/net/LinkAddress;->isIpv4()Z,sdk,system-api,test-api
Landroid/net/LinkAddress;->isIpv6()Z,sdk,system-api,test-api
Landroid/net/LinkAddress;->isSameAddressAs(Landroid/net/LinkAddress;)Z,sdk,system-api,test-api
Landroid/net/LinkAddress;->prefixLength:I,max-target-p
Landroid/net/LinkAddress;->scope:I,lo-prio,max-target-o
Landroid/net/LinkAddress;->scopeForUnicastAddress(Ljava/net/InetAddress;)I,lo-prio,max-target-o
Landroid/net/LinkAddress;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/LinkAddress;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties$$ExternalSyntheticLambda0;->test(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties$ProvisioningChange;->GAINED_PROVISIONING:Landroid/net/LinkProperties$ProvisioningChange;,unsupported
Landroid/net/LinkProperties$ProvisioningChange;->LOST_PROVISIONING:Landroid/net/LinkProperties$ProvisioningChange;,unsupported
Landroid/net/LinkProperties$ProvisioningChange;->STILL_NOT_PROVISIONED:Landroid/net/LinkProperties$ProvisioningChange;,unsupported
Landroid/net/LinkProperties$ProvisioningChange;->STILL_PROVISIONED:Landroid/net/LinkProperties$ProvisioningChange;,unsupported
Landroid/net/LinkProperties$ProvisioningChange;->valueOf(Ljava/lang/String;)Landroid/net/LinkProperties$ProvisioningChange;,lo-prio,max-target-o
Landroid/net/LinkProperties$ProvisioningChange;->values()[Landroid/net/LinkProperties$ProvisioningChange;,unsupported
Landroid/net/LinkProperties;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;-><init>(Landroid/net/LinkProperties;)V,sdk,system-api,test-api
Landroid/net/LinkProperties;-><init>(Landroid/net/LinkProperties;Z)V,sdk,system-api,test-api
Landroid/net/LinkProperties;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->MAX_MTU:I,lo-prio,max-target-o
Landroid/net/LinkProperties;->MIN_MTU:I,lo-prio,max-target-o
Landroid/net/LinkProperties;->MIN_MTU_V6:I,lo-prio,max-target-o
Landroid/net/LinkProperties;->addDnsServer(Ljava/net/InetAddress;)Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->addLinkAddress(Landroid/net/LinkAddress;)Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->addPcscfServer(Ljava/net/InetAddress;)Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->addRoute(Landroid/net/RouteInfo;)Z,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->addStackedLink(Landroid/net/LinkProperties;)Z,unsupported
Landroid/net/LinkProperties;->addValidatedPrivateDnsServer(Ljava/net/InetAddress;)Z,lo-prio,max-target-o
Landroid/net/LinkProperties;->clear()V,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->compareProvisioning(Landroid/net/LinkProperties;Landroid/net/LinkProperties;)Landroid/net/LinkProperties$ProvisioningChange;,max-target-r
Landroid/net/LinkProperties;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->ensureDirectlyConnectedRoutes()V,lo-prio,max-target-o
Landroid/net/LinkProperties;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->findLinkAddressIndex(Landroid/net/LinkAddress;)I,lo-prio,max-target-o
Landroid/net/LinkProperties;->getAddresses()Ljava/util/List;,sdk,system-api,test-api
Landroid/net/LinkProperties;->getAllAddresses()Ljava/util/List;,unsupported
Landroid/net/LinkProperties;->getAllInterfaceNames()Ljava/util/List;,sdk,system-api,test-api
Landroid/net/LinkProperties;->getAllLinkAddresses()Ljava/util/List;,sdk,system-api,test-api
Landroid/net/LinkProperties;->getAllRoutes()Ljava/util/List;,sdk,system-api,test-api
Landroid/net/LinkProperties;->getCaptivePortalApiUrl()Landroid/net/Uri;,sdk,system-api,test-api
Landroid/net/LinkProperties;->getCaptivePortalData()Landroid/net/CaptivePortalData;,sdk,system-api,test-api
Landroid/net/LinkProperties;->getDhcpServerAddress()Ljava/net/Inet4Address;,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->getDnsServers()Ljava/util/List;,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->getDomains()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->getHttpProxy()Landroid/net/ProxyInfo;,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->getInterfaceName()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->getLinkAddresses()Ljava/util/List;,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->getMtu()I,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->getNat64Prefix()Landroid/net/IpPrefix;,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->getPcscfServers()Ljava/util/List;,sdk,system-api,test-api
Landroid/net/LinkProperties;->getPrivateDnsServerName()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->getRoutes()Ljava/util/List;,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->getStackedLinks()Ljava/util/List;,max-target-r
Landroid/net/LinkProperties;->getTcpBufferSizes()Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/LinkProperties;->getValidatedPrivateDnsServers()Ljava/util/List;,sdk,system-api,test-api
Landroid/net/LinkProperties;->hasGlobalIPv6Address()Z,max-target-p
Landroid/net/LinkProperties;->hasGlobalIpv6Address()Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->hasIPv4Address()Z,max-target-p
Landroid/net/LinkProperties;->hasIPv4DefaultRoute()Z,max-target-p
Landroid/net/LinkProperties;->hasIPv4DnsServer()Z,max-target-p
Landroid/net/LinkProperties;->hasIPv6DefaultRoute()Z,max-target-p
Landroid/net/LinkProperties;->hasIPv6DnsServer()Z,max-target-p
Landroid/net/LinkProperties;->hasIpv4Address()Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->hasIpv4DefaultRoute()Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->hasIpv4DnsServer()Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->hasIpv6DefaultRoute()Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->hasIpv6DnsServer()Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->isIPv6Provisioned()Z,max-target-p
Landroid/net/LinkProperties;->isIdenticalAddresses(Landroid/net/LinkProperties;)Z,unsupported
Landroid/net/LinkProperties;->isIdenticalDnses(Landroid/net/LinkProperties;)Z,unsupported
Landroid/net/LinkProperties;->isIdenticalHttpProxy(Landroid/net/LinkProperties;)Z,max-target-p
Landroid/net/LinkProperties;->isIdenticalInterfaceName(Landroid/net/LinkProperties;)Z,unsupported
Landroid/net/LinkProperties;->isIdenticalMtu(Landroid/net/LinkProperties;)Z,lo-prio,max-target-o
Landroid/net/LinkProperties;->isIdenticalPrivateDns(Landroid/net/LinkProperties;)Z,lo-prio,max-target-o
Landroid/net/LinkProperties;->isIdenticalRoutes(Landroid/net/LinkProperties;)Z,unsupported
Landroid/net/LinkProperties;->isIdenticalStackedLinks(Landroid/net/LinkProperties;)Z,max-target-r
Landroid/net/LinkProperties;->isIdenticalTcpBufferSizes(Landroid/net/LinkProperties;)Z,lo-prio,max-target-o
Landroid/net/LinkProperties;->isIdenticalValidatedPrivateDnses(Landroid/net/LinkProperties;)Z,lo-prio,max-target-o
Landroid/net/LinkProperties;->isIpv4Provisioned()Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->isIpv6Provisioned()Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->isPrivateDnsActive()Z,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->isProvisioned()Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->isReachable(Ljava/net/InetAddress;)Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->isValidMtu(IZ)Z,lo-prio,max-target-o
Landroid/net/LinkProperties;->isWakeOnLanSupported()Z,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->mDnses:Ljava/util/ArrayList;,lo-prio,max-target-o
Landroid/net/LinkProperties;->mDomains:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/LinkProperties;->mHttpProxy:Landroid/net/ProxyInfo;,lo-prio,max-target-o
Landroid/net/LinkProperties;->mIfaceName:Ljava/lang/String;,max-target-p
Landroid/net/LinkProperties;->mLinkAddresses:Ljava/util/ArrayList;,lo-prio,max-target-o
Landroid/net/LinkProperties;->mMtu:I,lo-prio,max-target-o
Landroid/net/LinkProperties;->mPrivateDnsServerName:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/LinkProperties;->mRoutes:Ljava/util/ArrayList;,lo-prio,max-target-o
Landroid/net/LinkProperties;->mStackedLinks:Ljava/util/Hashtable;,lo-prio,max-target-o
Landroid/net/LinkProperties;->mTcpBufferSizes:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/LinkProperties;->mUsePrivateDns:Z,lo-prio,max-target-o
Landroid/net/LinkProperties;->mValidatedPrivateDnses:Ljava/util/ArrayList;,lo-prio,max-target-o
Landroid/net/LinkProperties;->removeDnsServer(Ljava/net/InetAddress;)Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->removeLinkAddress(Landroid/net/LinkAddress;)Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->removeRoute(Landroid/net/RouteInfo;)Z,sdk,system-api,test-api
Landroid/net/LinkProperties;->removeStackedLink(Ljava/lang/String;)Z,lo-prio,max-target-o
Landroid/net/LinkProperties;->removeValidatedPrivateDnsServer(Ljava/net/InetAddress;)Z,lo-prio,max-target-o
Landroid/net/LinkProperties;->routeWithInterface(Landroid/net/RouteInfo;)Landroid/net/RouteInfo;,lo-prio,max-target-o
Landroid/net/LinkProperties;->setCaptivePortalApiUrl(Landroid/net/Uri;)V,sdk,system-api,test-api
Landroid/net/LinkProperties;->setCaptivePortalData(Landroid/net/CaptivePortalData;)V,sdk,system-api,test-api
Landroid/net/LinkProperties;->setDhcpServerAddress(Ljava/net/Inet4Address;)V,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->setDnsServers(Ljava/util/Collection;)V,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->setDomains(Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->setHttpProxy(Landroid/net/ProxyInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->setInterfaceName(Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->setLinkAddresses(Ljava/util/Collection;)V,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->setMtu(I)V,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->setNat64Prefix(Landroid/net/IpPrefix;)V,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->setPcscfServers(Ljava/util/Collection;)V,sdk,system-api,test-api
Landroid/net/LinkProperties;->setPrivateDnsServerName(Ljava/lang/String;)V,sdk,system-api,test-api
Landroid/net/LinkProperties;->setTcpBufferSizes(Ljava/lang/String;)V,sdk,system-api,test-api
Landroid/net/LinkProperties;->setUsePrivateDns(Z)V,sdk,system-api,test-api
Landroid/net/LinkProperties;->setValidatedPrivateDnsServers(Ljava/util/Collection;)V,sdk,system-api,test-api
Landroid/net/LinkProperties;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/LinkProperties;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/MacAddress$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/MacAddress$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;-><init>(J)V,lo-prio,max-target-o
Landroid/net/MacAddress;->ALL_ZEROS_ADDRESS:Landroid/net/MacAddress;,max-target-r
Landroid/net/MacAddress;->BASE_GOOGLE_MAC:Landroid/net/MacAddress;,lo-prio,max-target-o
Landroid/net/MacAddress;->BROADCAST_ADDRESS:Landroid/net/MacAddress;,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->ETHER_ADDR_BROADCAST:[B,lo-prio,max-target-o
Landroid/net/MacAddress;->ETHER_ADDR_LEN:I,lo-prio,max-target-o
Landroid/net/MacAddress;->LOCALLY_ASSIGNED_MASK:J,lo-prio,max-target-o
Landroid/net/MacAddress;->MULTICAST_MASK:J,lo-prio,max-target-o
Landroid/net/MacAddress;->NIC_MASK:J,lo-prio,max-target-o
Landroid/net/MacAddress;->OUI_MASK:J,lo-prio,max-target-o
Landroid/net/MacAddress;->TYPE_BROADCAST:I,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->TYPE_MULTICAST:I,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->TYPE_UNICAST:I,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->TYPE_UNKNOWN:I,lo-prio,max-target-o
Landroid/net/MacAddress;->VALID_LONG_MASK:J,lo-prio,max-target-o
Landroid/net/MacAddress;->byteAddrFromLongAddr(J)[B,lo-prio,max-target-o
Landroid/net/MacAddress;->byteAddrFromStringAddr(Ljava/lang/String;)[B,lo-prio,max-target-o
Landroid/net/MacAddress;->createRandomUnicastAddressWithGoogleBase()Landroid/net/MacAddress;,lo-prio,max-target-o
Landroid/net/MacAddress;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->fromBytes([B)Landroid/net/MacAddress;,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->fromString(Ljava/lang/String;)Landroid/net/MacAddress;,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->getAddressType()I,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->getLinkLocalIpv6FromEui48Mac()Ljava/net/Inet6Address;,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->isLocallyAssigned()Z,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->isMacAddress([B)Z,lo-prio,max-target-o
Landroid/net/MacAddress;->longAddrFromByteAddr([B)J,lo-prio,max-target-o
Landroid/net/MacAddress;->longAddrFromStringAddr(Ljava/lang/String;)J,lo-prio,max-target-o
Landroid/net/MacAddress;->mAddr:J,lo-prio,max-target-o
Landroid/net/MacAddress;->macAddressType([B)I,lo-prio,max-target-o
Landroid/net/MacAddress;->matches(Landroid/net/MacAddress;Landroid/net/MacAddress;)Z,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->stringAddrFromByteAddr([B)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/MacAddress;->stringAddrFromLongAddr(J)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/MacAddress;->toByteArray()[B,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->toOuiString()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/MacAddress;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/NattKeepalivePacketData$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NattKeepalivePacketData$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NattKeepalivePacketData;-><init>(Ljava/net/InetAddress;ILjava/net/InetAddress;I[B)V,sdk,system-api,test-api
Landroid/net/NattKeepalivePacketData;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/NattKeepalivePacketData;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/NattKeepalivePacketData;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NattKeepalivePacketData;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NattKeepalivePacketData;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/Network$$ExternalSyntheticLambda0;->lookup(Ljava/lang/String;)Ljava/util/List;,blocked,core-platform-api
Landroid/net/Network$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/Network$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/Network$NetworkBoundSocketFactory;->connectToHost(Ljava/lang/String;ILjava/net/SocketAddress;)Ljava/net/Socket;,lo-prio,max-target-o
Landroid/net/Network$NetworkBoundSocketFactory;->createSocket()Ljava/net/Socket;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/Network$NetworkBoundSocketFactory;->createSocket(Ljava/lang/String;I)Ljava/net/Socket;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/Network$NetworkBoundSocketFactory;->createSocket(Ljava/lang/String;ILjava/net/InetAddress;I)Ljava/net/Socket;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/Network$NetworkBoundSocketFactory;->createSocket(Ljava/net/InetAddress;I)Ljava/net/Socket;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/Network$NetworkBoundSocketFactory;->createSocket(Ljava/net/InetAddress;ILjava/net/InetAddress;I)Ljava/net/Socket;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/Network;-><init>(I)V,max-target-r
Landroid/net/Network;-><init>(Landroid/net/Network;)V,sdk,system-api,test-api
Landroid/net/Network;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/Network;->HANDLE_MAGIC:J,lo-prio,max-target-o
Landroid/net/Network;->HANDLE_MAGIC_SIZE:I,lo-prio,max-target-o
Landroid/net/Network;->bindSocket(Ljava/io/FileDescriptor;)V,public-api,sdk,system-api,test-api
Landroid/net/Network;->bindSocket(Ljava/net/DatagramSocket;)V,public-api,sdk,system-api,test-api
Landroid/net/Network;->bindSocket(Ljava/net/Socket;)V,public-api,sdk,system-api,test-api
Landroid/net/Network;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/Network;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/Network;->fromNetworkHandle(J)Landroid/net/Network;,public-api,sdk,system-api,test-api
Landroid/net/Network;->getAllByName(Ljava/lang/String;)[Ljava/net/InetAddress;,public-api,sdk,system-api,test-api
Landroid/net/Network;->getByName(Ljava/lang/String;)Ljava/net/InetAddress;,public-api,sdk,system-api,test-api
Landroid/net/Network;->getNetId()I,sdk,system-api,test-api
Landroid/net/Network;->getNetIdForResolv()I,lo-prio,max-target-o
Landroid/net/Network;->getNetworkHandle()J,public-api,sdk,system-api,test-api
Landroid/net/Network;->getPrivateDnsBypassingCopy()Landroid/net/Network;,sdk,system-api,test-api
Landroid/net/Network;->getSocketFactory()Ljavax/net/SocketFactory;,public-api,sdk,system-api,test-api
Landroid/net/Network;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/Network;->httpKeepAlive:Z,lo-prio,max-target-o
Landroid/net/Network;->httpKeepAliveDurationMs:J,lo-prio,max-target-o
Landroid/net/Network;->httpMaxConnections:I,lo-prio,max-target-o
Landroid/net/Network;->mLock:Ljava/lang/Object;,lo-prio,max-target-o
Landroid/net/Network;->mNetworkBoundSocketFactory:Landroid/net/Network$NetworkBoundSocketFactory;,lo-prio,max-target-o
Landroid/net/Network;->mPrivateDnsBypass:Z,lo-prio,max-target-o
Landroid/net/Network;->netId:I,unsupported
Landroid/net/Network;->openConnection(Ljava/net/URL;)Ljava/net/URLConnection;,public-api,sdk,system-api,test-api
Landroid/net/Network;->openConnection(Ljava/net/URL;Ljava/net/Proxy;)Ljava/net/URLConnection;,public-api,sdk,system-api,test-api
Landroid/net/Network;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/Network;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkAgent$$ExternalSyntheticLambda17;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkAgent$NetworkAgentHandler;->handleMessage(Landroid/os/Message;)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkAgent;-><init>(Landroid/content/Context;Landroid/os/Looper;Ljava/lang/String;Landroid/net/NetworkCapabilities;Landroid/net/LinkProperties;ILandroid/net/NetworkAgentConfig;Landroid/net/NetworkProvider;)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;-><init>(Landroid/content/Context;Landroid/os/Looper;Ljava/lang/String;Landroid/net/NetworkCapabilities;Landroid/net/LinkProperties;Landroid/net/NetworkScore;Landroid/net/NetworkAgentConfig;Landroid/net/NetworkProvider;)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->BASE:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->BW_REFRESH_MIN_WIN_MS:J,lo-prio,max-target-o
Landroid/net/NetworkAgent;->CMD_PREVENT_AUTOMATIC_RECONNECT:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->CMD_REPORT_NETWORK_STATUS:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->CMD_REQUEST_BANDWIDTH_UPDATE:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->CMD_SAVE_ACCEPT_UNVALIDATED:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->CMD_SET_SIGNAL_STRENGTH_THRESHOLDS:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->CMD_SUSPECT_BAD:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->DBG:Z,lo-prio,max-target-o
Landroid/net/NetworkAgent;->DSCP_POLICY_STATUS_DELETED:I,sdk,system-api,test-api
Landroid/net/NetworkAgent;->DSCP_POLICY_STATUS_INSUFFICIENT_PROCESSING_RESOURCES:I,sdk,system-api,test-api
Landroid/net/NetworkAgent;->DSCP_POLICY_STATUS_POLICY_NOT_FOUND:I,sdk,system-api,test-api
Landroid/net/NetworkAgent;->DSCP_POLICY_STATUS_REQUESTED_CLASSIFIER_NOT_SUPPORTED:I,sdk,system-api,test-api
Landroid/net/NetworkAgent;->DSCP_POLICY_STATUS_REQUEST_DECLINED:I,sdk,system-api,test-api
Landroid/net/NetworkAgent;->DSCP_POLICY_STATUS_SUCCESS:I,sdk,system-api,test-api
Landroid/net/NetworkAgent;->EVENT_NETWORK_CAPABILITIES_CHANGED:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->EVENT_NETWORK_INFO_CHANGED:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->EVENT_NETWORK_PROPERTIES_CHANGED:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->EVENT_NETWORK_SCORE_CHANGED:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->EVENT_SET_EXPLICITLY_SELECTED:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->INVALID_NETWORK:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->LOG_TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkAgent;->REDIRECT_URL_KEY:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkAgent;->VALIDATION_STATUS_NOT_VALID:I,sdk,system-api,test-api
Landroid/net/NetworkAgent;->VALIDATION_STATUS_VALID:I,sdk,system-api,test-api
Landroid/net/NetworkAgent;->VALID_NETWORK:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->VDBG:Z,lo-prio,max-target-o
Landroid/net/NetworkAgent;->WIFI_BASE_SCORE:I,lo-prio,max-target-o
Landroid/net/NetworkAgent;->explicitlySelected(Z)V,lo-prio,max-target-o
Landroid/net/NetworkAgent;->getNetwork()Landroid/net/Network;,sdk,system-api,test-api
Landroid/net/NetworkAgent;->log(Ljava/lang/String;)V,lo-prio,max-target-o
Landroid/net/NetworkAgent;->mLastBwRefreshTime:J,lo-prio,max-target-o
Landroid/net/NetworkAgent;->mPreConnectedQueue:Ljava/util/ArrayList;,lo-prio,max-target-o
Landroid/net/NetworkAgent;->markConnected()V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->networkStatus(ILjava/lang/String;)V,lo-prio,max-target-o
Landroid/net/NetworkAgent;->onAddKeepalivePacketFilter(ILandroid/net/KeepalivePacketData;)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->onAutomaticReconnectDisabled()V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->onBandwidthUpdateRequested()V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->onDscpPolicyStatusUpdated(II)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->onNetworkCreated()V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->onNetworkDestroyed()V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->onNetworkUnwanted()V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->onQosCallbackRegistered(ILandroid/net/QosFilter;)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->onQosCallbackUnregistered(I)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->onRemoveKeepalivePacketFilter(I)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->onSaveAcceptUnvalidated(Z)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->onSignalStrengthThresholdsUpdated([I)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->onStartSocketKeepalive(ILjava/time/Duration;Landroid/net/KeepalivePacketData;)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->onStopSocketKeepalive(I)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->onValidationStatus(ILandroid/net/Uri;)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->pollLceData()V,lo-prio,max-target-o
Landroid/net/NetworkAgent;->preventAutomaticReconnect()V,lo-prio,max-target-o
Landroid/net/NetworkAgent;->register()Landroid/net/Network;,sdk,system-api,test-api
Landroid/net/NetworkAgent;->saveAcceptUnvalidated(Z)V,lo-prio,max-target-o
Landroid/net/NetworkAgent;->sendAddDscpPolicy(Landroid/net/DscpPolicy;)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->sendLinkProperties(Landroid/net/LinkProperties;)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->sendNetworkCapabilities(Landroid/net/NetworkCapabilities;)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->sendNetworkInfo(Landroid/net/NetworkInfo;)V,max-target-p
Landroid/net/NetworkAgent;->sendNetworkScore(I)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->sendNetworkScore(Landroid/net/NetworkScore;)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->sendQosCallbackError(II)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->sendQosSessionAvailable(IILandroid/net/QosSessionAttributes;)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->sendQosSessionLost(III)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->sendRemoveAllDscpPolicies()V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->sendRemoveDscpPolicy(I)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->sendSocketKeepaliveEvent(II)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->setLegacySubtype(ILjava/lang/String;)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->setLingerDuration(Ljava/time/Duration;)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->setSignalStrengthThresholds([I)V,lo-prio,max-target-o
Landroid/net/NetworkAgent;->setTeardownDelayMillis(I)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->setUnderlyingNetworks(Ljava/util/List;)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->unregister()V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->unregisterAfterReplacement(I)V,sdk,system-api,test-api
Landroid/net/NetworkAgent;->unwanted()V,lo-prio,max-target-o
Landroid/net/NetworkAgentConfig$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig$Builder;-><init>()V,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig$Builder;->build()Landroid/net/NetworkAgentConfig;,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig$Builder;->setExplicitlySelected(Z)Landroid/net/NetworkAgentConfig$Builder;,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig$Builder;->setLegacyExtraInfo(Ljava/lang/String;)Landroid/net/NetworkAgentConfig$Builder;,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig$Builder;->setLegacySubType(I)Landroid/net/NetworkAgentConfig$Builder;,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig$Builder;->setLegacySubTypeName(Ljava/lang/String;)Landroid/net/NetworkAgentConfig$Builder;,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig$Builder;->setLegacyType(I)Landroid/net/NetworkAgentConfig$Builder;,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig$Builder;->setLegacyTypeName(Ljava/lang/String;)Landroid/net/NetworkAgentConfig$Builder;,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig$Builder;->setNat64DetectionEnabled(Z)Landroid/net/NetworkAgentConfig$Builder;,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig$Builder;->setPartialConnectivityAcceptable(Z)Landroid/net/NetworkAgentConfig$Builder;,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig$Builder;->setProvisioningNotificationEnabled(Z)Landroid/net/NetworkAgentConfig$Builder;,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig$Builder;->setUnvalidatedConnectivityAcceptable(Z)Landroid/net/NetworkAgentConfig$Builder;,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig;->getLegacyType()I,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig;->getLegacyTypeName()Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig;->isExplicitlySelected()Z,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig;->isPartialConnectivityAcceptable()Z,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig;->isUnvalidatedConnectivityAcceptable()Z,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkAgentConfig;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;-><init>()V,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;-><init>(Landroid/net/NetworkCapabilities;)V,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->addCapability(I)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->addEnterpriseId(I)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->addTransportType(I)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->build()Landroid/net/NetworkCapabilities;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->removeCapability(I)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->removeEnterpriseId(I)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->removeTransportType(I)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->setAdministratorUids([I)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->setLinkDownstreamBandwidthKbps(I)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->setLinkUpstreamBandwidthKbps(I)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->setNetworkSpecifier(Landroid/net/NetworkSpecifier;)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->setOwnerUid(I)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->setRequestorPackageName(Ljava/lang/String;)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->setRequestorUid(I)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->setSignalStrength(I)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->setSsid(Ljava/lang/String;)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->setSubscriptionIds(Ljava/util/Set;)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->setTransportInfo(Landroid/net/TransportInfo;)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->setUnderlyingNetworks(Ljava/util/List;)Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities$Builder;->withoutDefaultCapabilities()Landroid/net/NetworkCapabilities$Builder;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;-><init>(Landroid/net/NetworkCapabilities;)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->DEFAULT_CAPABILITIES:J,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->LINK_BANDWIDTH_UNSPECIFIED:I,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->MAX_NET_CAPABILITY:I,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->MAX_TRANSPORT:I,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->MIN_TRANSPORT:I,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->MUTABLE_CAPABILITIES:J,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_BIP:I,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_CAPTIVE_PORTAL:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_CBS:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_DUN:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_EIMS:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_ENTERPRISE:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_FOREGROUND:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_FOTA:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_HEAD_UNIT:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_IA:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_IMS:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_INTERNET:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_MCX:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_MMS:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_MMTEL:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_NOT_CONGESTED:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_NOT_METERED:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_NOT_RESTRICTED:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_NOT_ROAMING:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_NOT_SUSPENDED:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_NOT_VCN_MANAGED:I,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_NOT_VPN:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_OEM_PAID:I,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_OEM_PRIVATE:I,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_PARTIAL_CONNECTIVITY:I,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_PRIORITIZE_BANDWIDTH:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_PRIORITIZE_LATENCY:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_RCS:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_SUPL:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_TEMPORARILY_NOT_METERED:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_TRUSTED:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_VALIDATED:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_VEHICLE_INTERNAL:I,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_VSIM:I,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_WIFI_P2P:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_CAPABILITY_XCAP:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_ENTERPRISE_ID_1:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_ENTERPRISE_ID_2:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_ENTERPRISE_ID_3:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_ENTERPRISE_ID_4:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NET_ENTERPRISE_ID_5:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->NON_REQUESTABLE_CAPABILITIES:J,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->SIGNAL_STRENGTH_UNSPECIFIED:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->TRANSPORT_BLUETOOTH:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->TRANSPORT_CELLULAR:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->TRANSPORT_ETHERNET:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->TRANSPORT_LOWPAN:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->TRANSPORT_NAMES:[Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->TRANSPORT_THREAD:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->TRANSPORT_USB:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->TRANSPORT_VPN:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->TRANSPORT_WIFI:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->TRANSPORT_WIFI_AWARE:I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->appliesToUid(I)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->appliesToUidRange(Landroid/net/UidRange;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->capabilityNameOf(I)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->capabilityNamesOf([I)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->checkValidCapability(I)V,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->checkValidTransportType(I)V,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->clearAll()V,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->describeFirstNonRequestableCapability()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->describeImmutableDifferences(Landroid/net/NetworkCapabilities;)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->equalRequestableCapabilities(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->equalsLinkBandwidths(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->equalsNetCapabilities(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->equalsNetCapabilitiesRequestable(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->equalsSSID(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->equalsSignalStrength(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->equalsSpecifier(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->equalsTransportTypes(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->equalsUids(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->getAdministratorUids()[I,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->getCapabilities()[I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->getCapabilityCarrierName(I)Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->getEnterpriseIds()[I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->getLinkDownstreamBandwidthKbps()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->getLinkUpstreamBandwidthKbps()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->getNetworkSpecifier()Landroid/net/NetworkSpecifier;,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->getOwnerUid()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->getSignalStrength()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->getSsid()Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->getSubscriptionIds()Ljava/util/Set;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->getTransportInfo()Landroid/net/TransportInfo;,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->getTransportTypes()[I,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->getUids()Ljava/util/Set;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->getUnderlyingNetworks()Ljava/util/List;,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->hasCapability(I)Z,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->hasEnterpriseId(I)Z,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->hasSignalStrength()Z,max-target-r
Landroid/net/NetworkCapabilities;->hasTransport(I)Z,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->isPrivateDnsBroken()Z,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->isValidCapability(I)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->isValidTransport(I)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->mLinkDownBandwidthKbps:I,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->mLinkUpBandwidthKbps:I,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->mNetworkCapabilities:J,max-target-r
Landroid/net/NetworkCapabilities;->mNetworkSpecifier:Landroid/net/NetworkSpecifier;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->mSSID:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->mSignalStrength:I,max-target-p
Landroid/net/NetworkCapabilities;->mTransportTypes:J,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->mUids:Landroid/util/ArraySet;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->maxBandwidth(II)I,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->maybeMarkCapabilitiesRestricted()V,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->minBandwidth(II)I,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->removeTransportType(I)Landroid/net/NetworkCapabilities;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->satisfiedByImmutableNetworkCapabilities(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->satisfiedByLinkBandwidths(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->satisfiedByNetCapabilities(Landroid/net/NetworkCapabilities;Z)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->satisfiedByNetworkCapabilities(Landroid/net/NetworkCapabilities;)Z,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->satisfiedByNetworkCapabilities(Landroid/net/NetworkCapabilities;Z)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->satisfiedBySSID(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->satisfiedBySignalStrength(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->satisfiedBySpecifier(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->satisfiedByTransportTypes(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->satisfiedByUids(Landroid/net/NetworkCapabilities;)Z,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->set(Landroid/net/NetworkCapabilities;)V,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->setCapabilities([I)V,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->setCapabilities([I[I)V,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->setCapability(IZ)Landroid/net/NetworkCapabilities;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->setLinkDownstreamBandwidthKbps(I)Landroid/net/NetworkCapabilities;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->setLinkUpstreamBandwidthKbps(I)Landroid/net/NetworkCapabilities;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->setNetworkSpecifier(Landroid/net/NetworkSpecifier;)Landroid/net/NetworkCapabilities;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->setSSID(Ljava/lang/String;)Landroid/net/NetworkCapabilities;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->setSingleUid(I)Landroid/net/NetworkCapabilities;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->setTransportType(IZ)Landroid/net/NetworkCapabilities;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->setTransportTypes([I)V,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->setUids(Ljava/util/Set;)Landroid/net/NetworkCapabilities;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkCapabilities;->transportNameOf(I)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkCapabilities;->transportNamesOf([I)Ljava/lang/String;,max-target-r
Landroid/net/NetworkCapabilities;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkConfig;-><init>(Ljava/lang/String;)V,lo-prio,max-target-o
Landroid/net/NetworkConfig;->dependencyMet:Z,lo-prio,max-target-o
Landroid/net/NetworkConfig;->isDefault()Z,lo-prio,max-target-o
Landroid/net/NetworkConfig;->name:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkConfig;->priority:I,lo-prio,max-target-o
Landroid/net/NetworkConfig;->radio:I,lo-prio,max-target-o
Landroid/net/NetworkConfig;->restoreTime:I,lo-prio,max-target-o
Landroid/net/NetworkConfig;->type:I,lo-prio,max-target-o
Landroid/net/NetworkIdentity;->SUBTYPE_COMBINED:I,lo-prio,max-target-o
Landroid/net/NetworkIdentity;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkIdentity;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkIdentity;->getDefaultNetwork()Z,lo-prio,max-target-o
Landroid/net/NetworkIdentity;->getMetered()Z,lo-prio,max-target-o
Landroid/net/NetworkIdentity;->getRoaming()Z,lo-prio,max-target-o
Landroid/net/NetworkIdentity;->getSubscriberId()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkIdentity;->getType()I,lo-prio,max-target-o
Landroid/net/NetworkIdentity;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkIdentity;->mDefaultNetwork:Z,lo-prio,max-target-o
Landroid/net/NetworkIdentity;->mMetered:Z,lo-prio,max-target-o
Landroid/net/NetworkIdentity;->mRoaming:Z,lo-prio,max-target-o
Landroid/net/NetworkIdentity;->mSubscriberId:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkIdentity;->mType:I,lo-prio,max-target-o
Landroid/net/NetworkIdentity;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->AUTHENTICATING:Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->BLOCKED:Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->CAPTIVE_PORTAL_CHECK:Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->CONNECTED:Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->CONNECTING:Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->DISCONNECTED:Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->DISCONNECTING:Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->FAILED:Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->IDLE:Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->OBTAINING_IPADDR:Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->SCANNING:Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->SUSPENDED:Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->VERIFYING_POOR_LINK:Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->valueOf(Ljava/lang/String;)Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$DetailedState;->values()[Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$State;->CONNECTED:Landroid/net/NetworkInfo$State;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$State;->CONNECTING:Landroid/net/NetworkInfo$State;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$State;->DISCONNECTED:Landroid/net/NetworkInfo$State;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$State;->DISCONNECTING:Landroid/net/NetworkInfo$State;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$State;->SUSPENDED:Landroid/net/NetworkInfo$State;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$State;->UNKNOWN:Landroid/net/NetworkInfo$State;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$State;->valueOf(Ljava/lang/String;)Landroid/net/NetworkInfo$State;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo$State;->values()[Landroid/net/NetworkInfo$State;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;-><init>(IILjava/lang/String;Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;-><init>(Landroid/net/NetworkInfo;)V,unsupported
Landroid/net/NetworkInfo;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->getDetailedState()Landroid/net/NetworkInfo$DetailedState;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->getExtraInfo()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->getReason()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->getState()Landroid/net/NetworkInfo$State;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->getSubtype()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->getSubtypeName()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->getType()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->getTypeName()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->isAvailable()Z,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->isConnected()Z,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->isConnectedOrConnecting()Z,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->isFailover()Z,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->isRoaming()Z,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->mDetailedState:Landroid/net/NetworkInfo$DetailedState;,lo-prio,max-target-o
Landroid/net/NetworkInfo;->mExtraInfo:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkInfo;->mIsAvailable:Z,lo-prio,max-target-o
Landroid/net/NetworkInfo;->mIsFailover:Z,lo-prio,max-target-o
Landroid/net/NetworkInfo;->mIsRoaming:Z,lo-prio,max-target-o
Landroid/net/NetworkInfo;->mNetworkType:I,lo-prio,max-target-o
Landroid/net/NetworkInfo;->mReason:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkInfo;->mState:Landroid/net/NetworkInfo$State;,lo-prio,max-target-o
Landroid/net/NetworkInfo;->mSubtype:I,lo-prio,max-target-o
Landroid/net/NetworkInfo;->mSubtypeName:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkInfo;->mTypeName:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkInfo;->setDetailedState(Landroid/net/NetworkInfo$DetailedState;Ljava/lang/String;Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->setExtraInfo(Ljava/lang/String;)V,lo-prio,max-target-o
Landroid/net/NetworkInfo;->setFailover(Z)V,unsupported
Landroid/net/NetworkInfo;->setIsAvailable(Z)V,unsupported
Landroid/net/NetworkInfo;->setRoaming(Z)V,unsupported
Landroid/net/NetworkInfo;->setSubtype(ILjava/lang/String;)V,unsupported
Landroid/net/NetworkInfo;->setType(I)V,lo-prio,max-target-o
Landroid/net/NetworkInfo;->stateMap:Ljava/util/EnumMap;,lo-prio,max-target-o
Landroid/net/NetworkInfo;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkProvider$1;->handleMessage(Landroid/os/Message;)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkProvider$NetworkOfferCallback;->onNetworkNeeded(Landroid/net/NetworkRequest;)V,sdk,system-api,test-api
Landroid/net/NetworkProvider$NetworkOfferCallback;->onNetworkUnneeded(Landroid/net/NetworkRequest;)V,sdk,system-api,test-api
Landroid/net/NetworkProvider$NetworkOfferCallbackProxy$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkProvider$NetworkOfferCallbackProxy$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkProvider;-><init>(Landroid/content/Context;Landroid/os/Looper;Ljava/lang/String;)V,sdk,system-api,test-api
Landroid/net/NetworkProvider;->ID_NONE:I,sdk,system-api,test-api
Landroid/net/NetworkProvider;->declareNetworkRequestUnfulfillable(Landroid/net/NetworkRequest;)V,sdk,system-api,test-api
Landroid/net/NetworkProvider;->getProviderId()I,sdk,system-api,test-api
Landroid/net/NetworkProvider;->onNetworkRequestWithdrawn(Landroid/net/NetworkRequest;)V,sdk,system-api,test-api
Landroid/net/NetworkProvider;->onNetworkRequested(Landroid/net/NetworkRequest;II)V,sdk,system-api,test-api
Landroid/net/NetworkProvider;->registerNetworkOffer(Landroid/net/NetworkScore;Landroid/net/NetworkCapabilities;Ljava/util/concurrent/Executor;Landroid/net/NetworkProvider$NetworkOfferCallback;)V,sdk,system-api,test-api
Landroid/net/NetworkProvider;->unregisterNetworkOffer(Landroid/net/NetworkProvider$NetworkOfferCallback;)V,sdk,system-api,test-api
Landroid/net/NetworkReleasedException;-><init>()V,sdk,system-api,test-api
Landroid/net/NetworkRequest$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest$Builder;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest$Builder;-><init>(Landroid/net/NetworkRequest;)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest$Builder;->addCapability(I)Landroid/net/NetworkRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest$Builder;->addTransportType(I)Landroid/net/NetworkRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest$Builder;->build()Landroid/net/NetworkRequest;,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest$Builder;->clearCapabilities()Landroid/net/NetworkRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest$Builder;->mNetworkCapabilities:Landroid/net/NetworkCapabilities;,lo-prio,max-target-o
Landroid/net/NetworkRequest$Builder;->removeCapability(I)Landroid/net/NetworkRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest$Builder;->removeTransportType(I)Landroid/net/NetworkRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest$Builder;->setCapabilities(Landroid/net/NetworkCapabilities;)Landroid/net/NetworkRequest$Builder;,lo-prio,max-target-o
Landroid/net/NetworkRequest$Builder;->setIncludeOtherUidNetworks(Z)Landroid/net/NetworkRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest$Builder;->setLinkDownstreamBandwidthKbps(I)Landroid/net/NetworkRequest$Builder;,lo-prio,max-target-o
Landroid/net/NetworkRequest$Builder;->setLinkUpstreamBandwidthKbps(I)Landroid/net/NetworkRequest$Builder;,lo-prio,max-target-o
Landroid/net/NetworkRequest$Builder;->setNetworkSpecifier(Landroid/net/NetworkSpecifier;)Landroid/net/NetworkRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest$Builder;->setNetworkSpecifier(Ljava/lang/String;)Landroid/net/NetworkRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest$Builder;->setSignalStrength(I)Landroid/net/NetworkRequest$Builder;,sdk,system-api,test-api
Landroid/net/NetworkRequest$Builder;->setSubscriptionIds(Ljava/util/Set;)Landroid/net/NetworkRequest$Builder;,sdk,system-api,test-api
Landroid/net/NetworkRequest$Builder;->setUids(Ljava/util/Set;)Landroid/net/NetworkRequest$Builder;,lo-prio,max-target-o
Landroid/net/NetworkRequest$Type;->BACKGROUND_REQUEST:Landroid/net/NetworkRequest$Type;,lo-prio,max-target-o
Landroid/net/NetworkRequest$Type;->LISTEN:Landroid/net/NetworkRequest$Type;,lo-prio,max-target-o
Landroid/net/NetworkRequest$Type;->NONE:Landroid/net/NetworkRequest$Type;,lo-prio,max-target-o
Landroid/net/NetworkRequest$Type;->REQUEST:Landroid/net/NetworkRequest$Type;,lo-prio,max-target-o
Landroid/net/NetworkRequest$Type;->TRACK_DEFAULT:Landroid/net/NetworkRequest$Type;,lo-prio,max-target-o
Landroid/net/NetworkRequest$Type;->valueOf(Ljava/lang/String;)Landroid/net/NetworkRequest$Type;,lo-prio,max-target-o
Landroid/net/NetworkRequest$Type;->values()[Landroid/net/NetworkRequest$Type;,lo-prio,max-target-o
Landroid/net/NetworkRequest;-><init>(Landroid/net/NetworkCapabilities;IILandroid/net/NetworkRequest$Type;)V,lo-prio,max-target-o
Landroid/net/NetworkRequest;-><init>(Landroid/net/NetworkRequest;)V,lo-prio,max-target-o
Landroid/net/NetworkRequest;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest;->canBeSatisfiedBy(Landroid/net/NetworkCapabilities;)Z,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest;->getCapabilities()[I,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest;->getNetworkSpecifier()Landroid/net/NetworkSpecifier;,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest;->getRequestorPackageName()Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/NetworkRequest;->getRequestorUid()I,sdk,system-api,test-api
Landroid/net/NetworkRequest;->getTransportTypes()[I,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest;->hasCapability(I)Z,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest;->hasTransport(I)Z,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest;->isBackgroundRequest()Z,lo-prio,max-target-o
Landroid/net/NetworkRequest;->isListen()Z,lo-prio,max-target-o
Landroid/net/NetworkRequest;->isRequest()Z,lo-prio,max-target-o
Landroid/net/NetworkRequest;->legacyType:I,max-target-p
Landroid/net/NetworkRequest;->networkCapabilities:Landroid/net/NetworkCapabilities;,max-target-r
Landroid/net/NetworkRequest;->requestId:I,max-target-r
Landroid/net/NetworkRequest;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkRequest;->type:Landroid/net/NetworkRequest$Type;,lo-prio,max-target-o
Landroid/net/NetworkRequest;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkScore$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkScore$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkScore$Builder;-><init>()V,sdk,system-api,test-api
Landroid/net/NetworkScore$Builder;->build()Landroid/net/NetworkScore;,sdk,system-api,test-api
Landroid/net/NetworkScore$Builder;->setExiting(Z)Landroid/net/NetworkScore$Builder;,sdk,system-api,test-api
Landroid/net/NetworkScore$Builder;->setKeepConnectedReason(I)Landroid/net/NetworkScore$Builder;,sdk,system-api,test-api
Landroid/net/NetworkScore$Builder;->setLegacyInt(I)Landroid/net/NetworkScore$Builder;,sdk,system-api,test-api
Landroid/net/NetworkScore$Builder;->setTransportPrimary(Z)Landroid/net/NetworkScore$Builder;,sdk,system-api,test-api
Landroid/net/NetworkScore;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/NetworkScore;->KEEP_CONNECTED_FOR_HANDOVER:I,sdk,system-api,test-api
Landroid/net/NetworkScore;->KEEP_CONNECTED_NONE:I,sdk,system-api,test-api
Landroid/net/NetworkScore;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkScore;->getKeepConnectedReason()I,sdk,system-api,test-api
Landroid/net/NetworkScore;->getLegacyInt()I,sdk,system-api,test-api
Landroid/net/NetworkScore;->isExiting()Z,sdk,system-api,test-api
Landroid/net/NetworkScore;->isTransportPrimary()Z,sdk,system-api,test-api
Landroid/net/NetworkScore;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkScore;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkState$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkState$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkState;-><init>(Landroid/os/Parcel;)V,unsupported
Landroid/net/NetworkState;->CREATOR:Landroid/os/Parcelable$Creator;,unsupported
Landroid/net/NetworkState;->EMPTY:Landroid/net/NetworkState;,lo-prio,max-target-o
Landroid/net/NetworkState;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkState;->linkProperties:Landroid/net/LinkProperties;,lo-prio,max-target-o
Landroid/net/NetworkState;->network:Landroid/net/Network;,max-target-p
Landroid/net/NetworkState;->networkCapabilities:Landroid/net/NetworkCapabilities;,lo-prio,max-target-o
Landroid/net/NetworkState;->networkInfo:Landroid/net/NetworkInfo;,lo-prio,max-target-o
Landroid/net/NetworkState;->subscriberId:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkState;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkStateSnapshot$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkStateSnapshot$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkStateSnapshot;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkStateSnapshot;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStateSnapshot;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStateSnapshot;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStateSnapshot;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$$ExternalSyntheticLambda0;->test(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$$ExternalSyntheticLambda1;->apply(Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$$ExternalSyntheticLambda2;->test(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$$ExternalSyntheticLambda3;->test(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$$ExternalSyntheticLambda4;->apply(Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$$ExternalSyntheticLambda5;->apply(Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$$ExternalSyntheticLambda6;->test(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$1;->hasNext()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$1;->next()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$2;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$2;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;-><init>()V,max-target-r
Landroid/net/NetworkStats$Entry;-><init>(Ljava/lang/String;IIIIIIJJJJJ)V,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->add(Landroid/net/NetworkStats$Entry;)V,lo-prio,max-target-o
Landroid/net/NetworkStats$Entry;->defaultNetwork:I,lo-prio,max-target-o
Landroid/net/NetworkStats$Entry;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->getDefaultNetwork()I,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->getMetered()I,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->getOperations()J,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->getRoaming()I,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->getRxBytes()J,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->getRxPackets()J,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->getSet()I,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->getTag()I,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->getTxBytes()J,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->getTxPackets()J,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->getUid()I,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->iface:Ljava/lang/String;,max-target-r
Landroid/net/NetworkStats$Entry;->isEmpty()Z,lo-prio,max-target-o
Landroid/net/NetworkStats$Entry;->isNegative()Z,lo-prio,max-target-o
Landroid/net/NetworkStats$Entry;->metered:I,lo-prio,max-target-o
Landroid/net/NetworkStats$Entry;->operations:J,max-target-r
Landroid/net/NetworkStats$Entry;->roaming:I,lo-prio,max-target-o
Landroid/net/NetworkStats$Entry;->rxBytes:J,unsupported
Landroid/net/NetworkStats$Entry;->rxPackets:J,max-target-r
Landroid/net/NetworkStats$Entry;->set:I,unsupported
Landroid/net/NetworkStats$Entry;->tag:I,max-target-r
Landroid/net/NetworkStats$Entry;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats$Entry;->txBytes:J,unsupported
Landroid/net/NetworkStats$Entry;->txPackets:J,max-target-r
Landroid/net/NetworkStats$Entry;->uid:I,unsupported
Landroid/net/NetworkStats$NonMonotonicObserver;->foundNonMonotonic(Landroid/net/NetworkStats;ILandroid/net/NetworkStats;ILjava/lang/Object;)V,lo-prio,max-target-o
Landroid/net/NetworkStats$NonMonotonicObserver;->foundNonMonotonic(Landroid/net/NetworkStats;ILjava/lang/Object;)V,lo-prio,max-target-o
Landroid/net/NetworkStats;-><init>(JI)V,sdk,system-api,test-api
Landroid/net/NetworkStats;-><init>(Landroid/os/Parcel;)V,max-target-r
Landroid/net/NetworkStats;->CLATD_INTERFACE_PREFIX:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkStats;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/NetworkStats;->DEFAULT_NETWORK_ALL:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->DEFAULT_NETWORK_NO:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->DEFAULT_NETWORK_YES:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->IFACE_ALL:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkStats;->IFACE_VT:Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/NetworkStats;->INTERFACES_ALL:[Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkStats;->IPV4V6_HEADER_DELTA:I,lo-prio,max-target-o
Landroid/net/NetworkStats;->METERED_ALL:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->METERED_NO:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->METERED_YES:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->ROAMING_ALL:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->ROAMING_NO:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->ROAMING_YES:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->SET_ALL:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->SET_DBG_VPN_IN:I,lo-prio,max-target-o
Landroid/net/NetworkStats;->SET_DBG_VPN_OUT:I,lo-prio,max-target-o
Landroid/net/NetworkStats;->SET_DEBUG_START:I,lo-prio,max-target-o
Landroid/net/NetworkStats;->SET_DEFAULT:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->SET_FOREGROUND:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->STATS_PER_IFACE:I,lo-prio,max-target-o
Landroid/net/NetworkStats;->STATS_PER_UID:I,lo-prio,max-target-o
Landroid/net/NetworkStats;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkStats;->TAG_ALL:I,lo-prio,max-target-o
Landroid/net/NetworkStats;->TAG_NONE:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->UID_ALL:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->UID_TETHERING:I,sdk,system-api,test-api
Landroid/net/NetworkStats;->add(Landroid/net/NetworkStats;)Landroid/net/NetworkStats;,sdk,system-api,test-api
Landroid/net/NetworkStats;->addEntry(Landroid/net/NetworkStats$Entry;)Landroid/net/NetworkStats;,sdk,system-api,test-api
Landroid/net/NetworkStats;->apply464xlatAdjustments(Landroid/net/NetworkStats;Landroid/net/NetworkStats;Ljava/util/Map;)V,lo-prio,max-target-o
Landroid/net/NetworkStats;->apply464xlatAdjustments(Ljava/util/Map;)V,lo-prio,max-target-o
Landroid/net/NetworkStats;->capacity:I,max-target-r
Landroid/net/NetworkStats;->clear()V,lo-prio,max-target-o
Landroid/net/NetworkStats;->clone()Landroid/net/NetworkStats;,sdk,system-api,test-api
Landroid/net/NetworkStats;->clone()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats;->combineValues(Ljava/lang/String;IIIJJJJJ)Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/net/NetworkStats;->combineValues(Ljava/lang/String;IIJJJJJ)Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/net/NetworkStats;->defaultNetwork:[I,max-target-r
Landroid/net/NetworkStats;->defaultNetworkToString(I)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkStats;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats;->dump(Ljava/lang/String;Ljava/io/PrintWriter;)V,lo-prio,max-target-o
Landroid/net/NetworkStats;->elapsedRealtime:J,lo-prio,max-target-o
Landroid/net/NetworkStats;->filter(I[Ljava/lang/String;I)V,lo-prio,max-target-o
Landroid/net/NetworkStats;->findIndex(Ljava/lang/String;IIIIII)I,lo-prio,max-target-o
Landroid/net/NetworkStats;->findIndexHinted(Ljava/lang/String;IIIIIII)I,lo-prio,max-target-o
Landroid/net/NetworkStats;->getElapsedRealtime()J,lo-prio,max-target-o
Landroid/net/NetworkStats;->getElapsedRealtimeAge()J,lo-prio,max-target-o
Landroid/net/NetworkStats;->getTotal(Landroid/net/NetworkStats$Entry;)Landroid/net/NetworkStats$Entry;,unsupported
Landroid/net/NetworkStats;->getTotal(Landroid/net/NetworkStats$Entry;I)Landroid/net/NetworkStats$Entry;,unsupported
Landroid/net/NetworkStats;->getTotal(Landroid/net/NetworkStats$Entry;Ljava/util/HashSet;)Landroid/net/NetworkStats$Entry;,lo-prio,max-target-o
Landroid/net/NetworkStats;->getTotal(Landroid/net/NetworkStats$Entry;Ljava/util/HashSet;IZ)Landroid/net/NetworkStats$Entry;,lo-prio,max-target-o
Landroid/net/NetworkStats;->getTotalBytes()J,unsupported
Landroid/net/NetworkStats;->getTotalIncludingTags(Landroid/net/NetworkStats$Entry;)Landroid/net/NetworkStats$Entry;,unsupported
Landroid/net/NetworkStats;->getTotalPackets()J,lo-prio,max-target-o
Landroid/net/NetworkStats;->getUniqueIfaces()[Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkStats;->getUniqueUids()[I,unsupported
Landroid/net/NetworkStats;->getValues(ILandroid/net/NetworkStats$Entry;)Landroid/net/NetworkStats$Entry;,unsupported
Landroid/net/NetworkStats;->groupedByIface()Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/net/NetworkStats;->groupedByUid()Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/net/NetworkStats;->iface:[Ljava/lang/String;,max-target-r
Landroid/net/NetworkStats;->internalSize()I,lo-prio,max-target-o
Landroid/net/NetworkStats;->iterator()Ljava/util/Iterator;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats;->metered:[I,max-target-r
Landroid/net/NetworkStats;->meteredToString(I)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkStats;->operations:[J,max-target-r
Landroid/net/NetworkStats;->roaming:[I,max-target-r
Landroid/net/NetworkStats;->roamingToString(I)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkStats;->rxBytes:[J,unsupported
Landroid/net/NetworkStats;->rxPackets:[J,max-target-r
Landroid/net/NetworkStats;->set:[I,unsupported
Landroid/net/NetworkStats;->setElapsedRealtime(J)V,lo-prio,max-target-o
Landroid/net/NetworkStats;->setMatches(II)Z,lo-prio,max-target-o
Landroid/net/NetworkStats;->setToCheckinString(I)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkStats;->setToString(I)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkStats;->setValues(ILandroid/net/NetworkStats$Entry;)V,lo-prio,max-target-o
Landroid/net/NetworkStats;->size()I,unsupported
Landroid/net/NetworkStats;->size:I,max-target-r
Landroid/net/NetworkStats;->spliceOperationsFrom(Landroid/net/NetworkStats;)V,lo-prio,max-target-o
Landroid/net/NetworkStats;->subtract(Landroid/net/NetworkStats;)Landroid/net/NetworkStats;,sdk,system-api,test-api
Landroid/net/NetworkStats;->subtract(Landroid/net/NetworkStats;Landroid/net/NetworkStats;Landroid/net/NetworkStats$NonMonotonicObserver;Ljava/lang/Object;)Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/net/NetworkStats;->subtract(Landroid/net/NetworkStats;Landroid/net/NetworkStats;Landroid/net/NetworkStats$NonMonotonicObserver;Ljava/lang/Object;Landroid/net/NetworkStats;)Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/net/NetworkStats;->tag:[I,unsupported
Landroid/net/NetworkStats;->tagToString(I)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkStats;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStats;->tunSubtract(ILandroid/net/NetworkStats;Landroid/net/NetworkStats$Entry;)V,lo-prio,max-target-o
Landroid/net/NetworkStats;->txBytes:[J,unsupported
Landroid/net/NetworkStats;->txPackets:[J,max-target-r
Landroid/net/NetworkStats;->uid:[I,unsupported
Landroid/net/NetworkStats;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkStatsCollection$$ExternalSyntheticLambda0;->compare(Ljava/lang/Object;Ljava/lang/Object;)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStatsCollection$Key;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStatsCollection$Key;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStatsHistory$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkStatsHistory$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkStatsHistory$DataStreamUtils;-><init>()V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory$Entry;-><init>()V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory$Entry;->UNKNOWN:J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory$Entry;->activeTime:J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory$Entry;->bucketDuration:J,max-target-r
Landroid/net/NetworkStatsHistory$Entry;->bucketStart:J,max-target-r
Landroid/net/NetworkStatsHistory$Entry;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStatsHistory$Entry;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStatsHistory$Entry;->operations:J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory$Entry;->rxBytes:J,unsupported
Landroid/net/NetworkStatsHistory$Entry;->rxPackets:J,max-target-r
Landroid/net/NetworkStatsHistory$Entry;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStatsHistory$Entry;->txBytes:J,unsupported
Landroid/net/NetworkStatsHistory$Entry;->txPackets:J,max-target-r
Landroid/net/NetworkStatsHistory$ParcelUtils;-><init>()V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory$ParcelUtils;->readLongArray(Landroid/os/Parcel;)[J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory$ParcelUtils;->writeLongArray(Landroid/os/Parcel;[JI)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;-><init>(J)V,unsupported
Landroid/net/NetworkStatsHistory;-><init>(JI)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;-><init>(JII)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;-><init>(Landroid/net/NetworkStatsHistory;J)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;-><init>(Landroid/os/Parcel;)V,max-target-r
Landroid/net/NetworkStatsHistory;->CREATOR:Landroid/os/Parcelable$Creator;,unsupported
Landroid/net/NetworkStatsHistory;->FIELD_ACTIVE_TIME:I,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->FIELD_ALL:I,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->FIELD_OPERATIONS:I,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->FIELD_RX_BYTES:I,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->FIELD_RX_PACKETS:I,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->FIELD_TX_BYTES:I,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->FIELD_TX_PACKETS:I,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->VERSION_ADD_ACTIVE:I,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->VERSION_ADD_PACKETS:I,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->VERSION_INIT:I,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->activeTime:[J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->addLong([JIJ)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->bucketCount:I,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->bucketDuration:J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->bucketStart:[J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->clear()V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkStatsHistory;->dumpCheckin(Ljava/io/PrintWriter;)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->ensureBuckets(JJ)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->estimateResizeBuckets(J)I,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->generateRandom(JJJ)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->generateRandom(JJJJJJJLjava/util/Random;)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->getBucketDuration()J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->getEnd()J,unsupported
Landroid/net/NetworkStatsHistory;->getIndexAfter(J)I,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->getIndexBefore(J)I,max-target-r
Landroid/net/NetworkStatsHistory;->getLong([JIJ)J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->getStart()J,unsupported
Landroid/net/NetworkStatsHistory;->getTotalBytes()J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->getValues(ILandroid/net/NetworkStatsHistory$Entry;)Landroid/net/NetworkStatsHistory$Entry;,max-target-r
Landroid/net/NetworkStatsHistory;->getValues(JJJLandroid/net/NetworkStatsHistory$Entry;)Landroid/net/NetworkStatsHistory$Entry;,unsupported
Landroid/net/NetworkStatsHistory;->getValues(JJLandroid/net/NetworkStatsHistory$Entry;)Landroid/net/NetworkStatsHistory$Entry;,unsupported
Landroid/net/NetworkStatsHistory;->insertBucket(IJ)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->intersects(JJ)Z,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->operations:[J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->randomLong(Ljava/util/Random;JJ)J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->recordData(JJJJ)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->recordData(JJLandroid/net/NetworkStats$Entry;)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->recordEntireHistory(Landroid/net/NetworkStatsHistory;)V,unsupported
Landroid/net/NetworkStatsHistory;->recordHistory(Landroid/net/NetworkStatsHistory;JJ)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->rxBytes:[J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->rxPackets:[J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->setLong([JIJ)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->setValues(ILandroid/net/NetworkStatsHistory$Entry;)V,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->size()I,max-target-r
Landroid/net/NetworkStatsHistory;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkStatsHistory;->totalBytes:J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->txBytes:[J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->txPackets:[J,lo-prio,max-target-o
Landroid/net/NetworkStatsHistory;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkTemplate$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkTemplate$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/NetworkTemplate;-><init>(ILjava/lang/String;Ljava/lang/String;)V,unsupported
Landroid/net/NetworkTemplate;-><init>(ILjava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V,lo-prio,max-target-o
Landroid/net/NetworkTemplate;-><init>(Landroid/os/Parcel;)V,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->CREATOR:Landroid/os/Parcelable$Creator;,unsupported
Landroid/net/NetworkTemplate;->MATCH_BLUETOOTH:I,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->MATCH_ETHERNET:I,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->MATCH_MOBILE:I,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->MATCH_PROXY:I,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->MATCH_WIFI:I,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->buildTemplateBluetooth()Landroid/net/NetworkTemplate;,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->buildTemplateEthernet()Landroid/net/NetworkTemplate;,unsupported
Landroid/net/NetworkTemplate;->buildTemplateMobileAll(Ljava/lang/String;)Landroid/net/NetworkTemplate;,unsupported
Landroid/net/NetworkTemplate;->buildTemplateMobileWildcard()Landroid/net/NetworkTemplate;,max-target-r
Landroid/net/NetworkTemplate;->buildTemplateProxy()Landroid/net/NetworkTemplate;,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->buildTemplateWifi()Landroid/net/NetworkTemplate;,unsupported
Landroid/net/NetworkTemplate;->buildTemplateWifi(Ljava/lang/String;)Landroid/net/NetworkTemplate;,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->buildTemplateWifiWildcard()Landroid/net/NetworkTemplate;,unsupported
Landroid/net/NetworkTemplate;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/NetworkTemplate;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkTemplate;->getMatchRuleName(I)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->getNetworkId()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->getSubscriberId()Ljava/lang/String;,unsupported
Landroid/net/NetworkTemplate;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkTemplate;->isKnownMatchRule(I)Z,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->isMatchRuleMobile()Z,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->mDefaultNetwork:I,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->mMatchRule:I,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->mMatchSubscriberIds:[Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->mMetered:I,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->mRoaming:I,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->matches(Landroid/net/NetworkIdentity;)Z,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->matchesBluetooth(Landroid/net/NetworkIdentity;)Z,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->matchesDefaultNetwork(Landroid/net/NetworkIdentity;)Z,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->matchesEthernet(Landroid/net/NetworkIdentity;)Z,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->matchesMetered(Landroid/net/NetworkIdentity;)Z,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->matchesMobile(Landroid/net/NetworkIdentity;)Z,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->matchesProxy(Landroid/net/NetworkIdentity;)Z,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->matchesRoaming(Landroid/net/NetworkIdentity;)Z,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->matchesSubscriberId(Ljava/lang/String;)Z,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->matchesWifi(Landroid/net/NetworkIdentity;)Z,lo-prio,max-target-o
Landroid/net/NetworkTemplate;->normalize(Landroid/net/NetworkTemplate;[Ljava/lang/String;)Landroid/net/NetworkTemplate;,unsupported
Landroid/net/NetworkTemplate;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/NetworkTemplate;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/NetworkUtils;-><init>()V,lo-prio,max-target-o
Landroid/net/NetworkUtils;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/NetworkUtils;->bindProcessToNetwork(I)Z,lo-prio,max-target-o
Landroid/net/NetworkUtils;->bindProcessToNetworkForHostResolution(I)Z,lo-prio,max-target-o
Landroid/net/NetworkUtils;->deduplicatePrefixSet(Ljava/util/TreeSet;)Ljava/util/TreeSet;,lo-prio,max-target-o
Landroid/net/NetworkUtils;->getBoundNetworkForProcess()I,lo-prio,max-target-o
Landroid/net/NetworkUtils;->getImplicitNetmask(Ljava/net/Inet4Address;)I,max-target-r
Landroid/net/NetworkUtils;->hexToInet6Address(Ljava/lang/String;)Ljava/net/InetAddress;,lo-prio,max-target-o
Landroid/net/NetworkUtils;->inetAddressToInt(Ljava/net/Inet4Address;)I,lo-prio,max-target-o
Landroid/net/NetworkUtils;->intToInetAddress(I)Ljava/net/InetAddress;,unsupported
Landroid/net/NetworkUtils;->netmaskIntToPrefixLength(I)I,lo-prio,max-target-o
Landroid/net/NetworkUtils;->netmaskToPrefixLength(Ljava/net/Inet4Address;)I,max-target-r
Landroid/net/NetworkUtils;->numericToInetAddress(Ljava/lang/String;)Ljava/net/InetAddress;,max-target-p
Landroid/net/NetworkUtils;->parseIpAndMask(Ljava/lang/String;)Landroid/util/Pair;,lo-prio,max-target-o
Landroid/net/NetworkUtils;->prefixLengthToNetmaskInt(I)I,unsupported
Landroid/net/NetworkUtils;->queryUserAccess(II)Z,lo-prio,max-target-o
Landroid/net/NetworkUtils;->routedIPv4AddressCount(Ljava/util/TreeSet;)J,lo-prio,max-target-o
Landroid/net/NetworkUtils;->routedIPv6AddressCount(Ljava/util/TreeSet;)Ljava/math/BigInteger;,lo-prio,max-target-o
Landroid/net/NetworkUtils;->trimV4AddrZeros(Ljava/lang/String;)Ljava/lang/String;,unsupported
Landroid/net/OemNetworkPreferences$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences$Builder;-><init>()V,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences$Builder;-><init>(Landroid/net/OemNetworkPreferences;)V,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences$Builder;->addNetworkPreference(Ljava/lang/String;I)Landroid/net/OemNetworkPreferences$Builder;,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences$Builder;->build()Landroid/net/OemNetworkPreferences;,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences$Builder;->clearNetworkPreference(Ljava/lang/String;)Landroid/net/OemNetworkPreferences$Builder;,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences;->OEM_NETWORK_PREFERENCE_OEM_PAID:I,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences;->OEM_NETWORK_PREFERENCE_OEM_PAID_NO_FALLBACK:I,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences;->OEM_NETWORK_PREFERENCE_OEM_PAID_ONLY:I,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences;->OEM_NETWORK_PREFERENCE_OEM_PRIVATE_ONLY:I,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences;->OEM_NETWORK_PREFERENCE_UNINITIALIZED:I,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences;->getNetworkPreferences()Ljava/util/Map;,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/OemNetworkPreferences;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/ParseException;-><init>(Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/ParseException;-><init>(Ljava/lang/String;Ljava/lang/Throwable;)V,public-api,sdk,system-api,test-api
Landroid/net/ParseException;->response:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ProfileNetworkPreference$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/ProfileNetworkPreference$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/ProfileNetworkPreference;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/ProfileNetworkPreference;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ProfileNetworkPreference;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ProfileNetworkPreference;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ProfileNetworkPreference;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;-><init>(Landroid/net/ProxyInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;-><init>(Landroid/net/Uri;)V,lo-prio,max-target-o
Landroid/net/ProxyInfo;-><init>(Landroid/net/Uri;I)V,lo-prio,max-target-o
Landroid/net/ProxyInfo;-><init>(Ljava/lang/String;ILjava/lang/String;)V,unsupported
Landroid/net/ProxyInfo;-><init>(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/String;)V,lo-prio,max-target-o
Landroid/net/ProxyInfo;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;->LOCAL_EXCL_LIST:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ProxyInfo;->LOCAL_HOST:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ProxyInfo;->LOCAL_PORT:I,lo-prio,max-target-o
Landroid/net/ProxyInfo;->buildDirectProxy(Ljava/lang/String;I)Landroid/net/ProxyInfo;,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;->buildDirectProxy(Ljava/lang/String;ILjava/util/List;)Landroid/net/ProxyInfo;,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;->buildPacProxy(Landroid/net/Uri;)Landroid/net/ProxyInfo;,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;->buildPacProxy(Landroid/net/Uri;I)Landroid/net/ProxyInfo;,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;->getExclusionList()[Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;->getExclusionListAsString()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ProxyInfo;->getHost()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;->getPacFileUrl()Landroid/net/Uri;,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;->getPort()I,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;->getSocketAddress()Ljava/net/InetSocketAddress;,lo-prio,max-target-o
Landroid/net/ProxyInfo;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;->isValid()Z,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;->mExclusionList:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ProxyInfo;->mHost:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ProxyInfo;->mPacFileUrl:Landroid/net/Uri;,lo-prio,max-target-o
Landroid/net/ProxyInfo;->mParsedExclusionList:[Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/ProxyInfo;->mPort:I,lo-prio,max-target-o
Landroid/net/ProxyInfo;->makeProxy()Ljava/net/Proxy;,lo-prio,max-target-o
Landroid/net/ProxyInfo;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/ProxyInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/QosCallback;-><init>()V,sdk,system-api,test-api
Landroid/net/QosCallback;->onError(Landroid/net/QosCallbackException;)V,sdk,system-api,test-api
Landroid/net/QosCallback;->onQosSessionAvailable(Landroid/net/QosSession;Landroid/net/QosSessionAttributes;)V,sdk,system-api,test-api
Landroid/net/QosCallback;->onQosSessionLost(Landroid/net/QosSession;)V,sdk,system-api,test-api
Landroid/net/QosCallbackException;-><init>(Ljava/lang/String;)V,sdk,system-api,test-api
Landroid/net/QosCallbackException;-><init>(Ljava/lang/Throwable;)V,sdk,system-api,test-api
Landroid/net/QosFilter;->getNetwork()Landroid/net/Network;,sdk,system-api,test-api
Landroid/net/QosFilter;->matchesLocalAddress(Ljava/net/InetAddress;II)Z,sdk,system-api,test-api
Landroid/net/QosFilter;->matchesProtocol(I)Z,sdk,system-api,test-api
Landroid/net/QosFilter;->matchesRemoteAddress(Ljava/net/InetAddress;II)Z,sdk,system-api,test-api
Landroid/net/QosSession$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/QosSession$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/QosSession;-><init>(II)V,sdk,system-api,test-api
Landroid/net/QosSession;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/QosSession;->TYPE_EPS_BEARER:I,sdk,system-api,test-api
Landroid/net/QosSession;->TYPE_NR_BEARER:I,sdk,system-api,test-api
Landroid/net/QosSession;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/QosSession;->getSessionId()I,sdk,system-api,test-api
Landroid/net/QosSession;->getSessionType()I,sdk,system-api,test-api
Landroid/net/QosSession;->getUniqueId()J,sdk,system-api,test-api
Landroid/net/QosSession;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/QosSession;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/QosSocketInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/QosSocketInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/QosSocketInfo;-><init>(Landroid/net/Network;Ljava/net/DatagramSocket;)V,sdk,system-api,test-api
Landroid/net/QosSocketInfo;-><init>(Landroid/net/Network;Ljava/net/Socket;)V,sdk,system-api,test-api
Landroid/net/QosSocketInfo;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/QosSocketInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/QosSocketInfo;->getLocalSocketAddress()Ljava/net/InetSocketAddress;,sdk,system-api,test-api
Landroid/net/QosSocketInfo;->getNetwork()Landroid/net/Network;,sdk,system-api,test-api
Landroid/net/QosSocketInfo;->getRemoteSocketAddress()Ljava/net/InetSocketAddress;,sdk,system-api,test-api
Landroid/net/QosSocketInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo$RouteKey;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo$RouteKey;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;-><init>(Landroid/net/IpPrefix;)V,lo-prio,max-target-o
Landroid/net/RouteInfo;-><init>(Landroid/net/IpPrefix;I)V,lo-prio,max-target-o
Landroid/net/RouteInfo;-><init>(Landroid/net/IpPrefix;Ljava/net/InetAddress;)V,lo-prio,max-target-o
Landroid/net/RouteInfo;-><init>(Landroid/net/IpPrefix;Ljava/net/InetAddress;Ljava/lang/String;)V,max-target-r
Landroid/net/RouteInfo;-><init>(Landroid/net/IpPrefix;Ljava/net/InetAddress;Ljava/lang/String;I)V,sdk,system-api,test-api
Landroid/net/RouteInfo;-><init>(Landroid/net/IpPrefix;Ljava/net/InetAddress;Ljava/lang/String;II)V,sdk,system-api,test-api
Landroid/net/RouteInfo;-><init>(Landroid/net/LinkAddress;)V,lo-prio,max-target-o
Landroid/net/RouteInfo;-><init>(Landroid/net/LinkAddress;Ljava/net/InetAddress;)V,unsupported
Landroid/net/RouteInfo;-><init>(Landroid/net/LinkAddress;Ljava/net/InetAddress;Ljava/lang/String;)V,unsupported
Landroid/net/RouteInfo;-><init>(Ljava/net/InetAddress;)V,unsupported
Landroid/net/RouteInfo;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->RTN_THROW:I,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->RTN_UNICAST:I,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->RTN_UNREACHABLE:I,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->getDestination()Landroid/net/IpPrefix;,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->getDestinationLinkAddress()Landroid/net/LinkAddress;,lo-prio,max-target-o
Landroid/net/RouteInfo;->getGateway()Ljava/net/InetAddress;,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->getInterface()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->getMtu()I,sdk,system-api,test-api
Landroid/net/RouteInfo;->getType()I,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->hasGateway()Z,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->isDefaultRoute()Z,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->isHost()Z,max-target-p
Landroid/net/RouteInfo;->isHostRoute()Z,lo-prio,max-target-o
Landroid/net/RouteInfo;->isIPv4Default()Z,lo-prio,max-target-o
Landroid/net/RouteInfo;->isIPv6Default()Z,lo-prio,max-target-o
Landroid/net/RouteInfo;->mDestination:Landroid/net/IpPrefix;,lo-prio,max-target-o
Landroid/net/RouteInfo;->mGateway:Ljava/net/InetAddress;,unsupported
Landroid/net/RouteInfo;->mHasGateway:Z,lo-prio,max-target-o
Landroid/net/RouteInfo;->mInterface:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/RouteInfo;->mIsHost:Z,max-target-p
Landroid/net/RouteInfo;->mType:I,lo-prio,max-target-o
Landroid/net/RouteInfo;->makeHostRoute(Ljava/net/InetAddress;Ljava/lang/String;)Landroid/net/RouteInfo;,lo-prio,max-target-o
Landroid/net/RouteInfo;->makeHostRoute(Ljava/net/InetAddress;Ljava/net/InetAddress;Ljava/lang/String;)Landroid/net/RouteInfo;,lo-prio,max-target-o
Landroid/net/RouteInfo;->matches(Ljava/net/InetAddress;)Z,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->selectBestRoute(Ljava/util/Collection;Ljava/net/InetAddress;)Landroid/net/RouteInfo;,max-target-r
Landroid/net/RouteInfo;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/RouteInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive$1$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive$1$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive$1$$ExternalSyntheticLambda2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive$1$$ExternalSyntheticLambda3;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive$1$$ExternalSyntheticLambda4;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive$1$$ExternalSyntheticLambda5;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive$Callback;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive$Callback;->onDataReceived()V,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive$Callback;->onError(I)V,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive$Callback;->onStarted()V,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive$Callback;->onStopped()V,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->ERROR_HARDWARE_ERROR:I,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->ERROR_INSUFFICIENT_RESOURCES:I,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->ERROR_INVALID_INTERVAL:I,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->ERROR_INVALID_IP_ADDRESS:I,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->ERROR_INVALID_LENGTH:I,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->ERROR_INVALID_NETWORK:I,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->ERROR_INVALID_PORT:I,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->ERROR_INVALID_SOCKET:I,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->ERROR_NO_SUCH_SLOT:I,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->ERROR_SOCKET_NOT_IDLE:I,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->ERROR_UNSUPPORTED:I,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->FLAG_AUTOMATIC_ON_OFF:I,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->SUCCESS:I,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->start(I)V,public-api,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->start(IILandroid/net/Network;)V,sdk,system-api,test-api
Landroid/net/SocketKeepalive;->stop()V,public-api,sdk,system-api,test-api
Landroid/net/SocketLocalAddressChangedException;-><init>()V,sdk,system-api,test-api
Landroid/net/SocketNotBoundException;-><init>()V,sdk,system-api,test-api
Landroid/net/SocketNotConnectedException;-><init>()V,sdk,system-api,test-api
Landroid/net/SocketRemoteAddressChangedException;-><init>()V,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration$Builder;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration$Builder;->build()Landroid/net/StaticIpConfiguration;,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration$Builder;->setDnsServers(Ljava/lang/Iterable;)Landroid/net/StaticIpConfiguration$Builder;,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration$Builder;->setDomains(Ljava/lang/String;)Landroid/net/StaticIpConfiguration$Builder;,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration$Builder;->setGateway(Ljava/net/InetAddress;)Landroid/net/StaticIpConfiguration$Builder;,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration$Builder;->setIpAddress(Landroid/net/LinkAddress;)Landroid/net/StaticIpConfiguration$Builder;,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;-><init>()V,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;-><init>(Landroid/net/StaticIpConfiguration;)V,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;->addDnsServer(Ljava/net/InetAddress;)V,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;->clear()V,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;->dnsServers:Ljava/util/ArrayList;,max-target-r
Landroid/net/StaticIpConfiguration;->domains:Ljava/lang/String;,max-target-r
Landroid/net/StaticIpConfiguration;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;->gateway:Ljava/net/InetAddress;,max-target-r
Landroid/net/StaticIpConfiguration;->getDnsServers()Ljava/util/List;,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;->getDomains()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;->getGateway()Ljava/net/InetAddress;,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;->getIpAddress()Landroid/net/LinkAddress;,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;->getRoutes(Ljava/lang/String;)Ljava/util/List;,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;->ipAddress:Landroid/net/LinkAddress;,max-target-r
Landroid/net/StaticIpConfiguration;->toLinkProperties(Ljava/lang/String;)Landroid/net/LinkProperties;,lo-prio,max-target-o
Landroid/net/StaticIpConfiguration;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/StaticIpConfiguration;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData;-><init>(Ljava/net/InetAddress;ILjava/net/InetAddress;I[BIIIIII)V,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData;->getIpTos()I,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData;->getIpTtl()I,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData;->getTcpAck()I,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData;->getTcpSeq()I,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData;->getTcpWindow()I,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData;->getTcpWindowScale()I,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TcpKeepalivePacketData;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/TestNetworkInterface$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TestNetworkInterface$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TestNetworkInterface;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/TestNetworkInterface;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/TestNetworkSpecifier$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TestNetworkSpecifier$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TestNetworkSpecifier;->canBeSatisfiedBy(Landroid/net/NetworkSpecifier;)Z,sdk,system-api,test-api
Landroid/net/TestNetworkSpecifier;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/TestNetworkSpecifier;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TestNetworkSpecifier;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TestNetworkSpecifier;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TestNetworkSpecifier;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/TetherStatesParcel$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TetherStatesParcel$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TetherStatesParcel;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/TetherStatesParcel;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/TetheredClient$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TetheredClient$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TetheredClient$AddressInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TetheredClient$AddressInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TetheredClient$AddressInfo;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/TetheredClient$AddressInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/TetheredClient$AddressInfo;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheredClient$AddressInfo;->getAddress()Landroid/net/LinkAddress;,sdk,system-api,test-api
Landroid/net/TetheredClient$AddressInfo;->getHostname()Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/TetheredClient$AddressInfo;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheredClient$AddressInfo;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheredClient$AddressInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/TetheredClient;-><init>(Landroid/net/MacAddress;Ljava/util/Collection;I)V,sdk,system-api,test-api
Landroid/net/TetheredClient;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/TetheredClient;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/TetheredClient;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheredClient;->getAddresses()Ljava/util/List;,sdk,system-api,test-api
Landroid/net/TetheredClient;->getMacAddress()Landroid/net/MacAddress;,sdk,system-api,test-api
Landroid/net/TetheredClient;->getTetheringType()I,sdk,system-api,test-api
Landroid/net/TetheredClient;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheredClient;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheredClient;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/TetheringCallbackStartedParcel$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TetheringCallbackStartedParcel$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TetheringCallbackStartedParcel;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/TetheringCallbackStartedParcel;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/TetheringConfigurationParcel$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TetheringConfigurationParcel$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TetheringConfigurationParcel;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/TetheringConfigurationParcel;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/TetheringInterface$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TetheringInterface$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TetheringInterface;-><init>(ILjava/lang/String;)V,sdk,system-api,test-api
Landroid/net/TetheringInterface;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/TetheringInterface;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/TetheringInterface;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringInterface;->getInterface()Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/TetheringInterface;->getType()I,sdk,system-api,test-api
Landroid/net/TetheringInterface;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringInterface;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringInterface;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$$ExternalSyntheticLambda6;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$1$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$3$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$3;->onReceiveResult(ILandroid/os/Bundle;)V,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$4$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$4$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$4$$ExternalSyntheticLambda2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$4$$ExternalSyntheticLambda3;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$4$$ExternalSyntheticLambda4;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$4$$ExternalSyntheticLambda5;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$4$$ExternalSyntheticLambda6;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$4$$ExternalSyntheticLambda7;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$OnTetheringEntitlementResultListener;->onTetheringEntitlementResult(I)V,sdk,system-api,test-api
Landroid/net/TetheringManager$StartTetheringCallback;->onTetheringFailed(I)V,sdk,system-api,test-api
Landroid/net/TetheringManager$StartTetheringCallback;->onTetheringStarted()V,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringEventCallback;->onClientsChanged(Ljava/util/Collection;)V,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringEventCallback;->onError(Landroid/net/TetheringInterface;I)V,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringEventCallback;->onError(Ljava/lang/String;I)V,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringEventCallback;->onLocalOnlyInterfacesChanged(Ljava/util/List;)V,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringEventCallback;->onLocalOnlyInterfacesChanged(Ljava/util/Set;)V,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringEventCallback;->onOffloadStatusChanged(I)V,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringEventCallback;->onTetherableInterfacesChanged(Ljava/util/List;)V,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringEventCallback;->onTetherableInterfacesChanged(Ljava/util/Set;)V,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringEventCallback;->onTetheredInterfacesChanged(Ljava/util/List;)V,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringEventCallback;->onTetheredInterfacesChanged(Ljava/util/Set;)V,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringEventCallback;->onTetheringSupported(Z)V,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringEventCallback;->onUpstreamChanged(Landroid/net/Network;)V,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringInterfaceRegexps;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringInterfaceRegexps;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringRequest$Builder;-><init>(I)V,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringRequest$Builder;->build()Landroid/net/TetheringManager$TetheringRequest;,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringRequest$Builder;->setConnectivityScope(I)Landroid/net/TetheringManager$TetheringRequest$Builder;,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringRequest$Builder;->setExemptFromEntitlementCheck(Z)Landroid/net/TetheringManager$TetheringRequest$Builder;,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringRequest$Builder;->setShouldShowEntitlementUi(Z)Landroid/net/TetheringManager$TetheringRequest$Builder;,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringRequest$Builder;->setStaticIpv4Addresses(Landroid/net/LinkAddress;Landroid/net/LinkAddress;)Landroid/net/TetheringManager$TetheringRequest$Builder;,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringRequest;->getClientStaticIpv4Address()Landroid/net/LinkAddress;,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringRequest;->getConnectivityScope()I,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringRequest;->getLocalIpv4Address()Landroid/net/LinkAddress;,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringRequest;->getShouldShowEntitlementUi()Z,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringRequest;->getTetheringType()I,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringRequest;->isExemptFromEntitlementCheck()Z,sdk,system-api,test-api
Landroid/net/TetheringManager$TetheringRequest;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager;->ACTION_TETHER_STATE_CHANGED:Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/TetheringManager;->CONNECTIVITY_SCOPE_GLOBAL:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->CONNECTIVITY_SCOPE_LOCAL:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->EXTRA_ACTIVE_LOCAL_ONLY:Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/TetheringManager;->EXTRA_ACTIVE_TETHER:Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/TetheringManager;->EXTRA_AVAILABLE_TETHER:Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/TetheringManager;->EXTRA_ERRORED_TETHER:Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHERING_BLUETOOTH:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHERING_ETHERNET:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHERING_INVALID:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHERING_NCM:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHERING_USB:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHERING_WIFI:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHERING_WIFI_P2P:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_DHCPSERVER_ERROR:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_DISABLE_FORWARDING_ERROR:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_ENABLE_FORWARDING_ERROR:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_ENTITLEMENT_UNKNOWN:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_IFACE_CFG_ERROR:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_INTERNAL_ERROR:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSION:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSION:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_NO_ERROR:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_PROVISIONING_FAILED:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_SERVICE_UNAVAIL:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_TETHER_IFACE_ERROR:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_UNAVAIL_IFACE:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_UNKNOWN_IFACE:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_UNKNOWN_TYPE:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_UNSUPPORTED:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_ERROR_UNTETHER_IFACE_ERROR:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_HARDWARE_OFFLOAD_FAILED:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_HARDWARE_OFFLOAD_STARTED:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->TETHER_HARDWARE_OFFLOAD_STOPPED:I,sdk,system-api,test-api
Landroid/net/TetheringManager;->finalize()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TetheringManager;->registerTetheringEventCallback(Ljava/util/concurrent/Executor;Landroid/net/TetheringManager$TetheringEventCallback;)V,sdk,system-api,test-api
Landroid/net/TetheringManager;->requestLatestTetheringEntitlementResult(IZLjava/util/concurrent/Executor;Landroid/net/TetheringManager$OnTetheringEntitlementResultListener;)V,sdk,system-api,test-api
Landroid/net/TetheringManager;->startTethering(Landroid/net/TetheringManager$TetheringRequest;Ljava/util/concurrent/Executor;Landroid/net/TetheringManager$StartTetheringCallback;)V,sdk,system-api,test-api
Landroid/net/TetheringManager;->stopAllTethering()V,sdk,system-api,test-api
Landroid/net/TetheringManager;->stopTethering(I)V,sdk,system-api,test-api
Landroid/net/TetheringManager;->unregisterTetheringEventCallback(Landroid/net/TetheringManager$TetheringEventCallback;)V,sdk,system-api,test-api
Landroid/net/TetheringRequestParcel$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TetheringRequestParcel$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/TetheringRequestParcel;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/TetheringRequestParcel;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats$1;->initialValue()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats$SocketTagger;->tag(Ljava/io/FileDescriptor;)V,blocked,core-platform-api
Landroid/net/TrafficStats$SocketTagger;->untag(Ljava/io/FileDescriptor;)V,blocked,core-platform-api
Landroid/net/TrafficStats;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->GB_IN_BYTES:J,lo-prio,max-target-o
Landroid/net/TrafficStats;->KB_IN_BYTES:J,lo-prio,max-target-o
Landroid/net/TrafficStats;->LOOPBACK_IFACE:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/TrafficStats;->MB_IN_BYTES:J,lo-prio,max-target-o
Landroid/net/TrafficStats;->PB_IN_BYTES:J,lo-prio,max-target-o
Landroid/net/TrafficStats;->TAG_NETWORK_STACK_IMPERSONATION_RANGE_END:I,sdk,system-api,test-api
Landroid/net/TrafficStats;->TAG_NETWORK_STACK_IMPERSONATION_RANGE_START:I,sdk,system-api,test-api
Landroid/net/TrafficStats;->TAG_NETWORK_STACK_RANGE_END:I,sdk,system-api,test-api
Landroid/net/TrafficStats;->TAG_NETWORK_STACK_RANGE_START:I,sdk,system-api,test-api
Landroid/net/TrafficStats;->TAG_SYSTEM_APP:I,lo-prio,max-target-o
Landroid/net/TrafficStats;->TAG_SYSTEM_BACKUP:I,lo-prio,max-target-o
Landroid/net/TrafficStats;->TAG_SYSTEM_DOWNLOAD:I,lo-prio,max-target-o
Landroid/net/TrafficStats;->TAG_SYSTEM_IMPERSONATION_RANGE_END:I,sdk,system-api,test-api
Landroid/net/TrafficStats;->TAG_SYSTEM_IMPERSONATION_RANGE_START:I,sdk,system-api,test-api
Landroid/net/TrafficStats;->TAG_SYSTEM_MEDIA:I,lo-prio,max-target-o
Landroid/net/TrafficStats;->TAG_SYSTEM_PROBE:I,lo-prio,max-target-o
Landroid/net/TrafficStats;->TAG_SYSTEM_RESTORE:I,lo-prio,max-target-o
Landroid/net/TrafficStats;->TB_IN_BYTES:J,lo-prio,max-target-o
Landroid/net/TrafficStats;->TYPE_RX_BYTES:I,lo-prio,max-target-o
Landroid/net/TrafficStats;->TYPE_RX_PACKETS:I,lo-prio,max-target-o
Landroid/net/TrafficStats;->TYPE_TX_BYTES:I,lo-prio,max-target-o
Landroid/net/TrafficStats;->TYPE_TX_PACKETS:I,lo-prio,max-target-o
Landroid/net/TrafficStats;->UID_REMOVED:I,lo-prio,max-target-o
Landroid/net/TrafficStats;->UID_TETHERING:I,lo-prio,max-target-o
Landroid/net/TrafficStats;->UNSUPPORTED:I,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->addIfSupported(J)J,lo-prio,max-target-o
Landroid/net/TrafficStats;->clearThreadStatsTag()V,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->clearThreadStatsUid()V,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->closeQuietly(Landroid/net/INetworkStatsSession;)V,lo-prio,max-target-o
Landroid/net/TrafficStats;->getAndSetThreadStatsTag(I)I,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getDataLayerSnapshotForUid(Landroid/content/Context;)Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/net/TrafficStats;->getMobileIfaces()[Ljava/lang/String;,max-target-p
Landroid/net/TrafficStats;->getMobileRxBytes()J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getMobileRxPackets()J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getMobileTcpRxPackets()J,max-target-r
Landroid/net/TrafficStats;->getMobileTcpTxPackets()J,max-target-r
Landroid/net/TrafficStats;->getMobileTxBytes()J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getMobileTxPackets()J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getRxBytes(Ljava/lang/String;)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getRxPackets(Ljava/lang/String;)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getStatsService()Landroid/net/INetworkStatsService;,max-target-p
Landroid/net/TrafficStats;->getThreadStatsTag()I,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getThreadStatsUid()I,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getTotalRxBytes()J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getTotalRxPackets()J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getTotalTxBytes()J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getTotalTxPackets()J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getTxBytes(Ljava/lang/String;)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getTxPackets(Ljava/lang/String;)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getUidRxBytes(I)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getUidRxPackets(I)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getUidTcpRxBytes(I)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getUidTcpRxSegments(I)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getUidTcpTxBytes(I)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getUidTcpTxSegments(I)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getUidTxBytes(I)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getUidTxPackets(I)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getUidUdpRxBytes(I)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getUidUdpRxPackets(I)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getUidUdpTxBytes(I)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->getUidUdpTxPackets(I)J,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->incrementOperationCount(I)V,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->incrementOperationCount(II)V,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->sActiveProfilingStart:Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/net/TrafficStats;->sProfilingLock:Ljava/lang/Object;,lo-prio,max-target-o
Landroid/net/TrafficStats;->sStatsService:Landroid/net/INetworkStatsService;,lo-prio,max-target-o
Landroid/net/TrafficStats;->setThreadStatsTag(I)V,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->setThreadStatsTagApp()V,sdk,system-api,test-api
Landroid/net/TrafficStats;->setThreadStatsTagBackup()V,sdk,system-api,test-api
Landroid/net/TrafficStats;->setThreadStatsTagRestore()V,sdk,system-api,test-api
Landroid/net/TrafficStats;->setThreadStatsUid(I)V,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->setThreadStatsUidSelf()V,removed,unsupported
Landroid/net/TrafficStats;->startDataProfiling(Landroid/content/Context;)V,lo-prio,max-target-o
Landroid/net/TrafficStats;->stopDataProfiling(Landroid/content/Context;)Landroid/net/NetworkStats;,lo-prio,max-target-o
Landroid/net/TrafficStats;->tagDatagramSocket(Ljava/net/DatagramSocket;)V,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->tagFileDescriptor(Ljava/io/FileDescriptor;)V,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->tagSocket(Ljava/net/Socket;)V,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->untagDatagramSocket(Ljava/net/DatagramSocket;)V,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->untagFileDescriptor(Ljava/io/FileDescriptor;)V,public-api,sdk,system-api,test-api
Landroid/net/TrafficStats;->untagSocket(Ljava/net/Socket;)V,public-api,sdk,system-api,test-api
Landroid/net/UidRange$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/UidRange$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/UidRange;-><init>(II)V,lo-prio,max-target-o
Landroid/net/UidRange;->CREATOR:Landroid/os/Parcelable$Creator;,lo-prio,max-target-o
Landroid/net/UidRange;->contains(I)Z,lo-prio,max-target-o
Landroid/net/UidRange;->containsRange(Landroid/net/UidRange;)Z,lo-prio,max-target-o
Landroid/net/UidRange;->count()I,lo-prio,max-target-o
Landroid/net/UidRange;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/UidRange;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/UidRange;->getStartUser()I,lo-prio,max-target-o
Landroid/net/UidRange;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/UidRange;->start:I,lo-prio,max-target-o
Landroid/net/UidRange;->stop:I,lo-prio,max-target-o
Landroid/net/UidRange;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/UidRange;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/UnderlyingNetworkInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/UnderlyingNetworkInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/UnderlyingNetworkInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/UnderlyingNetworkInfo;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/UnderlyingNetworkInfo;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/UnderlyingNetworkInfo;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/UnderlyingNetworkInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/VpnTransportInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/VpnTransportInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/VpnTransportInfo;-><init>(ILjava/lang/String;ZZ)V,sdk,system-api,test-api
Landroid/net/VpnTransportInfo;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/VpnTransportInfo;->areLongLivedTcpConnectionsExpensive()Z,sdk,system-api,test-api
Landroid/net/VpnTransportInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/VpnTransportInfo;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/VpnTransportInfo;->getType()I,sdk,system-api,test-api
Landroid/net/VpnTransportInfo;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/VpnTransportInfo;->isBypassable()Z,sdk,system-api,test-api
Landroid/net/VpnTransportInfo;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/VpnTransportInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/apf/ApfCapabilities$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/apf/ApfCapabilities$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/apf/ApfCapabilities;-><init>(III)V,sdk,system-api,test-api
Landroid/net/apf/ApfCapabilities;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/apf/ApfCapabilities;->apfPacketFormat:I,sdk,system-api,test-api
Landroid/net/apf/ApfCapabilities;->apfVersionSupported:I,sdk,system-api,test-api
Landroid/net/apf/ApfCapabilities;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/apf/ApfCapabilities;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/apf/ApfCapabilities;->getApfDrop8023Frames()Z,sdk,system-api,test-api
Landroid/net/apf/ApfCapabilities;->getApfEtherTypeBlackList()[I,sdk,system-api,test-api
Landroid/net/apf/ApfCapabilities;->hasDataAccess()Z,sdk,system-api,test-api
Landroid/net/apf/ApfCapabilities;->maximumApfProgramSize:I,sdk,system-api,test-api
Landroid/net/apf/ApfCapabilities;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/apf/ApfCapabilities;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ConnectionInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ConnectionInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ConnectionInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ConnectionInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/INetworkActivityListener$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/INetworkActivityListener$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/INetworkActivityListener$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/INetworkActivityListener$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/INetworkInterfaceOutcomeReceiver$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/INetworkInterfaceOutcomeReceiver$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/INetworkInterfaceOutcomeReceiver$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/INetworkInterfaceOutcomeReceiver$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/INetworkOfferCallback$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/INetworkOfferCallback$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/INetworkOfferCallback$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/INetworkOfferCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/IOnCompleteListener$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/IOnCompleteListener$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/IOnCompleteListener$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/IOnCompleteListener$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/IQosCallback$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/IQosCallback$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/IQosCallback$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/IQosCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/IRoutingCoordinator$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/IRoutingCoordinator$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/IRoutingCoordinator$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/IRoutingCoordinator$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ISocketKeepaliveCallback$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ISocketKeepaliveCallback$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ISocketKeepaliveCallback$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ISocketKeepaliveCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ITestNetworkManager$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ITestNetworkManager$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ITestNetworkManager$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ITestNetworkManager$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ITetheredInterfaceCallback$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ITetheredInterfaceCallback$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ITetheredInterfaceCallback$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/ITetheredInterfaceCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/LocalNetworkConfig$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/LocalNetworkConfig$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/LocalNetworkConfig;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/LocalNetworkConfig;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/MulticastRoutingConfig$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/MulticastRoutingConfig$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/MulticastRoutingConfig;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/MulticastRoutingConfig;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/NattSocketKeepalive$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/NattSocketKeepalive$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/QosCallbackConnection$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/QosCallbackConnection$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/QosCallbackConnection$$ExternalSyntheticLambda2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/QosCallbackConnection$$ExternalSyntheticLambda3;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/QosFilterParcelable$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/QosFilterParcelable$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/QosFilterParcelable;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/QosFilterParcelable;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/QosSocketFilter;->getNetwork()Landroid/net/Network;,sdk,system-api,test-api
Landroid/net/connectivity/android/net/QosSocketFilter;->matchesLocalAddress(Ljava/net/InetAddress;II)Z,sdk,system-api,test-api
Landroid/net/connectivity/android/net/QosSocketFilter;->matchesProtocol(I)Z,sdk,system-api,test-api
Landroid/net/connectivity/android/net/QosSocketFilter;->matchesRemoteAddress(Ljava/net/InetAddress;II)Z,sdk,system-api,test-api
Landroid/net/connectivity/android/net/TcpSocketKeepalive$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/TcpSocketKeepalive$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/DiscoveryInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/DiscoveryInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/DiscoveryInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/DiscoveryInfo;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/DiscoveryInfo;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/DiscoveryInfo;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/DiscoveryInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/GetAddressInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/GetAddressInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/GetAddressInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/GetAddressInfo;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/GetAddressInfo;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/GetAddressInfo;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/GetAddressInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/IMDns$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/IMDns$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/IMDns$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/IMDns$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/IMDnsEventListener$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/IMDnsEventListener$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/IMDnsEventListener$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/IMDnsEventListener$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/RegistrationInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/RegistrationInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/RegistrationInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/RegistrationInfo;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/RegistrationInfo;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/RegistrationInfo;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/RegistrationInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/ResolutionInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/ResolutionInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/ResolutionInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/ResolutionInfo;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/ResolutionInfo;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/ResolutionInfo;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/mdns/aidl/ResolutionInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/netstats/IUsageCallback$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/netstats/IUsageCallback$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/netstats/IUsageCallback$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/netstats/IUsageCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/nsd/INsdManagerCallback$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/nsd/INsdManagerCallback$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/nsd/INsdManagerCallback$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/nsd/INsdManagerCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/nsd/INsdServiceConnector$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/nsd/INsdServiceConnector$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/nsd/INsdServiceConnector$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/nsd/INsdServiceConnector$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/nsd/IOffloadEngine$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/nsd/IOffloadEngine$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/nsd/IOffloadEngine$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/nsd/IOffloadEngine$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/thread/IThreadNetworkController$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/thread/IThreadNetworkController$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/thread/IThreadNetworkController$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/thread/IThreadNetworkController$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/thread/IThreadNetworkManager$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/thread/IThreadNetworkManager$Stub$Proxy$$ExternalSyntheticLambda0;->apply(Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/thread/IThreadNetworkManager$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/thread/IThreadNetworkManager$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/thread/IThreadNetworkManager$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/net/util/DnsUtils$Rfc6724Comparator;->compare(Ljava/lang/Object;Ljava/lang/Object;)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/util/IndentingPrintWriter;->println()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/util/IndentingPrintWriter;->write(I)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/util/IndentingPrintWriter;->write(Ljava/lang/String;II)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/android/util/IndentingPrintWriter;->write([CII)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/modules/utils/HandlerExecutor;->execute(Ljava/lang/Runnable;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/BestClock;->getZone()Ljava/time/ZoneId;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/BestClock;->instant()Ljava/time/Instant;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/BestClock;->millis()J,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/BestClock;->withZone(Ljava/time/ZoneId;)Ljava/time/Clock;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsPacket$DnsHeader;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsPacket$DnsHeader;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsPacket$DnsHeader;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsPacket$DnsRecord;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsPacket$DnsRecord;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsPacket$DnsRecord;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsPacket;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsPacket;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsPacket;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsSdTxtRecord$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsSdTxtRecord$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsSdTxtRecord;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsSdTxtRecord;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsSdTxtRecord;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsSdTxtRecord;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/DnsSdTxtRecord;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/IBpfMap;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/InterfaceParams;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/IpRange;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/IpRange;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/LinkPropertiesUtils$CompareOrUpdateResult;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/LinkPropertiesUtils$CompareResult;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/Struct;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/Struct;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/android/net/module/util/Struct;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractMessageLite$Builder$LimitedInputStream;->available()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractMessageLite$Builder$LimitedInputStream;->read()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractMessageLite$Builder$LimitedInputStream;->read([BII)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractMessageLite$Builder$LimitedInputStream;->skip(J)J,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractMessageLite$Builder;->clone()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractProtobufList;->add(ILjava/lang/Object;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractProtobufList;->add(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractProtobufList;->addAll(ILjava/util/Collection;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractProtobufList;->addAll(Ljava/util/Collection;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractProtobufList;->clear()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractProtobufList;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractProtobufList;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractProtobufList;->remove(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractProtobufList;->remove(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractProtobufList;->removeAll(Ljava/util/Collection;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractProtobufList;->retainAll(Ljava/util/Collection;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/AbstractProtobufList;->set(ILjava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/BooleanArrayList;->add(ILjava/lang/Object;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/BooleanArrayList;->add(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/BooleanArrayList;->addAll(Ljava/util/Collection;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/BooleanArrayList;->contains(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/BooleanArrayList;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/BooleanArrayList;->get(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/BooleanArrayList;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/BooleanArrayList;->indexOf(Ljava/lang/Object;)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/BooleanArrayList;->remove(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/BooleanArrayList;->removeRange(II)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/BooleanArrayList;->set(ILjava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/BooleanArrayList;->size()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ByteString$1;->hasNext()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ByteString$2;->compare(Ljava/lang/Object;Ljava/lang/Object;)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ByteString$AbstractByteIterator;->next()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ByteString$AbstractByteIterator;->remove()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ByteString$BoundedByteString;->readObject(Ljava/io/ObjectInputStream;)V,sdk
Landroid/net/connectivity/com/google/protobuf/ByteString$BoundedByteString;->serialVersionUID:J,sdk
Landroid/net/connectivity/com/google/protobuf/ByteString$BoundedByteString;->writeReplace()Ljava/lang/Object;,sdk
Landroid/net/connectivity/com/google/protobuf/ByteString$LiteralByteString;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ByteString$LiteralByteString;->serialVersionUID:J,sdk
Landroid/net/connectivity/com/google/protobuf/ByteString$Output;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ByteString$Output;->write(I)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ByteString$Output;->write([BII)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ByteString;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ByteString;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ByteString;->iterator()Ljava/util/Iterator;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ByteString;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/CodedOutputStream$OutOfSpaceException;->serialVersionUID:J,sdk
Landroid/net/connectivity/com/google/protobuf/DoubleArrayList;->add(ILjava/lang/Object;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/DoubleArrayList;->add(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/DoubleArrayList;->addAll(Ljava/util/Collection;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/DoubleArrayList;->contains(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/DoubleArrayList;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/DoubleArrayList;->get(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/DoubleArrayList;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/DoubleArrayList;->indexOf(Ljava/lang/Object;)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/DoubleArrayList;->remove(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/DoubleArrayList;->removeRange(II)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/DoubleArrayList;->set(ILjava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/DoubleArrayList;->size()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ExtensionRegistryLite$ObjectIntPair;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ExtensionRegistryLite$ObjectIntPair;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FieldInfo;->compareTo(Ljava/lang/Object;)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FieldSet;->clone()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FieldSet;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FieldSet;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FloatArrayList;->add(ILjava/lang/Object;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FloatArrayList;->add(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FloatArrayList;->addAll(Ljava/util/Collection;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FloatArrayList;->contains(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FloatArrayList;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FloatArrayList;->get(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FloatArrayList;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FloatArrayList;->indexOf(Ljava/lang/Object;)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FloatArrayList;->remove(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FloatArrayList;->removeRange(II)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FloatArrayList;->set(ILjava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/FloatArrayList;->size()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/GeneratedMessageLite$Builder;->clone()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/GeneratedMessageLite$ExtensionDescriptor;->compareTo(Ljava/lang/Object;)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/GeneratedMessageLite$SerializedForm;->readResolve()Ljava/lang/Object;,sdk
Landroid/net/connectivity/com/google/protobuf/GeneratedMessageLite$SerializedForm;->serialVersionUID:J,sdk
Landroid/net/connectivity/com/google/protobuf/GeneratedMessageLite;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/GeneratedMessageLite;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/GeneratedMessageLite;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/IntArrayList;->add(ILjava/lang/Object;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/IntArrayList;->add(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/IntArrayList;->addAll(Ljava/util/Collection;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/IntArrayList;->contains(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/IntArrayList;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/IntArrayList;->get(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/IntArrayList;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/IntArrayList;->indexOf(Ljava/lang/Object;)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/IntArrayList;->remove(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/IntArrayList;->removeRange(II)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/IntArrayList;->set(ILjava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/IntArrayList;->size()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$ListAdapter;->get(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$ListAdapter;->size()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$MapAdapter$EntryAdapter;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$MapAdapter$EntryAdapter;->getKey()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$MapAdapter$EntryAdapter;->getValue()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$MapAdapter$EntryAdapter;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$MapAdapter$EntryAdapter;->setValue(Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$MapAdapter$IteratorAdapter;->hasNext()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$MapAdapter$IteratorAdapter;->next()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$MapAdapter$IteratorAdapter;->remove()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$MapAdapter$SetAdapter;->iterator()Ljava/util/Iterator;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$MapAdapter$SetAdapter;->size()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$MapAdapter;->entrySet()Ljava/util/Set;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$MapAdapter;->get(Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/Internal$MapAdapter;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/InvalidProtocolBufferException$InvalidWireTypeException;->serialVersionUID:J,sdk
Landroid/net/connectivity/com/google/protobuf/InvalidProtocolBufferException;->serialVersionUID:J,sdk
Landroid/net/connectivity/com/google/protobuf/IterableByteBufferInputStream;->read()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/IterableByteBufferInputStream;->read([BII)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyField$LazyEntry;->getKey()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyField$LazyEntry;->getValue()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyField$LazyEntry;->setValue(Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyField$LazyIterator;->hasNext()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyField$LazyIterator;->next()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyField$LazyIterator;->remove()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyField;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyField;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyField;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyFieldLite;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyFieldLite;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList$ByteArrayListView;->add(ILjava/lang/Object;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList$ByteArrayListView;->get(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList$ByteArrayListView;->remove(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList$ByteArrayListView;->set(ILjava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList$ByteArrayListView;->size()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList$ByteStringListView;->add(ILjava/lang/Object;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList$ByteStringListView;->get(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList$ByteStringListView;->remove(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList$ByteStringListView;->set(ILjava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList$ByteStringListView;->size()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList;->add(ILjava/lang/Object;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList;->add(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList;->addAll(ILjava/util/Collection;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList;->addAll(Ljava/util/Collection;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList;->clear()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList;->get(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList;->remove(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList;->remove(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList;->removeAll(Ljava/util/Collection;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList;->retainAll(Ljava/util/Collection;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList;->set(ILjava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LazyStringArrayList;->size()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LongArrayList;->add(ILjava/lang/Object;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LongArrayList;->add(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LongArrayList;->addAll(Ljava/util/Collection;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LongArrayList;->contains(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LongArrayList;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LongArrayList;->get(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LongArrayList;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LongArrayList;->indexOf(Ljava/lang/Object;)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LongArrayList;->remove(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LongArrayList;->removeRange(II)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LongArrayList;->set(ILjava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/LongArrayList;->size()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/MapFieldLite;->clear()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/MapFieldLite;->entrySet()Ljava/util/Set;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/MapFieldLite;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/MapFieldLite;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/MapFieldLite;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/MapFieldLite;->putAll(Ljava/util/Map;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/MapFieldLite;->remove(Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/NioByteString$1;->available()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/NioByteString$1;->mark(I)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/NioByteString$1;->markSupported()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/NioByteString$1;->read()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/NioByteString$1;->read([BII)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/NioByteString$1;->reset()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/NioByteString;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/NioByteString;->readObject(Ljava/io/ObjectInputStream;)V,sdk
Landroid/net/connectivity/com/google/protobuf/NioByteString;->writeReplace()Ljava/lang/Object;,sdk
Landroid/net/connectivity/com/google/protobuf/ProtobufArrayList;->add(ILjava/lang/Object;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ProtobufArrayList;->add(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ProtobufArrayList;->get(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ProtobufArrayList;->remove(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ProtobufArrayList;->set(ILjava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/ProtobufArrayList;->size()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/RopeByteString$1;->hasNext()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/RopeByteString$PieceIterator;->hasNext()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/RopeByteString$PieceIterator;->next()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/RopeByteString$PieceIterator;->remove()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/RopeByteString$RopeInputStream;->available()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/RopeByteString$RopeInputStream;->mark(I)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/RopeByteString$RopeInputStream;->markSupported()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/RopeByteString$RopeInputStream;->read()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/RopeByteString$RopeInputStream;->read([BII)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/RopeByteString$RopeInputStream;->reset()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/RopeByteString$RopeInputStream;->skip(J)J,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/RopeByteString;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/RopeByteString;->iterator()Ljava/util/Iterator;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/RopeByteString;->readObject(Ljava/io/ObjectInputStream;)V,sdk
Landroid/net/connectivity/com/google/protobuf/RopeByteString;->serialVersionUID:J,sdk
Landroid/net/connectivity/com/google/protobuf/RopeByteString;->writeReplace()Ljava/lang/Object;,sdk
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$DescendingEntryIterator;->hasNext()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$DescendingEntryIterator;->next()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$DescendingEntryIterator;->remove()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$DescendingEntrySet;->iterator()Ljava/util/Iterator;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$EmptySet$1;->hasNext()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$EmptySet$1;->next()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$EmptySet$1;->remove()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$EmptySet$2;->iterator()Ljava/util/Iterator;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$Entry;->compareTo(Ljava/lang/Object;)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$Entry;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$Entry;->getKey()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$Entry;->getValue()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$Entry;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$Entry;->setValue(Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$Entry;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$EntryIterator;->hasNext()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$EntryIterator;->next()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$EntryIterator;->remove()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$EntrySet;->add(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$EntrySet;->clear()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$EntrySet;->contains(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$EntrySet;->iterator()Ljava/util/Iterator;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$EntrySet;->remove(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap$EntrySet;->size()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap;->clear()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap;->containsKey(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap;->entrySet()Ljava/util/Set;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap;->get(Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap;->remove(Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/SmallSortedMap;->size()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UninitializedMessageException;->serialVersionUID:J,sdk
Landroid/net/connectivity/com/google/protobuf/UnknownFieldSetLite;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnknownFieldSetLite;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList$1;->add(Ljava/lang/Object;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList$1;->hasNext()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList$1;->hasPrevious()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList$1;->next()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList$1;->nextIndex()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList$1;->previous()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList$1;->previousIndex()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList$1;->remove()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList$1;->set(Ljava/lang/Object;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList$2;->hasNext()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList$2;->next()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList$2;->remove()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList;->get(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList;->iterator()Ljava/util/Iterator;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList;->listIterator(I)Ljava/util/ListIterator;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnmodifiableLazyStringList;->size()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/com/google/protobuf/UnsafeUtil$1;->run()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/ApplicationStatus$2;->onActivityCreated(Landroid/app/Activity;Landroid/os/Bundle;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/ApplicationStatus$2;->onActivityDestroyed(Landroid/app/Activity;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/ApplicationStatus$2;->onActivityPaused(Landroid/app/Activity;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/ApplicationStatus$2;->onActivityResumed(Landroid/app/Activity;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/ApplicationStatus$2;->onActivitySaveInstanceState(Landroid/app/Activity;Landroid/os/Bundle;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/ApplicationStatus$2;->onActivityStarted(Landroid/app/Activity;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/ApplicationStatus$2;->onActivityStopped(Landroid/app/Activity;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/ApplicationStatus$3;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/ApplicationStatus$WindowCallbackProxy;->invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/BundleUtils$1;->getClassLoader()Ljava/lang/ClassLoader;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/BundleUtils$1;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/BundleUtils$SplitCompatClassLoader;->findClass(Ljava/lang/String;)Ljava/lang/Class;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/Callback$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/CallbackController$AutoCloseableLock;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/CallbackController$CancelableRunnable;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/FileUtils$$ExternalSyntheticLambda0;->apply(Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/JavaExceptionReporter;->uncaughtException(Ljava/lang/Thread;Ljava/lang/Throwable;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/JavaHandlerThread$1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/JavaHandlerThread$2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/JavaHandlerThread$3;->uncaughtException(Ljava/lang/Thread;Ljava/lang/Throwable;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/LifetimeAssert$WrappedReference$1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/ObserverList$ObserverListIterator;->hasNext()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/ObserverList$ObserverListIterator;->next()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/ObserverList$ObserverListIterator;->remove()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/ObserverList;->iterator()Ljava/util/Iterator;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/PathUtils$$ExternalSyntheticLambda0;->call()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/PowerMonitor$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/PowerMonitorForQ$1;->onThermalStatusChanged(I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/StrictModeContext;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/TraceEvent$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/TraceEvent$BasicLooperMonitor;->println(Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/TraceEvent$IdleTracingLooperMonitor;->queueIdle()Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/TraceEvent$ViewHierarchyDumper$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/TraceEvent$ViewHierarchyDumper;->queueIdle()Z,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/TraceEvent;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/UnguessableToken$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/UnguessableToken$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/UnguessableToken;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/UnguessableToken;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/UnguessableToken;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/UnguessableToken;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/UnownedUserDataHost$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/WrappedClassLoader;->findClass(Ljava/lang/String;)Ljava/lang/Class;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/WrappedClassLoader;->findLibrary(Ljava/lang/String;)Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/compat/ApiHelperForQ$1;->onCellInfo(Ljava/util/List;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/library_loader/LibraryPrefetcher$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/library_loader/LibraryPrefetcher$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/library_loader/Linker$LibInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/library_loader/Linker$LibInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/library_loader/Linker$LibInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/library_loader/Linker$LibInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/memory/MemoryPressureMonitor$$ExternalSyntheticLambda2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/memory/MemoryPressureMonitor$1;->onConfigurationChanged(Landroid/content/res/Configuration;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/memory/MemoryPressureMonitor$1;->onLowMemory()V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/memory/MemoryPressureMonitor$1;->onTrimMemory(I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/memory/MemoryPressureUma;->onConfigurationChanged(Landroid/content/res/Configuration;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/memory/MemoryPressureUma;->onLowMemory()V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/memory/MemoryPressureUma;->onTrimMemory(I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/memory/MemoryPurgeManager$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/metrics/ScopedSysTraceEvent;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/metrics/TimingMetric;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/supplier/ObservableSupplierImpl$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/task/AsyncTask$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/task/AsyncTask$$ExternalSyntheticLambda1;->execute(Ljava/lang/Runnable;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/task/AsyncTask$1;->call()Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/task/AsyncTask$NamedFutureTask;->done()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/task/AsyncTask$NamedFutureTask;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/task/AsyncTask$StealRunnableHandler;->rejectedExecution(Ljava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/task/ChainedTasks$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/task/ChainedTasks$1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/task/ChromeThreadPoolExecutor$1;->newThread(Ljava/lang/Runnable;)Ljava/lang/Thread;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/task/ChromeThreadPoolExecutor;->execute(Ljava/lang/Runnable;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/task/SerialExecutor$1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/task/SerialExecutor;->execute(Ljava/lang/Runnable;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/base/task/TaskRunnerImpl$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/AndroidNetworkLibrary$SocketFd$SocketImplFd;->accept(Ljava/net/SocketImpl;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/AndroidNetworkLibrary$SocketFd$SocketImplFd;->available()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/AndroidNetworkLibrary$SocketFd$SocketImplFd;->bind(Ljava/net/InetAddress;I)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/AndroidNetworkLibrary$SocketFd$SocketImplFd;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/AndroidNetworkLibrary$SocketFd$SocketImplFd;->connect(Ljava/lang/String;I)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/AndroidNetworkLibrary$SocketFd$SocketImplFd;->connect(Ljava/net/InetAddress;I)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/AndroidNetworkLibrary$SocketFd$SocketImplFd;->connect(Ljava/net/SocketAddress;I)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/AndroidNetworkLibrary$SocketFd$SocketImplFd;->create(Z)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/AndroidNetworkLibrary$SocketFd$SocketImplFd;->getInputStream()Ljava/io/InputStream;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/AndroidNetworkLibrary$SocketFd$SocketImplFd;->getOption(I)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/AndroidNetworkLibrary$SocketFd$SocketImplFd;->getOutputStream()Ljava/io/OutputStream;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/AndroidNetworkLibrary$SocketFd$SocketImplFd;->listen(I)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/AndroidNetworkLibrary$SocketFd$SocketImplFd;->sendUrgentData(I)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/AndroidNetworkLibrary$SocketFd$SocketImplFd;->setOption(ILjava/lang/Object;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/CronetEngine$Builder$1;->compare(Ljava/lang/Object;Ljava/lang/Object;)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/CronetProvider;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/HttpNegotiateAuthenticator$GetAccountsCallback;->run(Landroid/accounts/AccountManagerFuture;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/HttpNegotiateAuthenticator$GetTokenCallback$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/HttpNegotiateAuthenticator$GetTokenCallback;->run(Landroid/accounts/AccountManagerFuture;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/MimeTypeFilter;->accept(Ljava/io/File;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkActiveNotifier;->onNetworkActive()V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$AndroidRDefaultNetworkCallback;->onAvailable(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$AndroidRDefaultNetworkCallback;->onCapabilitiesChanged(Landroid/net/Network;Landroid/net/NetworkCapabilities;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$AndroidRDefaultNetworkCallback;->onLinkPropertiesChanged(Landroid/net/Network;Landroid/net/LinkProperties;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$AndroidRDefaultNetworkCallback;->onLost(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$DefaultNetworkCallback;->onAvailable(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$DefaultNetworkCallback;->onLinkPropertiesChanged(Landroid/net/Network;Landroid/net/LinkProperties;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$DefaultNetworkCallback;->onLost(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$MyNetworkCallback$1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$MyNetworkCallback$2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$MyNetworkCallback$3;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$MyNetworkCallback$4;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$MyNetworkCallback$5;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$MyNetworkCallback;->onAvailable(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$MyNetworkCallback;->onCapabilitiesChanged(Landroid/net/Network;Landroid/net/NetworkCapabilities;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$MyNetworkCallback;->onLosing(Landroid/net/Network;I)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect$MyNetworkCallback;->onLost(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/NetworkChangeNotifierAutoDetect;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/ProxyBroadcastReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/ProxyChangeListener$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/ProxyChangeListener$ProxyConfig;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/ProxyChangeListener$ProxyReceiver$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/ProxyChangeListener$ProxyReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/UploadDataProvider;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/X509Util$TrustStorageListener;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/apihelpers/UploadDataProviders$FileUploadProvider;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetBidirectionalStream$1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetBidirectionalStream$2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetBidirectionalStream$3;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetBidirectionalStream$4;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetBidirectionalStream$5;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetBidirectionalStream$OnReadCompletedRunnable;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetBidirectionalStream$OnWriteCompletedRunnable;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetLibraryLoader$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetLogger$CronetVersion;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetLoggerFactory$SwapLoggerForTesting;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUploadDataStream$1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUploadDataStream$2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUploadDataStream$3;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUrlRequest$1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUrlRequest$2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUrlRequest$3;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUrlRequest$4;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUrlRequest$5;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUrlRequest$6;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUrlRequest$7;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUrlRequest$8;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUrlRequest$9;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUrlRequest$OnReadCompletedRunnable;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUrlRequestContext$1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUrlRequestContext$2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUrlRequestContext$3;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/CronetUrlRequestContext$4;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/NativeCronetProvider;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/NativeCronetProvider;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/NetworkExceptionImpl;->getMessage()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/QuicExceptionImpl;->getMessage()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/UrlResponseInfoImpl;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/VersionSafeCallbacks$NetworkQualityRttListenerWrapper;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/VersionSafeCallbacks$NetworkQualityRttListenerWrapper;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/VersionSafeCallbacks$NetworkQualityThroughputListenerWrapper;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/VersionSafeCallbacks$NetworkQualityThroughputListenerWrapper;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/impl/VersionSafeCallbacks$UploadDataProviderWrapper;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetBufferedOutputStream;->write(I)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetBufferedOutputStream;->write([BII)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetChunkedOutputStream;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetChunkedOutputStream;->write(I)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetChunkedOutputStream;->write([BII)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetFixedModeOutputStream;->write(I)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetFixedModeOutputStream;->write([BII)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->addRequestProperty(Ljava/lang/String;Ljava/lang/String;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->connect()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->disconnect()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->getErrorStream()Ljava/io/InputStream;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->getHeaderField(I)Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->getHeaderField(Ljava/lang/String;)Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->getHeaderFieldKey(I)Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->getHeaderFields()Ljava/util/Map;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->getInputStream()Ljava/io/InputStream;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->getOutputStream()Ljava/io/OutputStream;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->getRequestProperties()Ljava/util/Map;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->getRequestProperty(Ljava/lang/String;)Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->getResponseCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->getResponseMessage()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->setConnectTimeout(I)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->setRequestProperty(Ljava/lang/String;Ljava/lang/String;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLConnection;->usingProxy()Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLStreamHandler;->openConnection(Ljava/net/URL;)Ljava/net/URLConnection;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetHttpURLStreamHandler;->openConnection(Ljava/net/URL;Ljava/net/Proxy;)Ljava/net/URLConnection;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetInputStream;->available()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetInputStream;->read()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetInputStream;->read([BII)I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetOutputStream;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/CronetURLStreamHandlerFactory;->createURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/connectivity/org/chromium/net/urlconnection/MessageLoop;->execute(Ljava/lang/Runnable;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Builder;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Builder;->addHeader(Ljava/lang/String;Ljava/lang/String;)Landroid/net/http/BidirectionalStream$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Builder;->build()Landroid/net/http/BidirectionalStream;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Builder;->setDelayRequestHeadersUntilFirstFlushEnabled(Z)Landroid/net/http/BidirectionalStream$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Builder;->setHttpMethod(Ljava/lang/String;)Landroid/net/http/BidirectionalStream$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Builder;->setPriority(I)Landroid/net/http/BidirectionalStream$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Builder;->setTrafficStatsTag(I)Landroid/net/http/BidirectionalStream$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Builder;->setTrafficStatsUid(I)Landroid/net/http/BidirectionalStream$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Callback;->onCanceled(Landroid/net/http/BidirectionalStream;Landroid/net/http/UrlResponseInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Callback;->onFailed(Landroid/net/http/BidirectionalStream;Landroid/net/http/UrlResponseInfo;Landroid/net/http/HttpException;)V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Callback;->onReadCompleted(Landroid/net/http/BidirectionalStream;Landroid/net/http/UrlResponseInfo;Ljava/nio/ByteBuffer;Z)V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Callback;->onResponseHeadersReceived(Landroid/net/http/BidirectionalStream;Landroid/net/http/UrlResponseInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Callback;->onResponseTrailersReceived(Landroid/net/http/BidirectionalStream;Landroid/net/http/UrlResponseInfo;Landroid/net/http/HeaderBlock;)V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Callback;->onStreamReady(Landroid/net/http/BidirectionalStream;)V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Callback;->onSucceeded(Landroid/net/http/BidirectionalStream;Landroid/net/http/UrlResponseInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream$Callback;->onWriteCompleted(Landroid/net/http/BidirectionalStream;Landroid/net/http/UrlResponseInfo;Ljava/nio/ByteBuffer;Z)V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->STREAM_PRIORITY_HIGHEST:I,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->STREAM_PRIORITY_IDLE:I,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->STREAM_PRIORITY_LOW:I,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->STREAM_PRIORITY_LOWEST:I,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->STREAM_PRIORITY_MEDIUM:I,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->cancel()V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->flush()V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->getHeaders()Landroid/net/http/HeaderBlock;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->getHttpMethod()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->getPriority()I,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->getTrafficStatsTag()I,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->getTrafficStatsUid()I,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->hasTrafficStatsTag()Z,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->hasTrafficStatsUid()Z,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->isDelayRequestHeadersUntilFirstFlushEnabled()Z,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->isDone()Z,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->read(Ljava/nio/ByteBuffer;)V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->start()V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStream;->write(Ljava/nio/ByteBuffer;Z)V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamBuilderWrapper;->addHeader(Ljava/lang/String;Ljava/lang/String;)Landroid/net/http/BidirectionalStream$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamBuilderWrapper;->build()Landroid/net/http/BidirectionalStream;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamBuilderWrapper;->setDelayRequestHeadersUntilFirstFlushEnabled(Z)Landroid/net/http/BidirectionalStream$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamBuilderWrapper;->setHttpMethod(Ljava/lang/String;)Landroid/net/http/BidirectionalStream$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamBuilderWrapper;->setPriority(I)Landroid/net/http/BidirectionalStream$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamBuilderWrapper;->setTrafficStatsTag(I)Landroid/net/http/BidirectionalStream$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamBuilderWrapper;->setTrafficStatsUid(I)Landroid/net/http/BidirectionalStream$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamWrapper;->cancel()V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamWrapper;->flush()V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamWrapper;->getHeaders()Landroid/net/http/HeaderBlock;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamWrapper;->getHttpMethod()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamWrapper;->getPriority()I,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamWrapper;->getTrafficStatsTag()I,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamWrapper;->getTrafficStatsUid()I,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamWrapper;->hasTrafficStatsTag()Z,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamWrapper;->hasTrafficStatsUid()Z,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamWrapper;->isDelayRequestHeadersUntilFirstFlushEnabled()Z,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamWrapper;->isDone()Z,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamWrapper;->read(Ljava/nio/ByteBuffer;)V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamWrapper;->start()V,public-api,sdk,system-api,test-api
Landroid/net/http/BidirectionalStreamWrapper;->write(Ljava/nio/ByteBuffer;Z)V,public-api,sdk,system-api,test-api
Landroid/net/http/CallbackException;-><init>(Ljava/lang/String;Ljava/lang/Throwable;)V,public-api,sdk,system-api,test-api
Landroid/net/http/ConnectionMigrationOptions$Builder;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/http/ConnectionMigrationOptions$Builder;->build()Landroid/net/http/ConnectionMigrationOptions;,public-api,sdk,system-api,test-api
Landroid/net/http/ConnectionMigrationOptions$Builder;->setAllowNonDefaultNetworkUsage(I)Landroid/net/http/ConnectionMigrationOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/ConnectionMigrationOptions$Builder;->setDefaultNetworkMigration(I)Landroid/net/http/ConnectionMigrationOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/ConnectionMigrationOptions$Builder;->setPathDegradationMigration(I)Landroid/net/http/ConnectionMigrationOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/ConnectionMigrationOptions;->MIGRATION_OPTION_DISABLED:I,public-api,sdk,system-api,test-api
Landroid/net/http/ConnectionMigrationOptions;->MIGRATION_OPTION_ENABLED:I,public-api,sdk,system-api,test-api
Landroid/net/http/ConnectionMigrationOptions;->MIGRATION_OPTION_UNSPECIFIED:I,public-api,sdk,system-api,test-api
Landroid/net/http/ConnectionMigrationOptions;->getAllowNonDefaultNetworkUsage()I,public-api,sdk,system-api,test-api
Landroid/net/http/ConnectionMigrationOptions;->getDefaultNetworkMigration()I,public-api,sdk,system-api,test-api
Landroid/net/http/ConnectionMigrationOptions;->getPathDegradationMigration()I,public-api,sdk,system-api,test-api
Landroid/net/http/CronetEngineWrapper;->bindToNetwork(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/http/CronetEngineWrapper;->createUrlStreamHandlerFactory()Ljava/net/URLStreamHandlerFactory;,public-api,sdk,system-api,test-api
Landroid/net/http/CronetEngineWrapper;->newBidirectionalStreamBuilder(Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/net/http/BidirectionalStream$Callback;)Landroid/net/http/BidirectionalStream$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/CronetEngineWrapper;->newUrlRequestBuilder(Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/net/http/UrlRequest$Callback;)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/CronetEngineWrapper;->openConnection(Ljava/net/URL;)Ljava/net/URLConnection;,public-api,sdk,system-api,test-api
Landroid/net/http/CronetEngineWrapper;->shutdown()V,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$Builder;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$Builder;->build()Landroid/net/http/DnsOptions;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$Builder;->setPersistHostCache(I)Landroid/net/http/DnsOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$Builder;->setPersistHostCachePeriod(Ljava/time/Duration;)Landroid/net/http/DnsOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$Builder;->setPreestablishConnectionsToStaleDnsResults(I)Landroid/net/http/DnsOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$Builder;->setStaleDns(I)Landroid/net/http/DnsOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$Builder;->setStaleDnsOptions(Landroid/net/http/DnsOptions$StaleDnsOptions;)Landroid/net/http/DnsOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$Builder;->setUseHttpStackDnsResolver(I)Landroid/net/http/DnsOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$StaleDnsOptions$Builder;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$StaleDnsOptions$Builder;->build()Landroid/net/http/DnsOptions$StaleDnsOptions;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$StaleDnsOptions$Builder;->setAllowCrossNetworkUsage(I)Landroid/net/http/DnsOptions$StaleDnsOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$StaleDnsOptions$Builder;->setFreshLookupTimeout(Ljava/time/Duration;)Landroid/net/http/DnsOptions$StaleDnsOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$StaleDnsOptions$Builder;->setMaxExpiredDelay(Ljava/time/Duration;)Landroid/net/http/DnsOptions$StaleDnsOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$StaleDnsOptions$Builder;->setUseStaleOnNameNotResolved(I)Landroid/net/http/DnsOptions$StaleDnsOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$StaleDnsOptions;->getAllowCrossNetworkUsage()I,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$StaleDnsOptions;->getFreshLookupTimeout()Ljava/time/Duration;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$StaleDnsOptions;->getMaxExpiredDelay()Ljava/time/Duration;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions$StaleDnsOptions;->getUseStaleOnNameNotResolved()I,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions;->DNS_OPTION_DISABLED:I,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions;->DNS_OPTION_ENABLED:I,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions;->DNS_OPTION_UNSPECIFIED:I,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions;->getPersistHostCache()I,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions;->getPersistHostCachePeriod()Ljava/time/Duration;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions;->getPreestablishConnectionsToStaleDnsResults()I,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions;->getStaleDns()I,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions;->getStaleDnsOptions()Landroid/net/http/DnsOptions$StaleDnsOptions;,public-api,sdk,system-api,test-api
Landroid/net/http/DnsOptions;->getUseHttpStackDnsResolver()I,public-api,sdk,system-api,test-api
Landroid/net/http/HeaderBlock;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/http/HeaderBlock;->getAsList()Ljava/util/List;,public-api,sdk,system-api,test-api
Landroid/net/http/HeaderBlock;->getAsMap()Ljava/util/Map;,public-api,sdk,system-api,test-api
Landroid/net/http/HeaderBlockWrapper;->getAsList()Ljava/util/List;,public-api,sdk,system-api,test-api
Landroid/net/http/HeaderBlockWrapper;->getAsMap()Ljava/util/Map;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;-><init>(Landroid/content/Context;)V,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->HTTP_CACHE_DISABLED:I,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->HTTP_CACHE_DISK:I,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->HTTP_CACHE_DISK_NO_HTTP:I,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->HTTP_CACHE_IN_MEMORY:I,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->addPublicKeyPins(Ljava/lang/String;Ljava/util/Set;ZLjava/time/Instant;)Landroid/net/http/HttpEngine$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->addQuicHint(Ljava/lang/String;II)Landroid/net/http/HttpEngine$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->build()Landroid/net/http/HttpEngine;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->getDefaultUserAgent()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->setConnectionMigrationOptions(Landroid/net/http/ConnectionMigrationOptions;)Landroid/net/http/HttpEngine$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->setDnsOptions(Landroid/net/http/DnsOptions;)Landroid/net/http/HttpEngine$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->setEnableBrotli(Z)Landroid/net/http/HttpEngine$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->setEnableHttp2(Z)Landroid/net/http/HttpEngine$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->setEnableHttpCache(IJ)Landroid/net/http/HttpEngine$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->setEnablePublicKeyPinningBypassForLocalTrustAnchors(Z)Landroid/net/http/HttpEngine$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->setEnableQuic(Z)Landroid/net/http/HttpEngine$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->setQuicOptions(Landroid/net/http/QuicOptions;)Landroid/net/http/HttpEngine$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->setStoragePath(Ljava/lang/String;)Landroid/net/http/HttpEngine$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine$Builder;->setUserAgent(Ljava/lang/String;)Landroid/net/http/HttpEngine$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine;->bindToNetwork(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine;->createUrlStreamHandlerFactory()Ljava/net/URLStreamHandlerFactory;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine;->getVersionString()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine;->newBidirectionalStreamBuilder(Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/net/http/BidirectionalStream$Callback;)Landroid/net/http/BidirectionalStream$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine;->newUrlRequestBuilder(Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/net/http/UrlRequest$Callback;)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine;->openConnection(Ljava/net/URL;)Ljava/net/URLConnection;,public-api,sdk,system-api,test-api
Landroid/net/http/HttpEngine;->shutdown()V,public-api,sdk,system-api,test-api
Landroid/net/http/HttpException;-><init>(Ljava/lang/String;Ljava/lang/Throwable;)V,public-api,sdk,system-api,test-api
Landroid/net/http/InlineExecutionProhibitedException;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkException;-><init>(Ljava/lang/String;Ljava/lang/Throwable;)V,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkException;->ERROR_ADDRESS_UNREACHABLE:I,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkException;->ERROR_CONNECTION_CLOSED:I,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkException;->ERROR_CONNECTION_REFUSED:I,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkException;->ERROR_CONNECTION_RESET:I,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkException;->ERROR_CONNECTION_TIMED_OUT:I,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkException;->ERROR_HOSTNAME_NOT_RESOLVED:I,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkException;->ERROR_INTERNET_DISCONNECTED:I,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkException;->ERROR_NETWORK_CHANGED:I,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkException;->ERROR_OTHER:I,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkException;->ERROR_QUIC_PROTOCOL_FAILED:I,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkException;->ERROR_TIMED_OUT:I,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkException;->getErrorCode()I,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkException;->isImmediatelyRetryable()Z,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkExceptionWrapper;->getErrorCode()I,public-api,sdk,system-api,test-api
Landroid/net/http/NetworkExceptionWrapper;->isImmediatelyRetryable()Z,public-api,sdk,system-api,test-api
Landroid/net/http/QuicException;-><init>(Ljava/lang/String;Ljava/lang/Throwable;)V,public-api,sdk,system-api,test-api
Landroid/net/http/QuicExceptionWrapper;->getErrorCode()I,public-api,sdk,system-api,test-api
Landroid/net/http/QuicExceptionWrapper;->isImmediatelyRetryable()Z,public-api,sdk,system-api,test-api
Landroid/net/http/QuicOptions$Builder;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/http/QuicOptions$Builder;->addAllowedQuicHost(Ljava/lang/String;)Landroid/net/http/QuicOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/QuicOptions$Builder;->build()Landroid/net/http/QuicOptions;,public-api,sdk,system-api,test-api
Landroid/net/http/QuicOptions$Builder;->setHandshakeUserAgent(Ljava/lang/String;)Landroid/net/http/QuicOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/QuicOptions$Builder;->setIdleConnectionTimeout(Ljava/time/Duration;)Landroid/net/http/QuicOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/QuicOptions$Builder;->setInMemoryServerConfigsCacheSize(I)Landroid/net/http/QuicOptions$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/QuicOptions;->getAllowedQuicHosts()Ljava/util/Set;,public-api,sdk,system-api,test-api
Landroid/net/http/QuicOptions;->getHandshakeUserAgent()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/http/QuicOptions;->getIdleConnectionTimeout()Ljava/time/Duration;,public-api,sdk,system-api,test-api
Landroid/net/http/QuicOptions;->getInMemoryServerConfigsCacheSize()I,public-api,sdk,system-api,test-api
Landroid/net/http/QuicOptions;->hasInMemoryServerConfigsCacheSize()Z,public-api,sdk,system-api,test-api
Landroid/net/http/UploadDataProvider;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/http/UploadDataProvider;->close()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/http/UploadDataProvider;->getLength()J,public-api,sdk,system-api,test-api
Landroid/net/http/UploadDataProvider;->read(Landroid/net/http/UploadDataSink;Ljava/nio/ByteBuffer;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UploadDataProvider;->rewind(Landroid/net/http/UploadDataSink;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UploadDataSink;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/http/UploadDataSink;->onReadError(Ljava/lang/Exception;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UploadDataSink;->onReadSucceeded(Z)V,public-api,sdk,system-api,test-api
Landroid/net/http/UploadDataSink;->onRewindError(Ljava/lang/Exception;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UploadDataSink;->onRewindSucceeded()V,public-api,sdk,system-api,test-api
Landroid/net/http/UploadDataSinkWrapper;->onReadError(Ljava/lang/Exception;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UploadDataSinkWrapper;->onReadSucceeded(Z)V,public-api,sdk,system-api,test-api
Landroid/net/http/UploadDataSinkWrapper;->onRewindError(Ljava/lang/Exception;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UploadDataSinkWrapper;->onRewindSucceeded()V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Builder;->addHeader(Ljava/lang/String;Ljava/lang/String;)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Builder;->bindToNetwork(Landroid/net/Network;)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Builder;->build()Landroid/net/http/UrlRequest;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Builder;->setCacheDisabled(Z)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Builder;->setDirectExecutorAllowed(Z)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Builder;->setHttpMethod(Ljava/lang/String;)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Builder;->setPriority(I)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Builder;->setTrafficStatsTag(I)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Builder;->setTrafficStatsUid(I)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Builder;->setUploadDataProvider(Landroid/net/http/UploadDataProvider;Ljava/util/concurrent/Executor;)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Callback;->onCanceled(Landroid/net/http/UrlRequest;Landroid/net/http/UrlResponseInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Callback;->onFailed(Landroid/net/http/UrlRequest;Landroid/net/http/UrlResponseInfo;Landroid/net/http/HttpException;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Callback;->onReadCompleted(Landroid/net/http/UrlRequest;Landroid/net/http/UrlResponseInfo;Ljava/nio/ByteBuffer;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Callback;->onRedirectReceived(Landroid/net/http/UrlRequest;Landroid/net/http/UrlResponseInfo;Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Callback;->onResponseStarted(Landroid/net/http/UrlRequest;Landroid/net/http/UrlResponseInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Callback;->onSucceeded(Landroid/net/http/UrlRequest;Landroid/net/http/UrlResponseInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->CONNECTING:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->DOWNLOADING_PAC_FILE:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->ESTABLISHING_PROXY_TUNNEL:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->IDLE:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->INVALID:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->READING_RESPONSE:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->RESOLVING_HOST:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->RESOLVING_HOST_IN_PAC_FILE:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->RESOLVING_PROXY_FOR_URL:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->SENDING_REQUEST:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->SSL_HANDSHAKE:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->WAITING_FOR_AVAILABLE_SOCKET:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->WAITING_FOR_CACHE:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->WAITING_FOR_DELEGATE:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->WAITING_FOR_RESPONSE:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$Status;->WAITING_FOR_STALLED_SOCKET_POOL:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest$StatusListener;->onStatus(I)V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->REQUEST_PRIORITY_HIGHEST:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->REQUEST_PRIORITY_IDLE:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->REQUEST_PRIORITY_LOW:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->REQUEST_PRIORITY_LOWEST:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->REQUEST_PRIORITY_MEDIUM:I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->cancel()V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->followRedirect()V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->getHeaders()Landroid/net/http/HeaderBlock;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->getHttpMethod()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->getPriority()I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->getStatus(Landroid/net/http/UrlRequest$StatusListener;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->getTrafficStatsTag()I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->getTrafficStatsUid()I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->hasTrafficStatsTag()Z,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->hasTrafficStatsUid()Z,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->isCacheDisabled()Z,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->isDirectExecutorAllowed()Z,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->isDone()Z,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->read(Ljava/nio/ByteBuffer;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequest;->start()V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestBuilderWrapper;->addHeader(Ljava/lang/String;Ljava/lang/String;)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestBuilderWrapper;->bindToNetwork(Landroid/net/Network;)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestBuilderWrapper;->build()Landroid/net/http/UrlRequest;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestBuilderWrapper;->setCacheDisabled(Z)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestBuilderWrapper;->setDirectExecutorAllowed(Z)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestBuilderWrapper;->setHttpMethod(Ljava/lang/String;)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestBuilderWrapper;->setPriority(I)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestBuilderWrapper;->setTrafficStatsTag(I)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestBuilderWrapper;->setTrafficStatsUid(I)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestBuilderWrapper;->setUploadDataProvider(Landroid/net/http/UploadDataProvider;Ljava/util/concurrent/Executor;)Landroid/net/http/UrlRequest$Builder;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->cancel()V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->followRedirect()V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->getHeaders()Landroid/net/http/HeaderBlock;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->getHttpMethod()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->getPriority()I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->getStatus(Landroid/net/http/UrlRequest$StatusListener;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->getTrafficStatsTag()I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->getTrafficStatsUid()I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->hasTrafficStatsTag()Z,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->hasTrafficStatsUid()Z,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->isCacheDisabled()Z,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->isDirectExecutorAllowed()Z,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->isDone()Z,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->read(Ljava/nio/ByteBuffer;)V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlRequestWrapper;->start()V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfo;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfo;->getHeaders()Landroid/net/http/HeaderBlock;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfo;->getHttpStatusCode()I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfo;->getHttpStatusText()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfo;->getNegotiatedProtocol()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfo;->getReceivedByteCount()J,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfo;->getUrl()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfo;->getUrlChain()Ljava/util/List;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfo;->wasCached()Z,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfoWrapper$HeaderBlockImpl$$ExternalSyntheticLambda0;->apply(Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfoWrapper$HeaderBlockImpl$$ExternalSyntheticLambda1;->apply(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfoWrapper$HeaderBlockImpl;->getAsList()Ljava/util/List;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfoWrapper$HeaderBlockImpl;->getAsMap()Ljava/util/Map;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfoWrapper;->getHeaders()Landroid/net/http/HeaderBlock;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfoWrapper;->getHttpStatusCode()I,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfoWrapper;->getHttpStatusText()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfoWrapper;->getNegotiatedProtocol()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfoWrapper;->getReceivedByteCount()J,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfoWrapper;->getUrl()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfoWrapper;->getUrlChain()Ljava/util/List;,public-api,sdk,system-api,test-api
Landroid/net/http/UrlResponseInfoWrapper;->wasCached()Z,public-api,sdk,system-api,test-api
Landroid/net/netstats/provider/INetworkStatsProvider$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/netstats/provider/INetworkStatsProvider$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/netstats/provider/INetworkStatsProvider$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/netstats/provider/INetworkStatsProvider$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/netstats/provider/INetworkStatsProviderCallback$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/netstats/provider/INetworkStatsProviderCallback$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/netstats/provider/INetworkStatsProviderCallback$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/netstats/provider/INetworkStatsProviderCallback$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/netstats/provider/NetworkStatsProvider;-><init>()V,sdk,system-api,test-api
Landroid/net/netstats/provider/NetworkStatsProvider;->QUOTA_UNLIMITED:I,sdk,system-api,test-api
Landroid/net/netstats/provider/NetworkStatsProvider;->notifyAlertReached()V,sdk,system-api,test-api
Landroid/net/netstats/provider/NetworkStatsProvider;->notifyLimitReached()V,sdk,system-api,test-api
Landroid/net/netstats/provider/NetworkStatsProvider;->notifyStatsUpdated(ILandroid/net/NetworkStats;Landroid/net/NetworkStats;)V,sdk,system-api,test-api
Landroid/net/netstats/provider/NetworkStatsProvider;->notifyWarningReached()V,sdk,system-api,test-api
Landroid/net/netstats/provider/NetworkStatsProvider;->onRequestStatsUpdate(I)V,sdk,system-api,test-api
Landroid/net/netstats/provider/NetworkStatsProvider;->onSetAlert(J)V,sdk,system-api,test-api
Landroid/net/netstats/provider/NetworkStatsProvider;->onSetLimit(Ljava/lang/String;J)V,sdk,system-api,test-api
Landroid/net/netstats/provider/NetworkStatsProvider;->onSetWarningAndLimit(Ljava/lang/String;JJ)V,sdk,system-api,test-api
Landroid/net/nsd/INsdManager$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/nsd/INsdManager$Stub$Proxy;-><init>(Landroid/os/IBinder;)V,lo-prio,max-target-o
Landroid/net/nsd/INsdManager$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/nsd/INsdManager$Stub$Proxy;->getInterfaceDescriptor()Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/nsd/INsdManager$Stub$Proxy;->mRemote:Landroid/os/IBinder;,lo-prio,max-target-o
Landroid/net/nsd/INsdManager$Stub;-><init>()V,lo-prio,max-target-o
Landroid/net/nsd/INsdManager$Stub;->DESCRIPTOR:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/nsd/INsdManager$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/nsd/INsdManager$Stub;->asInterface(Landroid/os/IBinder;)Landroid/net/nsd/INsdManager;,lo-prio,max-target-r
Landroid/net/nsd/INsdManager$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$$ExternalSyntheticLambda0;->test(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$$ExternalSyntheticLambda1;->test(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$$ExternalSyntheticLambda2;->execute(Ljava/lang/Runnable;)V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$DiscoveryListener;->onDiscoveryStarted(Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$DiscoveryListener;->onDiscoveryStopped(Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$DiscoveryListener;->onServiceFound(Landroid/net/nsd/NsdServiceInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$DiscoveryListener;->onServiceLost(Landroid/net/nsd/NsdServiceInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$DiscoveryListener;->onStartDiscoveryFailed(Ljava/lang/String;I)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$DiscoveryListener;->onStopDiscoveryFailed(Ljava/lang/String;I)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$OffloadEngineProxy$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$OffloadEngineProxy$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$$ExternalSyntheticLambda2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$$ExternalSyntheticLambda3;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$1;->onAvailable(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$1;->onLost(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$DelegatingDiscoveryListener$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$DelegatingDiscoveryListener$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$DelegatingDiscoveryListener$$ExternalSyntheticLambda2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$DelegatingDiscoveryListener$$ExternalSyntheticLambda3;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$DelegatingDiscoveryListener$$ExternalSyntheticLambda4;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$DelegatingDiscoveryListener;->onDiscoveryStarted(Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$DelegatingDiscoveryListener;->onDiscoveryStopped(Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$DelegatingDiscoveryListener;->onServiceFound(Landroid/net/nsd/NsdServiceInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$DelegatingDiscoveryListener;->onServiceLost(Landroid/net/nsd/NsdServiceInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$DelegatingDiscoveryListener;->onStartDiscoveryFailed(Ljava/lang/String;I)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$DelegatingDiscoveryListener;->onStopDiscoveryFailed(Ljava/lang/String;I)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$TrackedNsdInfo;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$PerNetworkDiscoveryTracker$TrackedNsdInfo;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$RegistrationListener;->onRegistrationFailed(Landroid/net/nsd/NsdServiceInfo;I)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$RegistrationListener;->onServiceRegistered(Landroid/net/nsd/NsdServiceInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$RegistrationListener;->onServiceUnregistered(Landroid/net/nsd/NsdServiceInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$RegistrationListener;->onUnregistrationFailed(Landroid/net/nsd/NsdServiceInfo;I)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ResolveListener;->onResolutionStopped(Landroid/net/nsd/NsdServiceInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ResolveListener;->onResolveFailed(Landroid/net/nsd/NsdServiceInfo;I)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ResolveListener;->onServiceResolved(Landroid/net/nsd/NsdServiceInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ResolveListener;->onStopResolutionFailed(Landroid/net/nsd/NsdServiceInfo;I)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda0;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda10;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda11;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda12;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda13;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda14;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda15;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda16;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda17;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda1;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda2;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda3;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda4;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda5;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda6;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda7;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda8;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler$$ExternalSyntheticLambda9;->run()V,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceHandler;->handleMessage(Landroid/os/Message;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceInfoCallback;->onServiceInfoCallbackRegistrationFailed(I)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceInfoCallback;->onServiceInfoCallbackUnregistered()V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceInfoCallback;->onServiceLost()V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager$ServiceInfoCallback;->onServiceUpdated(Landroid/net/nsd/NsdServiceInfo;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;-><init>(Landroid/content/Context;Landroid/net/nsd/INsdManager;)V,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->ACTION_NSD_STATE_CHANGED:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->DBG:Z,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->DISCOVER_SERVICES:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->DISCOVER_SERVICES_FAILED:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->DISCOVER_SERVICES_STARTED:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->EVENT_NAMES:Landroid/util/SparseArray;,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->EXTRA_NSD_STATE:Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->FAILURE_ALREADY_ACTIVE:I,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->FAILURE_BAD_PARAMETERS:I,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->FAILURE_INTERNAL_ERROR:I,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->FAILURE_MAX_LIMIT:I,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->FAILURE_OPERATION_NOT_RUNNING:I,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->FIRST_LISTENER_KEY:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->NSD_STATE_DISABLED:I,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->NSD_STATE_ENABLED:I,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->PROTOCOL_DNS_SD:I,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->REGISTER_SERVICE:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->REGISTER_SERVICE_FAILED:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->REGISTER_SERVICE_SUCCEEDED:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->RESOLVE_SERVICE:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->RESOLVE_SERVICE_FAILED:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->RESOLVE_SERVICE_SUCCEEDED:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->SERVICE_FOUND:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->SERVICE_LOST:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->STOP_DISCOVERY:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->STOP_DISCOVERY_FAILED:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->STOP_DISCOVERY_SUCCEEDED:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->UNREGISTER_SERVICE:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->UNREGISTER_SERVICE_FAILED:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->UNREGISTER_SERVICE_SUCCEEDED:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->checkListener(Ljava/lang/Object;)V,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->checkProtocol(I)V,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->checkServiceInfo(Landroid/net/nsd/NsdServiceInfo;)V,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->discoverServices(Ljava/lang/String;ILandroid/net/Network;Ljava/util/concurrent/Executor;Landroid/net/nsd/NsdManager$DiscoveryListener;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->discoverServices(Ljava/lang/String;ILandroid/net/NetworkRequest;Ljava/util/concurrent/Executor;Landroid/net/nsd/NsdManager$DiscoveryListener;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->discoverServices(Ljava/lang/String;ILandroid/net/nsd/NsdManager$DiscoveryListener;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->getListenerKey(Ljava/lang/Object;)I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->getNsdServiceInfoType(Landroid/net/nsd/NsdServiceInfo;)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->mContext:Landroid/content/Context;,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->mHandler:Landroid/net/nsd/NsdManager$ServiceHandler;,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->mListenerKey:I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->mListenerMap:Landroid/util/SparseArray;,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->mMapLock:Ljava/lang/Object;,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->mServiceMap:Landroid/util/SparseArray;,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->nameOf(I)Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->nextListenerKey()I,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->registerOffloadEngine(Ljava/lang/String;JJLjava/util/concurrent/Executor;Landroid/net/nsd/OffloadEngine;)V,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->registerService(Landroid/net/nsd/NsdServiceInfo;ILandroid/net/nsd/NsdManager$RegistrationListener;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->registerService(Landroid/net/nsd/NsdServiceInfo;ILjava/util/concurrent/Executor;Landroid/net/nsd/NsdManager$RegistrationListener;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->registerServiceInfoCallback(Landroid/net/nsd/NsdServiceInfo;Ljava/util/concurrent/Executor;Landroid/net/nsd/NsdManager$ServiceInfoCallback;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->removeListener(I)V,lo-prio,max-target-o
Landroid/net/nsd/NsdManager;->resolveService(Landroid/net/nsd/NsdServiceInfo;Landroid/net/nsd/NsdManager$ResolveListener;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->resolveService(Landroid/net/nsd/NsdServiceInfo;Ljava/util/concurrent/Executor;Landroid/net/nsd/NsdManager$ResolveListener;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->stopServiceDiscovery(Landroid/net/nsd/NsdManager$DiscoveryListener;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->stopServiceResolution(Landroid/net/nsd/NsdManager$ResolveListener;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->unregisterOffloadEngine(Landroid/net/nsd/OffloadEngine;)V,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->unregisterService(Landroid/net/nsd/NsdManager$RegistrationListener;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdManager;->unregisterServiceInfoCallback(Landroid/net/nsd/NsdManager$ServiceInfoCallback;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;-><init>()V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;-><init>(Ljava/lang/String;Ljava/lang/String;)V,lo-prio,max-target-o
Landroid/net/nsd/NsdServiceInfo;->CREATOR:Landroid/os/Parcelable$Creator;,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->TAG:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/nsd/NsdServiceInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->getAttributes()Ljava/util/Map;,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->getHost()Ljava/net/InetAddress;,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->getHostAddresses()Ljava/util/List;,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->getNetwork()Landroid/net/Network;,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->getPort()I,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->getServiceName()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->getServiceType()Ljava/lang/String;,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->getTxtRecord()[B,lo-prio,max-target-o
Landroid/net/nsd/NsdServiceInfo;->getTxtRecordSize()I,lo-prio,max-target-o
Landroid/net/nsd/NsdServiceInfo;->mPort:I,lo-prio,max-target-o
Landroid/net/nsd/NsdServiceInfo;->mServiceName:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/nsd/NsdServiceInfo;->mServiceType:Ljava/lang/String;,lo-prio,max-target-o
Landroid/net/nsd/NsdServiceInfo;->mTxtRecord:Landroid/util/ArrayMap;,lo-prio,max-target-o
Landroid/net/nsd/NsdServiceInfo;->removeAttribute(Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->setAttribute(Ljava/lang/String;Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->setAttribute(Ljava/lang/String;[B)V,unsupported
Landroid/net/nsd/NsdServiceInfo;->setHost(Ljava/net/InetAddress;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->setHostAddresses(Ljava/util/List;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->setNetwork(Landroid/net/Network;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->setPort(I)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->setServiceName(Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->setServiceType(Ljava/lang/String;)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/NsdServiceInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/OffloadEngine;->OFFLOAD_CAPABILITY_BYPASS_MULTICAST_LOCK:I,sdk,system-api,test-api
Landroid/net/nsd/OffloadEngine;->OFFLOAD_TYPE_FILTER_QUERIES:I,sdk,system-api,test-api
Landroid/net/nsd/OffloadEngine;->OFFLOAD_TYPE_FILTER_REPLIES:I,sdk,system-api,test-api
Landroid/net/nsd/OffloadEngine;->OFFLOAD_TYPE_REPLY:I,sdk,system-api,test-api
Landroid/net/nsd/OffloadEngine;->onOffloadServiceRemoved(Landroid/net/nsd/OffloadServiceInfo;)V,sdk,system-api,test-api
Landroid/net/nsd/OffloadEngine;->onOffloadServiceUpdated(Landroid/net/nsd/OffloadServiceInfo;)V,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo$Key$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo$Key$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo$Key;-><init>(Ljava/lang/String;Ljava/lang/String;)V,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo$Key;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo$Key;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo$Key;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo$Key;->getServiceName()Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo$Key;->getServiceType()Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo$Key;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo$Key;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo$Key;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo;-><init>(Landroid/net/nsd/OffloadServiceInfo$Key;Ljava/util/List;Ljava/lang/String;[BIJ)V,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo;->CREATOR:Landroid/os/Parcelable$Creator;,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo;->getHostname()Ljava/lang/String;,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo;->getKey()Landroid/net/nsd/OffloadServiceInfo$Key;,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo;->getOffloadPayload()[B,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo;->getOffloadType()J,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo;->getPriority()I,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo;->getSubtypes()Ljava/util/List;,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/nsd/OffloadServiceInfo;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/thread/ActiveOperationalDataset$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/thread/ActiveOperationalDataset$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/thread/ActiveOperationalDataset$SecurityPolicy;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/thread/ActiveOperationalDataset$SecurityPolicy;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/thread/ActiveOperationalDataset$SecurityPolicy;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/thread/ActiveOperationalDataset;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/thread/ActiveOperationalDataset;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/thread/ActiveOperationalDataset;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/thread/ActiveOperationalDataset;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/thread/ActiveOperationalDataset;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/thread/OperationalDatasetTimestamp;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/thread/OperationalDatasetTimestamp;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/thread/OperationalDatasetTimestamp;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/thread/PendingOperationalDataset$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/thread/PendingOperationalDataset$1;->newArray(I)[Ljava/lang/Object;,public-api,sdk,system-api,test-api
Landroid/net/thread/PendingOperationalDataset;->describeContents()I,public-api,sdk,system-api,test-api
Landroid/net/thread/PendingOperationalDataset;->equals(Ljava/lang/Object;)Z,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/thread/PendingOperationalDataset;->hashCode()I,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/thread/PendingOperationalDataset;->toString()Ljava/lang/String;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/thread/PendingOperationalDataset;->writeToParcel(Landroid/os/Parcel;I)V,public-api,sdk,system-api,test-api
Landroid/net/thread/ThreadNetworkManager$$ExternalSyntheticLambda0;->apply(Ljava/lang/Object;)Ljava/lang/Object;,core-platform-api,public-api,sdk,system-api,test-api
Landroid/net/wear/ICompanionDeviceManagerProxy$Default;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/wear/ICompanionDeviceManagerProxy$Stub$Proxy;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/wear/ICompanionDeviceManagerProxy$Stub;->asBinder()Landroid/os/IBinder;,public-api,sdk,system-api,test-api
Landroid/net/wear/ICompanionDeviceManagerProxy$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z,public-api,sdk,system-api,test-api
