Landroid/net/CaptivePortal;-><init>(Landroid/os/IBinder;)V
Landroid/net/CaptivePortal;->APP_RETURN_DISMISSED:I
Landroid/net/CaptivePortal;->APP_RETURN_UNWANTED:I
Landroid/net/CaptivePortal;->APP_RETURN_WANTED_AS_IS:I
Landroid/net/CaptivePortal;->mBinder:Landroid/os/IBinder;
Landroid/net/CaptivePortal;->useNetwork()V
Landroid/net/ConnectivityManager$CallbackHandler;->DBG:Z
Landroid/net/ConnectivityManager$CallbackHandler;->getObject(Landroid/os/Message;Ljava/lang/Class;)Ljava/lang/Object;
Landroid/net/ConnectivityManager$CallbackHandler;->TAG:Ljava/lang/String;
Landroid/net/ConnectivityManager$Errors;->TOO_MANY_REQUESTS:I
Landroid/net/ConnectivityManager$LegacyRequest;-><init>()V
Landroid/net/ConnectivityManager$LegacyRequest;->clearDnsBinding()V
Landroid/net/ConnectivityManager$LegacyRequest;->currentNetwork:Landroid/net/Network;
Landroid/net/ConnectivityManager$LegacyRequest;->delay:I
Landroid/net/ConnectivityManager$LegacyRequest;->expireSequenceNumber:I
Landroid/net/ConnectivityManager$LegacyRequest;->networkCallback:Landroid/net/ConnectivityManager$NetworkCallback;
Landroid/net/ConnectivityManager$LegacyRequest;->networkCapabilities:Landroid/net/NetworkCapabilities;
Landroid/net/ConnectivityManager$LegacyRequest;->networkRequest:Landroid/net/NetworkRequest;
Landroid/net/ConnectivityManager$NetworkCallback;->networkRequest:Landroid/net/NetworkRequest;
Landroid/net/ConnectivityManager$NetworkCallback;->onAvailable(Landroid/net/Network;Landroid/net/NetworkCapabilities;Landroid/net/LinkProperties;)V
Landroid/net/ConnectivityManager$NetworkCallback;->onNetworkResumed(Landroid/net/Network;)V
Landroid/net/ConnectivityManager$NetworkCallback;->onNetworkSuspended(Landroid/net/Network;)V
Landroid/net/ConnectivityManager$NetworkCallback;->onPreCheck(Landroid/net/Network;)V
Landroid/net/ConnectivityManager$PacketKeepalive;->BINDER_DIED:I
Landroid/net/ConnectivityManager$PacketKeepalive;->ERROR_HARDWARE_ERROR:I
Landroid/net/ConnectivityManager$PacketKeepalive;->ERROR_HARDWARE_UNSUPPORTED:I
Landroid/net/ConnectivityManager$PacketKeepalive;->ERROR_INVALID_INTERVAL:I
Landroid/net/ConnectivityManager$PacketKeepalive;->ERROR_INVALID_IP_ADDRESS:I
Landroid/net/ConnectivityManager$PacketKeepalive;->ERROR_INVALID_LENGTH:I
Landroid/net/ConnectivityManager$PacketKeepalive;->ERROR_INVALID_NETWORK:I
Landroid/net/ConnectivityManager$PacketKeepalive;->ERROR_INVALID_PORT:I
Landroid/net/ConnectivityManager$PacketKeepalive;->mCallback:Landroid/net/ConnectivityManager$PacketKeepaliveCallback;
Landroid/net/ConnectivityManager$PacketKeepalive;->MIN_INTERVAL:I
Landroid/net/ConnectivityManager$PacketKeepalive;->mLooper:Landroid/os/Looper;
Landroid/net/ConnectivityManager$PacketKeepalive;->mMessenger:Landroid/os/Messenger;
Landroid/net/ConnectivityManager$PacketKeepalive;->mNetwork:Landroid/net/Network;
Landroid/net/ConnectivityManager$PacketKeepalive;->mSlot:Ljava/lang/Integer;
Landroid/net/ConnectivityManager$PacketKeepalive;->NATT_PORT:I
Landroid/net/ConnectivityManager$PacketKeepalive;->NO_KEEPALIVE:I
Landroid/net/ConnectivityManager$PacketKeepalive;->stopLooper()V
Landroid/net/ConnectivityManager$PacketKeepalive;->SUCCESS:I
Landroid/net/ConnectivityManager$PacketKeepalive;->TAG:Ljava/lang/String;
Landroid/net/ConnectivityManager$TooManyRequestsException;-><init>()V
Landroid/net/ConnectivityManager;-><init>(Landroid/content/Context;Landroid/net/IConnectivityManager;)V
Landroid/net/ConnectivityManager;->ACTION_CAPTIVE_PORTAL_TEST_COMPLETED:Ljava/lang/String;
Landroid/net/ConnectivityManager;->ACTION_DATA_ACTIVITY_CHANGE:Ljava/lang/String;
Landroid/net/ConnectivityManager;->ACTION_PROMPT_LOST_VALIDATION:Ljava/lang/String;
Landroid/net/ConnectivityManager;->ACTION_PROMPT_UNVALIDATED:Ljava/lang/String;
Landroid/net/ConnectivityManager;->ALREADY_UNREGISTERED:Landroid/net/NetworkRequest;
Landroid/net/ConnectivityManager;->BASE:I
Landroid/net/ConnectivityManager;->CALLBACK_AVAILABLE:I
Landroid/net/ConnectivityManager;->CALLBACK_CAP_CHANGED:I
Landroid/net/ConnectivityManager;->CALLBACK_IP_CHANGED:I
Landroid/net/ConnectivityManager;->CALLBACK_LOSING:I
Landroid/net/ConnectivityManager;->CALLBACK_LOST:I
Landroid/net/ConnectivityManager;->CALLBACK_PRECHECK:I
Landroid/net/ConnectivityManager;->CALLBACK_RESUMED:I
Landroid/net/ConnectivityManager;->CALLBACK_SUSPENDED:I
Landroid/net/ConnectivityManager;->CALLBACK_UNAVAIL:I
Landroid/net/ConnectivityManager;->checkCallbackNotNull(Landroid/net/ConnectivityManager$NetworkCallback;)V
Landroid/net/ConnectivityManager;->checkLegacyRoutingApiAccess()V
Landroid/net/ConnectivityManager;->checkMobileProvisioning(I)I
Landroid/net/ConnectivityManager;->checkPendingIntentNotNull(Landroid/app/PendingIntent;)V
Landroid/net/ConnectivityManager;->checkTimeout(I)V
Landroid/net/ConnectivityManager;->CONNECTIVITY_ACTION_SUPL:Ljava/lang/String;
Landroid/net/ConnectivityManager;->convertServiceException(Landroid/os/ServiceSpecificException;)Ljava/lang/RuntimeException;
Landroid/net/ConnectivityManager;->enforceChangePermission(Landroid/content/Context;)V
Landroid/net/ConnectivityManager;->enforceTetherChangePermission(Landroid/content/Context;Ljava/lang/String;)V
Landroid/net/ConnectivityManager;->expireRequest(Landroid/net/NetworkCapabilities;I)V
Landroid/net/ConnectivityManager;->EXPIRE_LEGACY_REQUEST:I
Landroid/net/ConnectivityManager;->EXTRA_ACTIVE_LOCAL_ONLY:Ljava/lang/String;
Landroid/net/ConnectivityManager;->EXTRA_ADD_TETHER_TYPE:Ljava/lang/String;
Landroid/net/ConnectivityManager;->EXTRA_CAPTIVE_PORTAL_PROBE_SPEC:Ljava/lang/String;
Landroid/net/ConnectivityManager;->EXTRA_CAPTIVE_PORTAL_USER_AGENT:Ljava/lang/String;
Landroid/net/ConnectivityManager;->EXTRA_DEVICE_TYPE:Ljava/lang/String;
Landroid/net/ConnectivityManager;->EXTRA_INET_CONDITION:Ljava/lang/String;
Landroid/net/ConnectivityManager;->EXTRA_IS_ACTIVE:Ljava/lang/String;
Landroid/net/ConnectivityManager;->EXTRA_IS_CAPTIVE_PORTAL:Ljava/lang/String;
Landroid/net/ConnectivityManager;->EXTRA_PROVISION_CALLBACK:Ljava/lang/String;
Landroid/net/ConnectivityManager;->EXTRA_REALTIME_NS:Ljava/lang/String;
Landroid/net/ConnectivityManager;->EXTRA_REM_TETHER_TYPE:Ljava/lang/String;
Landroid/net/ConnectivityManager;->EXTRA_RUN_PROVISION:Ljava/lang/String;
Landroid/net/ConnectivityManager;->EXTRA_SET_ALARM:Ljava/lang/String;
Landroid/net/ConnectivityManager;->factoryReset()V
Landroid/net/ConnectivityManager;->findRequestForFeature(Landroid/net/NetworkCapabilities;)Landroid/net/NetworkRequest;
Landroid/net/ConnectivityManager;->getActiveNetworkForUid(I)Landroid/net/Network;
Landroid/net/ConnectivityManager;->getActiveNetworkForUid(IZ)Landroid/net/Network;
Landroid/net/ConnectivityManager;->getActiveNetworkInfoForUid(IZ)Landroid/net/NetworkInfo;
Landroid/net/ConnectivityManager;->getAlwaysOnVpnPackageForUser(I)Ljava/lang/String;
Landroid/net/ConnectivityManager;->getCallbackName(I)Ljava/lang/String;
Landroid/net/ConnectivityManager;->getDefaultHandler()Landroid/net/ConnectivityManager$CallbackHandler;
Landroid/net/ConnectivityManager;->getGlobalProxy()Landroid/net/ProxyInfo;
Landroid/net/ConnectivityManager;->getInstanceOrNull()Landroid/net/ConnectivityManager;
Landroid/net/ConnectivityManager;->getMobileProvisioningUrl()Ljava/lang/String;
Landroid/net/ConnectivityManager;->getNetworkInfoForUid(Landroid/net/Network;IZ)Landroid/net/NetworkInfo;
Landroid/net/ConnectivityManager;->getNetworkManagementService()Landroid/os/INetworkManagementService;
Landroid/net/ConnectivityManager;->getNetworkPolicyManager()Landroid/net/INetworkPolicyManager;
Landroid/net/ConnectivityManager;->getProxyForNetwork(Landroid/net/Network;)Landroid/net/ProxyInfo;
Landroid/net/ConnectivityManager;->getTetheredDhcpRanges()[Ljava/lang/String;
Landroid/net/ConnectivityManager;->inferLegacyTypeForNetworkCapabilities(Landroid/net/NetworkCapabilities;)I
Landroid/net/ConnectivityManager;->isAlwaysOnVpnPackageSupportedForUser(ILjava/lang/String;)Z
Landroid/net/ConnectivityManager;->isNetworkTypeWifi(I)Z
Landroid/net/ConnectivityManager;->legacyTypeForNetworkCapabilities(Landroid/net/NetworkCapabilities;)I
Landroid/net/ConnectivityManager;->LISTEN:I
Landroid/net/ConnectivityManager;->MAX_NETWORK_TYPE:I
Landroid/net/ConnectivityManager;->MAX_RADIO_TYPE:I
Landroid/net/ConnectivityManager;->mContext:Landroid/content/Context;
Landroid/net/ConnectivityManager;->MIN_NETWORK_TYPE:I
Landroid/net/ConnectivityManager;->mNetworkActivityListeners:Landroid/util/ArrayMap;
Landroid/net/ConnectivityManager;->mNMService:Landroid/os/INetworkManagementService;
Landroid/net/ConnectivityManager;->mNPManager:Landroid/net/INetworkPolicyManager;
Landroid/net/ConnectivityManager;->MULTIPATH_PREFERENCE_UNMETERED:I
Landroid/net/ConnectivityManager;->NETID_UNSET:I
Landroid/net/ConnectivityManager;->networkCapabilitiesForType(I)Landroid/net/NetworkCapabilities;
Landroid/net/ConnectivityManager;->PRIVATE_DNS_DEFAULT_MODE_FALLBACK:Ljava/lang/String;
Landroid/net/ConnectivityManager;->PRIVATE_DNS_MODE_OFF:Ljava/lang/String;
Landroid/net/ConnectivityManager;->PRIVATE_DNS_MODE_OPPORTUNISTIC:Ljava/lang/String;
Landroid/net/ConnectivityManager;->PRIVATE_DNS_MODE_PROVIDER_HOSTNAME:Ljava/lang/String;
Landroid/net/ConnectivityManager;->registerNetworkAgent(Landroid/os/Messenger;Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;ILandroid/net/NetworkMisc;)I
Landroid/net/ConnectivityManager;->renewRequestLocked(Landroid/net/ConnectivityManager$LegacyRequest;)V
Landroid/net/ConnectivityManager;->reportInetCondition(II)V
Landroid/net/ConnectivityManager;->REQUEST:I
Landroid/net/ConnectivityManager;->requestNetwork(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;IILandroid/os/Handler;)V
Landroid/net/ConnectivityManager;->REQUEST_ID_UNSET:I
Landroid/net/ConnectivityManager;->sCallbackHandler:Landroid/net/ConnectivityManager$CallbackHandler;
Landroid/net/ConnectivityManager;->sCallbacks:Ljava/util/HashMap;
Landroid/net/ConnectivityManager;->sendExpireMsgForFeature(Landroid/net/NetworkCapabilities;II)V
Landroid/net/ConnectivityManager;->sendRequestForNetwork(Landroid/net/NetworkCapabilities;Landroid/net/ConnectivityManager$NetworkCallback;IIILandroid/net/ConnectivityManager$CallbackHandler;)Landroid/net/NetworkRequest;
Landroid/net/ConnectivityManager;->setAcceptUnvalidated(Landroid/net/Network;ZZ)V
Landroid/net/ConnectivityManager;->setAlwaysOnVpnPackageForUser(ILjava/lang/String;Z)Z
Landroid/net/ConnectivityManager;->setAvoidUnvalidated(Landroid/net/Network;)V
Landroid/net/ConnectivityManager;->setGlobalProxy(Landroid/net/ProxyInfo;)V
Landroid/net/ConnectivityManager;->setProvisioningNotificationVisible(ZILjava/lang/String;)V
Landroid/net/ConnectivityManager;->sInstance:Landroid/net/ConnectivityManager;
Landroid/net/ConnectivityManager;->sLegacyTypeToCapability:Landroid/util/SparseIntArray;
Landroid/net/ConnectivityManager;->sLegacyTypeToTransport:Landroid/util/SparseIntArray;
Landroid/net/ConnectivityManager;->startCaptivePortalApp(Landroid/net/Network;)V
Landroid/net/ConnectivityManager;->TAG:Ljava/lang/String;
Landroid/net/ConnectivityManager;->TETHERING_INVALID:I
Landroid/net/ConnectivityManager;->TETHER_ERROR_DISABLE_NAT_ERROR:I
Landroid/net/ConnectivityManager;->TETHER_ERROR_ENABLE_NAT_ERROR:I
Landroid/net/ConnectivityManager;->TETHER_ERROR_IFACE_CFG_ERROR:I
Landroid/net/ConnectivityManager;->TETHER_ERROR_MASTER_ERROR:I
Landroid/net/ConnectivityManager;->TETHER_ERROR_NO_ERROR:I
Landroid/net/ConnectivityManager;->TETHER_ERROR_PROVISION_FAILED:I
Landroid/net/ConnectivityManager;->TETHER_ERROR_SERVICE_UNAVAIL:I
Landroid/net/ConnectivityManager;->TETHER_ERROR_TETHER_IFACE_ERROR:I
Landroid/net/ConnectivityManager;->TETHER_ERROR_UNAVAIL_IFACE:I
Landroid/net/ConnectivityManager;->TETHER_ERROR_UNKNOWN_IFACE:I
Landroid/net/ConnectivityManager;->TETHER_ERROR_UNSUPPORTED:I
Landroid/net/ConnectivityManager;->TETHER_ERROR_UNTETHER_IFACE_ERROR:I
Landroid/net/ConnectivityManager;->unsupportedStartingFrom(I)V
Landroid/net/ConnectivityManager;->updateLockdownVpn()Z
Landroid/net/ConnectivityThread$Singleton;-><init>()V
Landroid/net/ConnectivityThread$Singleton;->INSTANCE:Landroid/net/ConnectivityThread;
Landroid/net/ConnectivityThread;-><init>()V
Landroid/net/ConnectivityThread;->createInstance()Landroid/net/ConnectivityThread;
Landroid/net/ConnectivityThread;->get()Landroid/net/ConnectivityThread;
Landroid/net/ConnectivityThread;->getInstanceLooper()Landroid/os/Looper;
Landroid/net/DhcpInfo;-><init>(Landroid/net/DhcpInfo;)V
Landroid/net/DhcpInfo;->CREATOR:Landroid/os/Parcelable$Creator;
Landroid/net/DhcpInfo;->putAddress(Ljava/lang/StringBuffer;I)V
Landroid/net/ICaptivePortal$Stub$Proxy;-><init>(Landroid/os/IBinder;)V
Landroid/net/ICaptivePortal$Stub$Proxy;->appResponse(I)V
Landroid/net/ICaptivePortal$Stub$Proxy;->getInterfaceDescriptor()Ljava/lang/String;
Landroid/net/ICaptivePortal$Stub$Proxy;->mRemote:Landroid/os/IBinder;
Landroid/net/ICaptivePortal$Stub;-><init>()V
Landroid/net/ICaptivePortal$Stub;->asInterface(Landroid/os/IBinder;)Landroid/net/ICaptivePortal;
Landroid/net/ICaptivePortal$Stub;->DESCRIPTOR:Ljava/lang/String;
Landroid/net/ICaptivePortal$Stub;->TRANSACTION_appResponse:I
Landroid/net/ICaptivePortal;->appResponse(I)V
Landroid/net/IConnectivityManager$Stub$Proxy;->addVpnAddress(Ljava/lang/String;I)Z
Landroid/net/IConnectivityManager$Stub$Proxy;->checkMobileProvisioning(I)I
Landroid/net/IConnectivityManager$Stub$Proxy;->establishVpn(Lcom/android/internal/net/VpnConfig;)Landroid/os/ParcelFileDescriptor;
Landroid/net/IConnectivityManager$Stub$Proxy;->factoryReset()V
Landroid/net/IConnectivityManager$Stub$Proxy;->getActiveNetwork()Landroid/net/Network;
Landroid/net/IConnectivityManager$Stub$Proxy;->getActiveNetworkForUid(IZ)Landroid/net/Network;
Landroid/net/IConnectivityManager$Stub$Proxy;->getActiveNetworkInfoForUid(IZ)Landroid/net/NetworkInfo;
Landroid/net/IConnectivityManager$Stub$Proxy;->getActiveNetworkQuotaInfo()Landroid/net/NetworkQuotaInfo;
Landroid/net/IConnectivityManager$Stub$Proxy;->getAllNetworkState()[Landroid/net/NetworkState;
Landroid/net/IConnectivityManager$Stub$Proxy;->getAllVpnInfo()[Lcom/android/internal/net/VpnInfo;
Landroid/net/IConnectivityManager$Stub$Proxy;->getAlwaysOnVpnPackage(I)Ljava/lang/String;
Landroid/net/IConnectivityManager$Stub$Proxy;->getCaptivePortalServerUrl()Ljava/lang/String;
Landroid/net/IConnectivityManager$Stub$Proxy;->getDefaultNetworkCapabilitiesForUser(I)[Landroid/net/NetworkCapabilities;
Landroid/net/IConnectivityManager$Stub$Proxy;->getGlobalProxy()Landroid/net/ProxyInfo;
Landroid/net/IConnectivityManager$Stub$Proxy;->getInterfaceDescriptor()Ljava/lang/String;
Landroid/net/IConnectivityManager$Stub$Proxy;->getLastTetherError(Ljava/lang/String;)I
Landroid/net/IConnectivityManager$Stub$Proxy;->getLegacyVpnInfo(I)Lcom/android/internal/net/LegacyVpnInfo;
Landroid/net/IConnectivityManager$Stub$Proxy;->getLinkProperties(Landroid/net/Network;)Landroid/net/LinkProperties;
Landroid/net/IConnectivityManager$Stub$Proxy;->getLinkPropertiesForType(I)Landroid/net/LinkProperties;
Landroid/net/IConnectivityManager$Stub$Proxy;->getMobileProvisioningUrl()Ljava/lang/String;
Landroid/net/IConnectivityManager$Stub$Proxy;->getMultipathPreference(Landroid/net/Network;)I
Landroid/net/IConnectivityManager$Stub$Proxy;->getNetworkCapabilities(Landroid/net/Network;)Landroid/net/NetworkCapabilities;
Landroid/net/IConnectivityManager$Stub$Proxy;->getNetworkForType(I)Landroid/net/Network;
Landroid/net/IConnectivityManager$Stub$Proxy;->getNetworkInfo(I)Landroid/net/NetworkInfo;
Landroid/net/IConnectivityManager$Stub$Proxy;->getNetworkInfoForUid(Landroid/net/Network;IZ)Landroid/net/NetworkInfo;
Landroid/net/IConnectivityManager$Stub$Proxy;->getNetworkWatchlistConfigHash()[B
Landroid/net/IConnectivityManager$Stub$Proxy;->getProxyForNetwork(Landroid/net/Network;)Landroid/net/ProxyInfo;
Landroid/net/IConnectivityManager$Stub$Proxy;->getRestoreDefaultNetworkDelay(I)I
Landroid/net/IConnectivityManager$Stub$Proxy;->getTetherableBluetoothRegexs()[Ljava/lang/String;
Landroid/net/IConnectivityManager$Stub$Proxy;->getTetherableWifiRegexs()[Ljava/lang/String;
Landroid/net/IConnectivityManager$Stub$Proxy;->getTetheredDhcpRanges()[Ljava/lang/String;
Landroid/net/IConnectivityManager$Stub$Proxy;->getTetheringErroredIfaces()[Ljava/lang/String;
Landroid/net/IConnectivityManager$Stub$Proxy;->getVpnConfig(I)Lcom/android/internal/net/VpnConfig;
Landroid/net/IConnectivityManager$Stub$Proxy;->isActiveNetworkMetered()Z
Landroid/net/IConnectivityManager$Stub$Proxy;->isAlwaysOnVpnPackageSupported(ILjava/lang/String;)Z
Landroid/net/IConnectivityManager$Stub$Proxy;->isNetworkSupported(I)Z
Landroid/net/IConnectivityManager$Stub$Proxy;->isTetheringSupported(Ljava/lang/String;)Z
Landroid/net/IConnectivityManager$Stub$Proxy;->listenForNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;Landroid/os/IBinder;)Landroid/net/NetworkRequest;
Landroid/net/IConnectivityManager$Stub$Proxy;->pendingListenForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;)V
Landroid/net/IConnectivityManager$Stub$Proxy;->pendingRequestForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;)Landroid/net/NetworkRequest;
Landroid/net/IConnectivityManager$Stub$Proxy;->prepareVpn(Ljava/lang/String;Ljava/lang/String;I)Z
Landroid/net/IConnectivityManager$Stub$Proxy;->registerNetworkAgent(Landroid/os/Messenger;Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;ILandroid/net/NetworkMisc;)I
Landroid/net/IConnectivityManager$Stub$Proxy;->registerNetworkFactory(Landroid/os/Messenger;Ljava/lang/String;)V
Landroid/net/IConnectivityManager$Stub$Proxy;->releaseNetworkRequest(Landroid/net/NetworkRequest;)V
Landroid/net/IConnectivityManager$Stub$Proxy;->releasePendingNetworkRequest(Landroid/app/PendingIntent;)V
Landroid/net/IConnectivityManager$Stub$Proxy;->removeVpnAddress(Ljava/lang/String;I)Z
Landroid/net/IConnectivityManager$Stub$Proxy;->reportInetCondition(II)V
Landroid/net/IConnectivityManager$Stub$Proxy;->reportNetworkConnectivity(Landroid/net/Network;Z)V
Landroid/net/IConnectivityManager$Stub$Proxy;->requestBandwidthUpdate(Landroid/net/Network;)Z
Landroid/net/IConnectivityManager$Stub$Proxy;->requestNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;ILandroid/os/IBinder;I)Landroid/net/NetworkRequest;
Landroid/net/IConnectivityManager$Stub$Proxy;->requestRouteToHostAddress(I[B)Z
Landroid/net/IConnectivityManager$Stub$Proxy;->setAcceptUnvalidated(Landroid/net/Network;ZZ)V
Landroid/net/IConnectivityManager$Stub$Proxy;->setAirplaneMode(Z)V
Landroid/net/IConnectivityManager$Stub$Proxy;->setAlwaysOnVpnPackage(ILjava/lang/String;Z)Z
Landroid/net/IConnectivityManager$Stub$Proxy;->setAvoidUnvalidated(Landroid/net/Network;)V
Landroid/net/IConnectivityManager$Stub$Proxy;->setGlobalProxy(Landroid/net/ProxyInfo;)V
Landroid/net/IConnectivityManager$Stub$Proxy;->setProvisioningNotificationVisible(ZILjava/lang/String;)V
Landroid/net/IConnectivityManager$Stub$Proxy;->setUnderlyingNetworksForVpn([Landroid/net/Network;)Z
Landroid/net/IConnectivityManager$Stub$Proxy;->setUsbTethering(ZLjava/lang/String;)I
Landroid/net/IConnectivityManager$Stub$Proxy;->setVpnPackageAuthorization(Ljava/lang/String;IZ)V
Landroid/net/IConnectivityManager$Stub$Proxy;->startCaptivePortalApp(Landroid/net/Network;)V
Landroid/net/IConnectivityManager$Stub$Proxy;->startLegacyVpn(Lcom/android/internal/net/VpnProfile;)V
Landroid/net/IConnectivityManager$Stub$Proxy;->startNattKeepalive(Landroid/net/Network;ILandroid/os/Messenger;Landroid/os/IBinder;Ljava/lang/String;ILjava/lang/String;)V
Landroid/net/IConnectivityManager$Stub$Proxy;->startTethering(ILandroid/os/ResultReceiver;ZLjava/lang/String;)V
Landroid/net/IConnectivityManager$Stub$Proxy;->stopKeepalive(Landroid/net/Network;I)V
Landroid/net/IConnectivityManager$Stub$Proxy;->stopTethering(ILjava/lang/String;)V
Landroid/net/IConnectivityManager$Stub$Proxy;->tether(Ljava/lang/String;Ljava/lang/String;)I
Landroid/net/IConnectivityManager$Stub$Proxy;->unregisterNetworkFactory(Landroid/os/Messenger;)V
Landroid/net/IConnectivityManager$Stub$Proxy;->untether(Ljava/lang/String;Ljava/lang/String;)I
Landroid/net/IConnectivityManager$Stub$Proxy;->updateLockdownVpn()Z
Landroid/net/IConnectivityManager$Stub;->DESCRIPTOR:Ljava/lang/String;
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_addVpnAddress:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_checkMobileProvisioning:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_establishVpn:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_factoryReset:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getActiveLinkProperties:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getActiveNetwork:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getActiveNetworkForUid:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getActiveNetworkInfo:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getActiveNetworkInfoForUid:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getActiveNetworkQuotaInfo:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getAllNetworkInfo:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getAllNetworks:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getAllNetworkState:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getAllVpnInfo:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getAlwaysOnVpnPackage:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getCaptivePortalServerUrl:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getDefaultNetworkCapabilitiesForUser:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getGlobalProxy:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getLastTetherError:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getLegacyVpnInfo:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getLinkProperties:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getLinkPropertiesForType:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getMobileProvisioningUrl:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getMultipathPreference:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getNetworkCapabilities:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getNetworkForType:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getNetworkInfo:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getNetworkInfoForUid:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getNetworkWatchlistConfigHash:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getProxyForNetwork:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getRestoreDefaultNetworkDelay:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getTetherableBluetoothRegexs:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getTetherableIfaces:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getTetherableUsbRegexs:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getTetherableWifiRegexs:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getTetheredDhcpRanges:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getTetheredIfaces:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getTetheringErroredIfaces:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_getVpnConfig:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_isActiveNetworkMetered:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_isAlwaysOnVpnPackageSupported:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_isNetworkSupported:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_isTetheringSupported:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_listenForNetwork:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_pendingListenForNetwork:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_pendingRequestForNetwork:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_prepareVpn:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_registerNetworkAgent:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_registerNetworkFactory:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_releaseNetworkRequest:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_releasePendingNetworkRequest:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_removeVpnAddress:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_reportInetCondition:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_reportNetworkConnectivity:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_requestBandwidthUpdate:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_requestNetwork:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_requestRouteToHostAddress:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setAcceptUnvalidated:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setAirplaneMode:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setAlwaysOnVpnPackage:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setAvoidUnvalidated:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setGlobalProxy:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setProvisioningNotificationVisible:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setUnderlyingNetworksForVpn:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setUsbTethering:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_setVpnPackageAuthorization:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_startCaptivePortalApp:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_startLegacyVpn:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_startNattKeepalive:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_startTethering:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_stopKeepalive:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_stopTethering:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_tether:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_unregisterNetworkFactory:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_untether:I
Landroid/net/IConnectivityManager$Stub;->TRANSACTION_updateLockdownVpn:I
Landroid/net/IConnectivityManager;->addVpnAddress(Ljava/lang/String;I)Z
Landroid/net/IConnectivityManager;->checkMobileProvisioning(I)I
Landroid/net/IConnectivityManager;->establishVpn(Lcom/android/internal/net/VpnConfig;)Landroid/os/ParcelFileDescriptor;
Landroid/net/IConnectivityManager;->factoryReset()V
Landroid/net/IConnectivityManager;->getActiveNetwork()Landroid/net/Network;
Landroid/net/IConnectivityManager;->getActiveNetworkForUid(IZ)Landroid/net/Network;
Landroid/net/IConnectivityManager;->getActiveNetworkInfoForUid(IZ)Landroid/net/NetworkInfo;
Landroid/net/IConnectivityManager;->getActiveNetworkQuotaInfo()Landroid/net/NetworkQuotaInfo;
Landroid/net/IConnectivityManager;->getAllNetworks()[Landroid/net/Network;
Landroid/net/IConnectivityManager;->getAllVpnInfo()[Lcom/android/internal/net/VpnInfo;
Landroid/net/IConnectivityManager;->getAlwaysOnVpnPackage(I)Ljava/lang/String;
Landroid/net/IConnectivityManager;->getCaptivePortalServerUrl()Ljava/lang/String;
Landroid/net/IConnectivityManager;->getDefaultNetworkCapabilitiesForUser(I)[Landroid/net/NetworkCapabilities;
Landroid/net/IConnectivityManager;->getGlobalProxy()Landroid/net/ProxyInfo;
Landroid/net/IConnectivityManager;->getLegacyVpnInfo(I)Lcom/android/internal/net/LegacyVpnInfo;
Landroid/net/IConnectivityManager;->getLinkProperties(Landroid/net/Network;)Landroid/net/LinkProperties;
Landroid/net/IConnectivityManager;->getLinkPropertiesForType(I)Landroid/net/LinkProperties;
Landroid/net/IConnectivityManager;->getMobileProvisioningUrl()Ljava/lang/String;
Landroid/net/IConnectivityManager;->getMultipathPreference(Landroid/net/Network;)I
Landroid/net/IConnectivityManager;->getNetworkCapabilities(Landroid/net/Network;)Landroid/net/NetworkCapabilities;
Landroid/net/IConnectivityManager;->getNetworkForType(I)Landroid/net/Network;
Landroid/net/IConnectivityManager;->getNetworkInfoForUid(Landroid/net/Network;IZ)Landroid/net/NetworkInfo;
Landroid/net/IConnectivityManager;->getNetworkWatchlistConfigHash()[B
Landroid/net/IConnectivityManager;->getProxyForNetwork(Landroid/net/Network;)Landroid/net/ProxyInfo;
Landroid/net/IConnectivityManager;->getRestoreDefaultNetworkDelay(I)I
Landroid/net/IConnectivityManager;->getTetherableBluetoothRegexs()[Ljava/lang/String;
Landroid/net/IConnectivityManager;->getTetheredDhcpRanges()[Ljava/lang/String;
Landroid/net/IConnectivityManager;->getVpnConfig(I)Lcom/android/internal/net/VpnConfig;
Landroid/net/IConnectivityManager;->isActiveNetworkMetered()Z
Landroid/net/IConnectivityManager;->isAlwaysOnVpnPackageSupported(ILjava/lang/String;)Z
Landroid/net/IConnectivityManager;->isNetworkSupported(I)Z
Landroid/net/IConnectivityManager;->isTetheringSupported(Ljava/lang/String;)Z
Landroid/net/IConnectivityManager;->listenForNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;Landroid/os/IBinder;)Landroid/net/NetworkRequest;
Landroid/net/IConnectivityManager;->pendingListenForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;)V
Landroid/net/IConnectivityManager;->pendingRequestForNetwork(Landroid/net/NetworkCapabilities;Landroid/app/PendingIntent;)Landroid/net/NetworkRequest;
Landroid/net/IConnectivityManager;->prepareVpn(Ljava/lang/String;Ljava/lang/String;I)Z
Landroid/net/IConnectivityManager;->registerNetworkAgent(Landroid/os/Messenger;Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;ILandroid/net/NetworkMisc;)I
Landroid/net/IConnectivityManager;->registerNetworkFactory(Landroid/os/Messenger;Ljava/lang/String;)V
Landroid/net/IConnectivityManager;->releaseNetworkRequest(Landroid/net/NetworkRequest;)V
Landroid/net/IConnectivityManager;->releasePendingNetworkRequest(Landroid/app/PendingIntent;)V
Landroid/net/IConnectivityManager;->removeVpnAddress(Ljava/lang/String;I)Z
Landroid/net/IConnectivityManager;->reportNetworkConnectivity(Landroid/net/Network;Z)V
Landroid/net/IConnectivityManager;->requestBandwidthUpdate(Landroid/net/Network;)Z
Landroid/net/IConnectivityManager;->requestNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;ILandroid/os/IBinder;I)Landroid/net/NetworkRequest;
Landroid/net/IConnectivityManager;->requestRouteToHostAddress(I[B)Z
Landroid/net/IConnectivityManager;->setAcceptUnvalidated(Landroid/net/Network;ZZ)V
Landroid/net/IConnectivityManager;->setAlwaysOnVpnPackage(ILjava/lang/String;Z)Z
Landroid/net/IConnectivityManager;->setAvoidUnvalidated(Landroid/net/Network;)V
Landroid/net/IConnectivityManager;->setGlobalProxy(Landroid/net/ProxyInfo;)V
Landroid/net/IConnectivityManager;->setProvisioningNotificationVisible(ZILjava/lang/String;)V
Landroid/net/IConnectivityManager;->setUnderlyingNetworksForVpn([Landroid/net/Network;)Z
Landroid/net/IConnectivityManager;->setUsbTethering(ZLjava/lang/String;)I
Landroid/net/IConnectivityManager;->setVpnPackageAuthorization(Ljava/lang/String;IZ)V
Landroid/net/IConnectivityManager;->startCaptivePortalApp(Landroid/net/Network;)V
Landroid/net/IConnectivityManager;->startNattKeepalive(Landroid/net/Network;ILandroid/os/Messenger;Landroid/os/IBinder;Ljava/lang/String;ILjava/lang/String;)V
Landroid/net/IConnectivityManager;->startTethering(ILandroid/os/ResultReceiver;ZLjava/lang/String;)V
Landroid/net/IConnectivityManager;->stopKeepalive(Landroid/net/Network;I)V
Landroid/net/IConnectivityManager;->stopTethering(ILjava/lang/String;)V
Landroid/net/IConnectivityManager;->tether(Ljava/lang/String;Ljava/lang/String;)I
Landroid/net/IConnectivityManager;->unregisterNetworkFactory(Landroid/os/Messenger;)V
Landroid/net/IConnectivityManager;->untether(Ljava/lang/String;Ljava/lang/String;)I
Landroid/net/IConnectivityManager;->updateLockdownVpn()Z
Landroid/net/IpConfiguration$IpAssignment;->DHCP:Landroid/net/IpConfiguration$IpAssignment;
Landroid/net/IpConfiguration$IpAssignment;->UNASSIGNED:Landroid/net/IpConfiguration$IpAssignment;
Landroid/net/IpConfiguration$IpAssignment;->valueOf(Ljava/lang/String;)Landroid/net/IpConfiguration$IpAssignment;
Landroid/net/IpConfiguration$IpAssignment;->values()[Landroid/net/IpConfiguration$IpAssignment;
Landroid/net/IpConfiguration$ProxySettings;->PAC:Landroid/net/IpConfiguration$ProxySettings;
Landroid/net/IpConfiguration$ProxySettings;->STATIC:Landroid/net/IpConfiguration$ProxySettings;
Landroid/net/IpConfiguration$ProxySettings;->UNASSIGNED:Landroid/net/IpConfiguration$ProxySettings;
Landroid/net/IpConfiguration$ProxySettings;->valueOf(Ljava/lang/String;)Landroid/net/IpConfiguration$ProxySettings;
Landroid/net/IpConfiguration$ProxySettings;->values()[Landroid/net/IpConfiguration$ProxySettings;
Landroid/net/IpConfiguration;-><init>()V
Landroid/net/IpConfiguration;-><init>(Landroid/net/IpConfiguration;)V
Landroid/net/IpConfiguration;->CREATOR:Landroid/os/Parcelable$Creator;
Landroid/net/IpConfiguration;->getHttpProxy()Landroid/net/ProxyInfo;
Landroid/net/IpConfiguration;->getIpAssignment()Landroid/net/IpConfiguration$IpAssignment;
Landroid/net/IpConfiguration;->getProxySettings()Landroid/net/IpConfiguration$ProxySettings;
Landroid/net/IpConfiguration;->getStaticIpConfiguration()Landroid/net/StaticIpConfiguration;
Landroid/net/IpConfiguration;->init(Landroid/net/IpConfiguration$IpAssignment;Landroid/net/IpConfiguration$ProxySettings;Landroid/net/StaticIpConfiguration;Landroid/net/ProxyInfo;)V
Landroid/net/IpConfiguration;->ipAssignment:Landroid/net/IpConfiguration$IpAssignment;
Landroid/net/IpConfiguration;->proxySettings:Landroid/net/IpConfiguration$ProxySettings;
Landroid/net/IpConfiguration;->setHttpProxy(Landroid/net/ProxyInfo;)V
Landroid/net/IpConfiguration;->setIpAssignment(Landroid/net/IpConfiguration$IpAssignment;)V
Landroid/net/IpConfiguration;->setProxySettings(Landroid/net/IpConfiguration$ProxySettings;)V
Landroid/net/IpConfiguration;->setStaticIpConfiguration(Landroid/net/StaticIpConfiguration;)V
Landroid/net/IpConfiguration;->staticIpConfiguration:Landroid/net/StaticIpConfiguration;
Landroid/net/IpConfiguration;->TAG:Ljava/lang/String;
Landroid/net/IpPrefix;-><init>(Ljava/lang/String;)V
Landroid/net/IpPrefix;-><init>(Ljava/net/InetAddress;I)V
Landroid/net/IpPrefix;-><init>([BI)V
Landroid/net/IpPrefix;->address:[B
Landroid/net/IpPrefix;->checkAndMaskAddressAndPrefixLength()V
Landroid/net/IpPrefix;->containsPrefix(Landroid/net/IpPrefix;)Z
Landroid/net/IpPrefix;->isIPv4()Z
Landroid/net/IpPrefix;->isIPv6()Z
Landroid/net/IpPrefix;->lengthComparator()Ljava/util/Comparator;
Landroid/net/IpPrefix;->prefixLength:I
Landroid/net/KeepalivePacketData$InvalidPacketException;-><init>(I)V
Landroid/net/KeepalivePacketData$InvalidPacketException;->error:I
Landroid/net/KeepalivePacketData;-><init>(Landroid/os/Parcel;)V
Landroid/net/KeepalivePacketData;-><init>(Ljava/net/InetAddress;ILjava/net/InetAddress;I[B)V
Landroid/net/KeepalivePacketData;->CREATOR:Landroid/os/Parcelable$Creator;
Landroid/net/KeepalivePacketData;->dstAddress:Ljava/net/InetAddress;
Landroid/net/KeepalivePacketData;->dstPort:I
Landroid/net/KeepalivePacketData;->getPacket()[B
Landroid/net/KeepalivePacketData;->IPV4_HEADER_LENGTH:I
Landroid/net/KeepalivePacketData;->mPacket:[B
Landroid/net/KeepalivePacketData;->nattKeepalivePacket(Ljava/net/InetAddress;ILjava/net/InetAddress;I)Landroid/net/KeepalivePacketData;
Landroid/net/KeepalivePacketData;->srcAddress:Ljava/net/InetAddress;
Landroid/net/KeepalivePacketData;->srcPort:I
Landroid/net/KeepalivePacketData;->TAG:Ljava/lang/String;
Landroid/net/KeepalivePacketData;->UDP_HEADER_LENGTH:I
Landroid/net/LinkAddress;-><init>(Ljava/lang/String;II)V
Landroid/net/LinkAddress;-><init>(Ljava/net/InetAddress;III)V
Landroid/net/LinkAddress;-><init>(Ljava/net/InterfaceAddress;)V
Landroid/net/LinkAddress;->flags:I
Landroid/net/LinkAddress;->init(Ljava/net/InetAddress;III)V
Landroid/net/LinkAddress;->isGlobalPreferred()Z
Landroid/net/LinkAddress;->isIPv4()Z
Landroid/net/LinkAddress;->isIPv6ULA()Z
Landroid/net/LinkAddress;->scope:I
Landroid/net/LinkAddress;->scopeForUnicastAddress(Ljava/net/InetAddress;)I
Landroid/net/LinkProperties$CompareResult;-><init>()V
Landroid/net/LinkProperties$CompareResult;-><init>(Ljava/util/Collection;Ljava/util/Collection;)V
Landroid/net/LinkProperties$CompareResult;->added:Ljava/util/List;
Landroid/net/LinkProperties$CompareResult;->removed:Ljava/util/List;
Landroid/net/LinkProperties$ProvisioningChange;->valueOf(Ljava/lang/String;)Landroid/net/LinkProperties$ProvisioningChange;
Landroid/net/LinkProperties;->addValidatedPrivateDnsServer(Ljava/net/InetAddress;)Z
Landroid/net/LinkProperties;->compareAddresses(Landroid/net/LinkProperties;)Landroid/net/LinkProperties$CompareResult;
Landroid/net/LinkProperties;->compareAllInterfaceNames(Landroid/net/LinkProperties;)Landroid/net/LinkProperties$CompareResult;
Landroid/net/LinkProperties;->compareAllRoutes(Landroid/net/LinkProperties;)Landroid/net/LinkProperties$CompareResult;
Landroid/net/LinkProperties;->compareDnses(Landroid/net/LinkProperties;)Landroid/net/LinkProperties$CompareResult;
Landroid/net/LinkProperties;->compareValidatedPrivateDnses(Landroid/net/LinkProperties;)Landroid/net/LinkProperties$CompareResult;
Landroid/net/LinkProperties;->ensureDirectlyConnectedRoutes()V
Landroid/net/LinkProperties;->findLinkAddressIndex(Landroid/net/LinkAddress;)I
Landroid/net/LinkProperties;->getValidatedPrivateDnsServers()Ljava/util/List;
Landroid/net/LinkProperties;->hasIPv4AddressOnInterface(Ljava/lang/String;)Z
Landroid/net/LinkProperties;->isIdenticalMtu(Landroid/net/LinkProperties;)Z
Landroid/net/LinkProperties;->isIdenticalPrivateDns(Landroid/net/LinkProperties;)Z
Landroid/net/LinkProperties;->isIdenticalTcpBufferSizes(Landroid/net/LinkProperties;)Z
Landroid/net/LinkProperties;->isIdenticalValidatedPrivateDnses(Landroid/net/LinkProperties;)Z
Landroid/net/LinkProperties;->isIPv4Provisioned()Z
Landroid/net/LinkProperties;->isValidMtu(IZ)Z
Landroid/net/LinkProperties;->MAX_MTU:I
Landroid/net/LinkProperties;->mDnses:Ljava/util/ArrayList;
Landroid/net/LinkProperties;->mDomains:Ljava/lang/String;
Landroid/net/LinkProperties;->mHttpProxy:Landroid/net/ProxyInfo;
Landroid/net/LinkProperties;->MIN_MTU:I
Landroid/net/LinkProperties;->MIN_MTU_V6:I
Landroid/net/LinkProperties;->mLinkAddresses:Ljava/util/ArrayList;
Landroid/net/LinkProperties;->mMtu:I
Landroid/net/LinkProperties;->mPrivateDnsServerName:Ljava/lang/String;
Landroid/net/LinkProperties;->mRoutes:Ljava/util/ArrayList;
Landroid/net/LinkProperties;->mStackedLinks:Ljava/util/Hashtable;
Landroid/net/LinkProperties;->mTcpBufferSizes:Ljava/lang/String;
Landroid/net/LinkProperties;->mUsePrivateDns:Z
Landroid/net/LinkProperties;->mValidatedPrivateDnses:Ljava/util/ArrayList;
Landroid/net/LinkProperties;->removeLinkAddress(Landroid/net/LinkAddress;)Z
Landroid/net/LinkProperties;->removeStackedLink(Ljava/lang/String;)Z
Landroid/net/LinkProperties;->removeValidatedPrivateDnsServer(Ljava/net/InetAddress;)Z
Landroid/net/LinkProperties;->routeWithInterface(Landroid/net/RouteInfo;)Landroid/net/RouteInfo;
Landroid/net/LinkProperties;->setPrivateDnsServerName(Ljava/lang/String;)V
Landroid/net/LinkProperties;->setUsePrivateDns(Z)V
Landroid/net/LinkProperties;->setValidatedPrivateDnsServers(Ljava/util/Collection;)V
Landroid/net/MacAddress;-><init>(J)V
Landroid/net/MacAddress;->BASE_GOOGLE_MAC:Landroid/net/MacAddress;
Landroid/net/MacAddress;->byteAddrFromLongAddr(J)[B
Landroid/net/MacAddress;->byteAddrFromStringAddr(Ljava/lang/String;)[B
Landroid/net/MacAddress;->createRandomUnicastAddress()Landroid/net/MacAddress;
Landroid/net/MacAddress;->createRandomUnicastAddress(Landroid/net/MacAddress;Ljava/util/Random;)Landroid/net/MacAddress;
Landroid/net/MacAddress;->createRandomUnicastAddressWithGoogleBase()Landroid/net/MacAddress;
Landroid/net/MacAddress;->ETHER_ADDR_BROADCAST:[B
Landroid/net/MacAddress;->ETHER_ADDR_LEN:I
Landroid/net/MacAddress;->isMacAddress([B)Z
Landroid/net/MacAddress;->isMulticastAddress()Z
Landroid/net/MacAddress;->LOCALLY_ASSIGNED_MASK:J
Landroid/net/MacAddress;->longAddrFromByteAddr([B)J
Landroid/net/MacAddress;->longAddrFromStringAddr(Ljava/lang/String;)J
Landroid/net/MacAddress;->macAddressType([B)I
Landroid/net/MacAddress;->mAddr:J
Landroid/net/MacAddress;->MULTICAST_MASK:J
Landroid/net/MacAddress;->NIC_MASK:J
Landroid/net/MacAddress;->OUI_MASK:J
Landroid/net/MacAddress;->stringAddrFromByteAddr([B)Ljava/lang/String;
Landroid/net/MacAddress;->stringAddrFromLongAddr(J)Ljava/lang/String;
Landroid/net/MacAddress;->TYPE_UNKNOWN:I
Landroid/net/MacAddress;->VALID_LONG_MASK:J
Landroid/net/Network$NetworkBoundSocketFactory;->connectToHost(Ljava/lang/String;ILjava/net/SocketAddress;)Ljava/net/Socket;
Landroid/net/Network$NetworkBoundSocketFactory;->mNetId:I
Landroid/net/Network;-><init>(Landroid/net/Network;)V
Landroid/net/Network;->getNetIdForResolv()I
Landroid/net/Network;->HANDLE_MAGIC:J
Landroid/net/Network;->HANDLE_MAGIC_SIZE:I
Landroid/net/Network;->httpKeepAlive:Z
Landroid/net/Network;->httpKeepAliveDurationMs:J
Landroid/net/Network;->httpMaxConnections:I
Landroid/net/Network;->maybeInitUrlConnectionFactory()V
Landroid/net/Network;->mLock:Ljava/lang/Object;
Landroid/net/Network;->mNetworkBoundSocketFactory:Landroid/net/Network$NetworkBoundSocketFactory;
Landroid/net/Network;->mPrivateDnsBypass:Z
Landroid/net/Network;->mUrlConnectionFactory:Lcom/android/okhttp/internalandroidapi/HttpURLConnectionFactory;
Landroid/net/Network;->setPrivateDnsBypass(Z)V
Landroid/net/Network;->writeToProto(Landroid/util/proto/ProtoOutputStream;J)V
Landroid/net/NetworkAgent;-><init>(Landroid/os/Looper;Landroid/content/Context;Ljava/lang/String;Landroid/net/NetworkInfo;Landroid/net/NetworkCapabilities;Landroid/net/LinkProperties;I)V
Landroid/net/NetworkAgent;-><init>(Landroid/os/Looper;Landroid/content/Context;Ljava/lang/String;Landroid/net/NetworkInfo;Landroid/net/NetworkCapabilities;Landroid/net/LinkProperties;ILandroid/net/NetworkMisc;)V
Landroid/net/NetworkAgent;->BASE:I
Landroid/net/NetworkAgent;->BW_REFRESH_MIN_WIN_MS:J
Landroid/net/NetworkAgent;->CMD_PREVENT_AUTOMATIC_RECONNECT:I
Landroid/net/NetworkAgent;->CMD_REPORT_NETWORK_STATUS:I
Landroid/net/NetworkAgent;->CMD_REQUEST_BANDWIDTH_UPDATE:I
Landroid/net/NetworkAgent;->CMD_SAVE_ACCEPT_UNVALIDATED:I
Landroid/net/NetworkAgent;->CMD_SET_SIGNAL_STRENGTH_THRESHOLDS:I
Landroid/net/NetworkAgent;->CMD_START_PACKET_KEEPALIVE:I
Landroid/net/NetworkAgent;->CMD_STOP_PACKET_KEEPALIVE:I
Landroid/net/NetworkAgent;->CMD_SUSPECT_BAD:I
Landroid/net/NetworkAgent;->DBG:Z
Landroid/net/NetworkAgent;->EVENT_NETWORK_CAPABILITIES_CHANGED:I
Landroid/net/NetworkAgent;->EVENT_NETWORK_INFO_CHANGED:I
Landroid/net/NetworkAgent;->EVENT_NETWORK_PROPERTIES_CHANGED:I
Landroid/net/NetworkAgent;->EVENT_NETWORK_SCORE_CHANGED:I
Landroid/net/NetworkAgent;->EVENT_PACKET_KEEPALIVE:I
Landroid/net/NetworkAgent;->EVENT_SET_EXPLICITLY_SELECTED:I
Landroid/net/NetworkAgent;->explicitlySelected(Z)V
Landroid/net/NetworkAgent;->INVALID_NETWORK:I
Landroid/net/NetworkAgent;->log(Ljava/lang/String;)V
Landroid/net/NetworkAgent;->LOG_TAG:Ljava/lang/String;
Landroid/net/NetworkAgent;->mAsyncChannel:Lcom/android/internal/util/AsyncChannel;
Landroid/net/NetworkAgent;->mContext:Landroid/content/Context;
Landroid/net/NetworkAgent;->mLastBwRefreshTime:J
Landroid/net/NetworkAgent;->mPollLcePending:Ljava/util/concurrent/atomic/AtomicBoolean;
Landroid/net/NetworkAgent;->mPollLceScheduled:Z
Landroid/net/NetworkAgent;->mPreConnectedQueue:Ljava/util/ArrayList;
Landroid/net/NetworkAgent;->netId:I
Landroid/net/NetworkAgent;->networkStatus(ILjava/lang/String;)V
Landroid/net/NetworkAgent;->onPacketKeepaliveEvent(II)V
Landroid/net/NetworkAgent;->pollLceData()V
Landroid/net/NetworkAgent;->preventAutomaticReconnect()V
Landroid/net/NetworkAgent;->queueOrSendMessage(III)V
Landroid/net/NetworkAgent;->queueOrSendMessage(IIILjava/lang/Object;)V
Landroid/net/NetworkAgent;->queueOrSendMessage(ILjava/lang/Object;)V
Landroid/net/NetworkAgent;->queueOrSendMessage(Landroid/os/Message;)V
Landroid/net/NetworkAgent;->REDIRECT_URL_KEY:Ljava/lang/String;
Landroid/net/NetworkAgent;->saveAcceptUnvalidated(Z)V
Landroid/net/NetworkAgent;->sendLinkProperties(Landroid/net/LinkProperties;)V
Landroid/net/NetworkAgent;->sendNetworkCapabilities(Landroid/net/NetworkCapabilities;)V
Landroid/net/NetworkAgent;->sendNetworkScore(I)V
Landroid/net/NetworkAgent;->setSignalStrengthThresholds([I)V
Landroid/net/NetworkAgent;->startPacketKeepalive(Landroid/os/Message;)V
Landroid/net/NetworkAgent;->stopPacketKeepalive(Landroid/os/Message;)V
Landroid/net/NetworkAgent;->unwanted()V
Landroid/net/NetworkAgent;->VALID_NETWORK:I
Landroid/net/NetworkAgent;->VDBG:Z
Landroid/net/NetworkAgent;->WIFI_BASE_SCORE:I
Landroid/net/NetworkBadging;-><init>()V
Landroid/net/NetworkBadging;->getBadgedWifiSignalResource(I)I
Landroid/net/NetworkBadging;->getWifiSignalResource(I)I
Landroid/net/NetworkCapabilities$NameOf;->nameOf(I)Ljava/lang/String;
Landroid/net/NetworkCapabilities;->addUnwantedCapability(I)V
Landroid/net/NetworkCapabilities;->appendStringRepresentationOfBitMaskToStringBuilder(Ljava/lang/StringBuilder;JLandroid/net/NetworkCapabilities$NameOf;Ljava/lang/String;)V
Landroid/net/NetworkCapabilities;->appliesToUid(I)Z
Landroid/net/NetworkCapabilities;->appliesToUidRange(Landroid/net/UidRange;)Z
Landroid/net/NetworkCapabilities;->capabilityNameOf(I)Ljava/lang/String;
Landroid/net/NetworkCapabilities;->capabilityNamesOf([I)Ljava/lang/String;
Landroid/net/NetworkCapabilities;->checkValidCapability(I)V
Landroid/net/NetworkCapabilities;->checkValidTransportType(I)V
Landroid/net/NetworkCapabilities;->clearAll()V
Landroid/net/NetworkCapabilities;->combineCapabilities(Landroid/net/NetworkCapabilities;)V
Landroid/net/NetworkCapabilities;->combineLinkBandwidths(Landroid/net/NetworkCapabilities;)V
Landroid/net/NetworkCapabilities;->combineNetCapabilities(Landroid/net/NetworkCapabilities;)V
Landroid/net/NetworkCapabilities;->combineSignalStrength(Landroid/net/NetworkCapabilities;)V
Landroid/net/NetworkCapabilities;->combineSpecifiers(Landroid/net/NetworkCapabilities;)V
Landroid/net/NetworkCapabilities;->combineSSIDs(Landroid/net/NetworkCapabilities;)V
Landroid/net/NetworkCapabilities;->combineTransportTypes(Landroid/net/NetworkCapabilities;)V
Landroid/net/NetworkCapabilities;->combineUids(Landroid/net/NetworkCapabilities;)V
Landroid/net/NetworkCapabilities;->DEFAULT_CAPABILITIES:J
Landroid/net/NetworkCapabilities;->describeFirstNonRequestableCapability()Ljava/lang/String;
Landroid/net/NetworkCapabilities;->describeImmutableDifferences(Landroid/net/NetworkCapabilities;)Ljava/lang/String;
Landroid/net/NetworkCapabilities;->equalRequestableCapabilities(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->equalsLinkBandwidths(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->equalsNetCapabilities(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->equalsNetCapabilitiesRequestable(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->equalsSignalStrength(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->equalsSpecifier(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->equalsSSID(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->equalsTransportTypes(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->equalsUids(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->FORCE_RESTRICTED_CAPABILITIES:J
Landroid/net/NetworkCapabilities;->getSSID()Ljava/lang/String;
Landroid/net/NetworkCapabilities;->getUids()Ljava/util/Set;
Landroid/net/NetworkCapabilities;->getUnwantedCapabilities()[I
Landroid/net/NetworkCapabilities;->hasUnwantedCapability(I)Z
Landroid/net/NetworkCapabilities;->INVALID_UID:I
Landroid/net/NetworkCapabilities;->isValidCapability(I)Z
Landroid/net/NetworkCapabilities;->isValidTransport(I)Z
Landroid/net/NetworkCapabilities;->LINK_BANDWIDTH_UNSPECIFIED:I
Landroid/net/NetworkCapabilities;->maxBandwidth(II)I
Landroid/net/NetworkCapabilities;->MAX_NET_CAPABILITY:I
Landroid/net/NetworkCapabilities;->MAX_TRANSPORT:I
Landroid/net/NetworkCapabilities;->maybeMarkCapabilitiesRestricted()V
Landroid/net/NetworkCapabilities;->mEstablishingVpnAppUid:I
Landroid/net/NetworkCapabilities;->minBandwidth(II)I
Landroid/net/NetworkCapabilities;->MIN_NET_CAPABILITY:I
Landroid/net/NetworkCapabilities;->MIN_TRANSPORT:I
Landroid/net/NetworkCapabilities;->mLinkDownBandwidthKbps:I
Landroid/net/NetworkCapabilities;->mLinkUpBandwidthKbps:I
Landroid/net/NetworkCapabilities;->mNetworkSpecifier:Landroid/net/NetworkSpecifier;
Landroid/net/NetworkCapabilities;->mSSID:Ljava/lang/String;
Landroid/net/NetworkCapabilities;->mTransportTypes:J
Landroid/net/NetworkCapabilities;->mUids:Landroid/util/ArraySet;
Landroid/net/NetworkCapabilities;->mUnwantedNetworkCapabilities:J
Landroid/net/NetworkCapabilities;->MUTABLE_CAPABILITIES:J
Landroid/net/NetworkCapabilities;->NON_REQUESTABLE_CAPABILITIES:J
Landroid/net/NetworkCapabilities;->removeTransportType(I)Landroid/net/NetworkCapabilities;
Landroid/net/NetworkCapabilities;->RESTRICTED_CAPABILITIES:J
Landroid/net/NetworkCapabilities;->satisfiedByImmutableNetworkCapabilities(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->satisfiedByLinkBandwidths(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->satisfiedByNetCapabilities(Landroid/net/NetworkCapabilities;Z)Z
Landroid/net/NetworkCapabilities;->satisfiedByNetworkCapabilities(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->satisfiedByNetworkCapabilities(Landroid/net/NetworkCapabilities;Z)Z
Landroid/net/NetworkCapabilities;->satisfiedBySignalStrength(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->satisfiedBySpecifier(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->satisfiedBySSID(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->satisfiedByTransportTypes(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->satisfiedByUids(Landroid/net/NetworkCapabilities;)Z
Landroid/net/NetworkCapabilities;->set(Landroid/net/NetworkCapabilities;)V
Landroid/net/NetworkCapabilities;->setCapabilities([I)V
Landroid/net/NetworkCapabilities;->setCapabilities([I[I)V
Landroid/net/NetworkCapabilities;->setCapability(IZ)Landroid/net/NetworkCapabilities;
Landroid/net/NetworkCapabilities;->setEstablishingVpnAppUid(I)V
Landroid/net/NetworkCapabilities;->setLinkDownstreamBandwidthKbps(I)Landroid/net/NetworkCapabilities;
Landroid/net/NetworkCapabilities;->setLinkUpstreamBandwidthKbps(I)Landroid/net/NetworkCapabilities;
Landroid/net/NetworkCapabilities;->setNetworkSpecifier(Landroid/net/NetworkSpecifier;)Landroid/net/NetworkCapabilities;
Landroid/net/NetworkCapabilities;->setSingleUid(I)Landroid/net/NetworkCapabilities;
Landroid/net/NetworkCapabilities;->setSSID(Ljava/lang/String;)Landroid/net/NetworkCapabilities;
Landroid/net/NetworkCapabilities;->setTransportType(IZ)Landroid/net/NetworkCapabilities;
Landroid/net/NetworkCapabilities;->setTransportTypes([I)V
Landroid/net/NetworkCapabilities;->setUids(Ljava/util/Set;)Landroid/net/NetworkCapabilities;
Landroid/net/NetworkCapabilities;->SIGNAL_STRENGTH_UNSPECIFIED:I
Landroid/net/NetworkCapabilities;->TAG:Ljava/lang/String;
Landroid/net/NetworkCapabilities;->transportNameOf(I)Ljava/lang/String;
Landroid/net/NetworkCapabilities;->TRANSPORT_NAMES:[Ljava/lang/String;
Landroid/net/NetworkCapabilities;->UNRESTRICTED_CAPABILITIES:J
Landroid/net/NetworkCapabilities;->writeToProto(Landroid/util/proto/ProtoOutputStream;J)V
Landroid/net/NetworkCapabilitiesProto;-><init>()V
Landroid/net/NetworkCapabilitiesProto;->CAN_REPORT_SIGNAL_STRENGTH:J
Landroid/net/NetworkCapabilitiesProto;->CAPABILITIES:J
Landroid/net/NetworkCapabilitiesProto;->LINK_DOWN_BANDWIDTH_KBPS:J
Landroid/net/NetworkCapabilitiesProto;->LINK_UP_BANDWIDTH_KBPS:J
Landroid/net/NetworkCapabilitiesProto;->NETWORK_SPECIFIER:J
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_CAPTIVE_PORTAL:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_CBS:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_DUN:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_EIMS:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_FOREGROUND:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_FOTA:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_IA:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_IMS:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_INTERNET:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_MMS:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_NOT_METERED:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_NOT_RESTRICTED:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_NOT_ROAMING:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_NOT_VPN:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_RCS:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_SUPL:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_TRUSTED:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_VALIDATED:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_WIFI_P2P:I
Landroid/net/NetworkCapabilitiesProto;->NET_CAPABILITY_XCAP:I
Landroid/net/NetworkCapabilitiesProto;->SIGNAL_STRENGTH:J
Landroid/net/NetworkCapabilitiesProto;->TRANSPORTS:J
Landroid/net/NetworkCapabilitiesProto;->TRANSPORT_BLUETOOTH:I
Landroid/net/NetworkCapabilitiesProto;->TRANSPORT_CELLULAR:I
Landroid/net/NetworkCapabilitiesProto;->TRANSPORT_ETHERNET:I
Landroid/net/NetworkCapabilitiesProto;->TRANSPORT_LOWPAN:I
Landroid/net/NetworkCapabilitiesProto;->TRANSPORT_VPN:I
Landroid/net/NetworkCapabilitiesProto;->TRANSPORT_WIFI:I
Landroid/net/NetworkCapabilitiesProto;->TRANSPORT_WIFI_AWARE:I
Landroid/net/NetworkConfig;-><init>(Ljava/lang/String;)V
Landroid/net/NetworkConfig;->dependencyMet:Z
Landroid/net/NetworkConfig;->isDefault()Z
Landroid/net/NetworkConfig;->name:Ljava/lang/String;
Landroid/net/NetworkConfig;->priority:I
Landroid/net/NetworkConfig;->radio:I
Landroid/net/NetworkConfig;->restoreTime:I
Landroid/net/NetworkConfig;->type:I
Landroid/net/NetworkFactory$NetworkRequestInfo;->request:Landroid/net/NetworkRequest;
Landroid/net/NetworkFactory$NetworkRequestInfo;->requested:Z
Landroid/net/NetworkFactory$NetworkRequestInfo;->score:I
Landroid/net/NetworkFactory;->acceptRequest(Landroid/net/NetworkRequest;I)Z
Landroid/net/NetworkFactory;->addNetworkRequest(Landroid/net/NetworkRequest;I)V
Landroid/net/NetworkFactory;->BASE:I
Landroid/net/NetworkFactory;->CMD_CANCEL_REQUEST:I
Landroid/net/NetworkFactory;->CMD_REQUEST_NETWORK:I
Landroid/net/NetworkFactory;->CMD_SET_FILTER:I
Landroid/net/NetworkFactory;->CMD_SET_SCORE:I
Landroid/net/NetworkFactory;->DBG:Z
Landroid/net/NetworkFactory;->evalRequest(Landroid/net/NetworkFactory$NetworkRequestInfo;)V
Landroid/net/NetworkFactory;->evalRequests()V
Landroid/net/NetworkFactory;->getRequestCount()I
Landroid/net/NetworkFactory;->handleAddRequest(Landroid/net/NetworkRequest;I)V
Landroid/net/NetworkFactory;->handleRemoveRequest(Landroid/net/NetworkRequest;)V
Landroid/net/NetworkFactory;->handleSetFilter(Landroid/net/NetworkCapabilities;)V
Landroid/net/NetworkFactory;->handleSetScore(I)V
Landroid/net/NetworkFactory;->log(Ljava/lang/String;)V
Landroid/net/NetworkFactory;->LOG_TAG:Ljava/lang/String;
Landroid/net/NetworkFactory;->mCapabilityFilter:Landroid/net/NetworkCapabilities;
Landroid/net/NetworkFactory;->mContext:Landroid/content/Context;
Landroid/net/NetworkFactory;->mMessenger:Landroid/os/Messenger;
Landroid/net/NetworkFactory;->mNetworkRequests:Landroid/util/SparseArray;
Landroid/net/NetworkFactory;->mRefCount:I
Landroid/net/NetworkFactory;->mScore:I
Landroid/net/NetworkFactory;->needNetworkFor(Landroid/net/NetworkRequest;I)V
Landroid/net/NetworkFactory;->reevaluateAllRequests()V
Landroid/net/NetworkFactory;->register()V
Landroid/net/NetworkFactory;->releaseNetworkFor(Landroid/net/NetworkRequest;)V
Landroid/net/NetworkFactory;->removeNetworkRequest(Landroid/net/NetworkRequest;)V
Landroid/net/NetworkFactory;->setCapabilityFilter(Landroid/net/NetworkCapabilities;)V
Landroid/net/NetworkFactory;->startNetwork()V
Landroid/net/NetworkFactory;->stopNetwork()V
Landroid/net/NetworkFactory;->unregister()V
Landroid/net/NetworkFactory;->VDBG:Z
Landroid/net/NetworkIdentity;-><init>(IILjava/lang/String;Ljava/lang/String;ZZZ)V
Landroid/net/NetworkIdentity;->buildNetworkIdentity(Landroid/content/Context;Landroid/net/NetworkState;Z)Landroid/net/NetworkIdentity;
Landroid/net/NetworkIdentity;->COMBINE_SUBTYPE_ENABLED:Z
Landroid/net/NetworkIdentity;->compareTo(Landroid/net/NetworkIdentity;)I
Landroid/net/NetworkIdentity;->getDefaultNetwork()Z
Landroid/net/NetworkIdentity;->getMetered()Z
Landroid/net/NetworkIdentity;->getNetworkId()Ljava/lang/String;
Landroid/net/NetworkIdentity;->getRoaming()Z
Landroid/net/NetworkIdentity;->getSubscriberId()Ljava/lang/String;
Landroid/net/NetworkIdentity;->getSubType()I
Landroid/net/NetworkIdentity;->getType()I
Landroid/net/NetworkIdentity;->mDefaultNetwork:Z
Landroid/net/NetworkIdentity;->mMetered:Z
Landroid/net/NetworkIdentity;->mNetworkId:Ljava/lang/String;
Landroid/net/NetworkIdentity;->mRoaming:Z
Landroid/net/NetworkIdentity;->mSubscriberId:Ljava/lang/String;
Landroid/net/NetworkIdentity;->mSubType:I
Landroid/net/NetworkIdentity;->mType:I
Landroid/net/NetworkIdentity;->scrubSubscriberId(Ljava/lang/String;)Ljava/lang/String;
Landroid/net/NetworkIdentity;->scrubSubscriberId([Ljava/lang/String;)[Ljava/lang/String;
Landroid/net/NetworkIdentity;->SUBTYPE_COMBINED:I
Landroid/net/NetworkIdentity;->TAG:Ljava/lang/String;
Landroid/net/NetworkIdentity;->writeToProto(Landroid/util/proto/ProtoOutputStream;J)V
Landroid/net/NetworkInfo;->mDetailedState:Landroid/net/NetworkInfo$DetailedState;
Landroid/net/NetworkInfo;->mExtraInfo:Ljava/lang/String;
Landroid/net/NetworkInfo;->mIsAvailable:Z
Landroid/net/NetworkInfo;->mIsFailover:Z
Landroid/net/NetworkInfo;->mIsRoaming:Z
Landroid/net/NetworkInfo;->mNetworkType:I
Landroid/net/NetworkInfo;->mReason:Ljava/lang/String;
Landroid/net/NetworkInfo;->mState:Landroid/net/NetworkInfo$State;
Landroid/net/NetworkInfo;->mSubtype:I
Landroid/net/NetworkInfo;->mSubtypeName:Ljava/lang/String;
Landroid/net/NetworkInfo;->mTypeName:Ljava/lang/String;
Landroid/net/NetworkInfo;->setExtraInfo(Ljava/lang/String;)V
Landroid/net/NetworkInfo;->setType(I)V
Landroid/net/NetworkInfo;->stateMap:Ljava/util/EnumMap;
Landroid/net/NetworkKey;-><init>(Landroid/os/Parcel;)V
Landroid/net/NetworkKey;->createFromScanResult(Landroid/net/wifi/ScanResult;)Landroid/net/NetworkKey;
Landroid/net/NetworkKey;->createFromWifiInfo(Landroid/net/wifi/WifiInfo;)Landroid/net/NetworkKey;
Landroid/net/NetworkKey;->TAG:Ljava/lang/String;
Landroid/net/NetworkMisc;-><init>()V
Landroid/net/NetworkMisc;-><init>(Landroid/net/NetworkMisc;)V
Landroid/net/NetworkMisc;->acceptUnvalidated:Z
Landroid/net/NetworkMisc;->allowBypass:Z
Landroid/net/NetworkMisc;->CREATOR:Landroid/os/Parcelable$Creator;
Landroid/net/NetworkMisc;->explicitlySelected:Z
Landroid/net/NetworkMisc;->provisioningNotificationDisabled:Z
Landroid/net/NetworkMisc;->subscriberId:Ljava/lang/String;
Landroid/net/NetworkPolicy;-><init>(Landroid/net/NetworkTemplate;ILjava/lang/String;JJZ)V
Landroid/net/NetworkPolicy;-><init>(Landroid/net/NetworkTemplate;Landroid/util/RecurrenceRule;JJJJJZZ)V
Landroid/net/NetworkPolicy;-><init>(Landroid/net/NetworkTemplate;Landroid/util/RecurrenceRule;JJJJZZ)V
Landroid/net/NetworkPolicy;-><init>(Landroid/os/Parcel;)V
Landroid/net/NetworkPolicy;->buildRule(ILjava/time/ZoneId;)Landroid/util/RecurrenceRule;
Landroid/net/NetworkPolicy;->cycleIterator()Ljava/util/Iterator;
Landroid/net/NetworkPolicy;->cycleRule:Landroid/util/RecurrenceRule;
Landroid/net/NetworkPolicy;->CYCLE_NONE:I
Landroid/net/NetworkPolicy;->DEFAULT_MTU:J
Landroid/net/NetworkPolicy;->getBytesForBackup()[B
Landroid/net/NetworkPolicy;->getNetworkPolicyFromBackup(Ljava/io/DataInputStream;)Landroid/net/NetworkPolicy;
Landroid/net/NetworkPolicy;->hasCycle()Z
Landroid/net/NetworkPolicy;->lastLimitSnooze:J
Landroid/net/NetworkPolicy;->lastRapidSnooze:J
Landroid/net/NetworkPolicy;->lastWarningSnooze:J
Landroid/net/NetworkPolicy;->LIMIT_DISABLED:J
Landroid/net/NetworkPolicy;->SNOOZE_NEVER:J
Landroid/net/NetworkPolicy;->VERSION_INIT:I
Landroid/net/NetworkPolicy;->VERSION_RAPID:I
Landroid/net/NetworkPolicy;->VERSION_RULE:I
Landroid/net/NetworkPolicy;->WARNING_DISABLED:J
Landroid/net/NetworkPolicyManager$Listener;-><init>()V
Landroid/net/NetworkPolicyManager$Listener;->onMeteredIfacesChanged([Ljava/lang/String;)V
Landroid/net/NetworkPolicyManager$Listener;->onRestrictBackgroundChanged(Z)V
Landroid/net/NetworkPolicyManager$Listener;->onSubscriptionOverride(III)V
Landroid/net/NetworkPolicyManager$Listener;->onUidPoliciesChanged(II)V
Landroid/net/NetworkPolicyManager$Listener;->onUidRulesChanged(II)V
Landroid/net/NetworkPolicyManager;-><init>(Landroid/content/Context;Landroid/net/INetworkPolicyManager;)V
Landroid/net/NetworkPolicyManager;->addUidPolicy(II)V
Landroid/net/NetworkPolicyManager;->ALLOW_PLATFORM_APP_POLICY:Z
Landroid/net/NetworkPolicyManager;->cycleIterator(Landroid/net/NetworkPolicy;)Ljava/util/Iterator;
Landroid/net/NetworkPolicyManager;->EXTRA_NETWORK_TEMPLATE:Ljava/lang/String;
Landroid/net/NetworkPolicyManager;->factoryReset(Ljava/lang/String;)V
Landroid/net/NetworkPolicyManager;->FIREWALL_CHAIN_DOZABLE:I
Landroid/net/NetworkPolicyManager;->FIREWALL_CHAIN_NAME_DOZABLE:Ljava/lang/String;
Landroid/net/NetworkPolicyManager;->FIREWALL_CHAIN_NAME_NONE:Ljava/lang/String;
Landroid/net/NetworkPolicyManager;->FIREWALL_CHAIN_NAME_POWERSAVE:Ljava/lang/String;
Landroid/net/NetworkPolicyManager;->FIREWALL_CHAIN_NAME_STANDBY:Ljava/lang/String;
Landroid/net/NetworkPolicyManager;->FIREWALL_CHAIN_NONE:I
Landroid/net/NetworkPolicyManager;->FIREWALL_CHAIN_POWERSAVE:I
Landroid/net/NetworkPolicyManager;->FIREWALL_CHAIN_STANDBY:I
Landroid/net/NetworkPolicyManager;->FIREWALL_RULE_ALLOW:I
Landroid/net/NetworkPolicyManager;->FIREWALL_RULE_DEFAULT:I
Landroid/net/NetworkPolicyManager;->FIREWALL_RULE_DENY:I
Landroid/net/NetworkPolicyManager;->FIREWALL_TYPE_BLACKLIST:I
Landroid/net/NetworkPolicyManager;->FIREWALL_TYPE_WHITELIST:I
Landroid/net/NetworkPolicyManager;->FOREGROUND_THRESHOLD_STATE:I
Landroid/net/NetworkPolicyManager;->isProcStateAllowedWhileIdleOrPowerSaveMode(I)Z
Landroid/net/NetworkPolicyManager;->isProcStateAllowedWhileOnRestrictBackground(I)Z
Landroid/net/NetworkPolicyManager;->isUidValidForPolicy(Landroid/content/Context;I)Z
Landroid/net/NetworkPolicyManager;->MASK_ALL_NETWORKS:I
Landroid/net/NetworkPolicyManager;->MASK_METERED_NETWORKS:I
Landroid/net/NetworkPolicyManager;->mContext:Landroid/content/Context;
Landroid/net/NetworkPolicyManager;->OVERRIDE_CONGESTED:I
Landroid/net/NetworkPolicyManager;->OVERRIDE_UNMETERED:I
Landroid/net/NetworkPolicyManager;->POLICY_ALLOW_METERED_BACKGROUND:I
Landroid/net/NetworkPolicyManager;->POLICY_NONE:I
Landroid/net/NetworkPolicyManager;->POLICY_REJECT_METERED_BACKGROUND:I
Landroid/net/NetworkPolicyManager;->removeUidPolicy(II)V
Landroid/net/NetworkPolicyManager;->resolveNetworkId(Landroid/net/wifi/WifiConfiguration;)Ljava/lang/String;
Landroid/net/NetworkPolicyManager;->resolveNetworkId(Ljava/lang/String;)Ljava/lang/String;
Landroid/net/NetworkPolicyManager;->RULE_ALLOW_ALL:I
Landroid/net/NetworkPolicyManager;->RULE_ALLOW_METERED:I
Landroid/net/NetworkPolicyManager;->RULE_NONE:I
Landroid/net/NetworkPolicyManager;->RULE_REJECT_ALL:I
Landroid/net/NetworkPolicyManager;->RULE_REJECT_METERED:I
Landroid/net/NetworkPolicyManager;->RULE_TEMPORARY_ALLOW_METERED:I
Landroid/net/NetworkPolicyManager;->setNetworkPolicies([Landroid/net/NetworkPolicy;)V
Landroid/net/NetworkPolicyManager;->uidPoliciesToString(I)Ljava/lang/String;
Landroid/net/NetworkPolicyManager;->uidRulesToString(I)Ljava/lang/String;
Landroid/net/NetworkProto;-><init>()V
Landroid/net/NetworkProto;->NET_ID:J
Landroid/net/NetworkQuotaInfo;-><init>()V
Landroid/net/NetworkQuotaInfo;-><init>(Landroid/os/Parcel;)V
Landroid/net/NetworkQuotaInfo;->NO_LIMIT:J
Landroid/net/NetworkRecommendationProvider$ServiceWrapper;->enforceCallingPermission()V
Landroid/net/NetworkRecommendationProvider$ServiceWrapper;->execute(Ljava/lang/Runnable;)V
Landroid/net/NetworkRecommendationProvider$ServiceWrapper;->mContext:Landroid/content/Context;
Landroid/net/NetworkRecommendationProvider$ServiceWrapper;->mExecutor:Ljava/util/concurrent/Executor;
Landroid/net/NetworkRecommendationProvider$ServiceWrapper;->mHandler:Landroid/os/Handler;
Landroid/net/NetworkRecommendationProvider$ServiceWrapper;->requestScores([Landroid/net/NetworkKey;)V
Landroid/net/NetworkRecommendationProvider;->mService:Landroid/os/IBinder;
Landroid/net/NetworkRecommendationProvider;->TAG:Ljava/lang/String;
Landroid/net/NetworkRecommendationProvider;->VERBOSE:Z
Landroid/net/NetworkRequest$Builder;->addUnwantedCapability(I)Landroid/net/NetworkRequest$Builder;
Landroid/net/NetworkRequest$Builder;->mNetworkCapabilities:Landroid/net/NetworkCapabilities;
Landroid/net/NetworkRequest$Builder;->setCapabilities(Landroid/net/NetworkCapabilities;)Landroid/net/NetworkRequest$Builder;
Landroid/net/NetworkRequest$Builder;->setLinkDownstreamBandwidthKbps(I)Landroid/net/NetworkRequest$Builder;
Landroid/net/NetworkRequest$Builder;->setLinkUpstreamBandwidthKbps(I)Landroid/net/NetworkRequest$Builder;
Landroid/net/NetworkRequest$Builder;->setUids(Ljava/util/Set;)Landroid/net/NetworkRequest$Builder;
Landroid/net/NetworkRequest$Type;->BACKGROUND_REQUEST:Landroid/net/NetworkRequest$Type;
Landroid/net/NetworkRequest$Type;->LISTEN:Landroid/net/NetworkRequest$Type;
Landroid/net/NetworkRequest$Type;->NONE:Landroid/net/NetworkRequest$Type;
Landroid/net/NetworkRequest$Type;->REQUEST:Landroid/net/NetworkRequest$Type;
Landroid/net/NetworkRequest$Type;->TRACK_DEFAULT:Landroid/net/NetworkRequest$Type;
Landroid/net/NetworkRequest$Type;->valueOf(Ljava/lang/String;)Landroid/net/NetworkRequest$Type;
Landroid/net/NetworkRequest$Type;->values()[Landroid/net/NetworkRequest$Type;
Landroid/net/NetworkRequest;-><init>(Landroid/net/NetworkCapabilities;IILandroid/net/NetworkRequest$Type;)V
Landroid/net/NetworkRequest;-><init>(Landroid/net/NetworkRequest;)V
Landroid/net/NetworkRequest;->hasUnwantedCapability(I)Z
Landroid/net/NetworkRequest;->isBackgroundRequest()Z
Landroid/net/NetworkRequest;->isForegroundRequest()Z
Landroid/net/NetworkRequest;->isListen()Z
Landroid/net/NetworkRequest;->isRequest()Z
Landroid/net/NetworkRequest;->type:Landroid/net/NetworkRequest$Type;
Landroid/net/NetworkRequest;->typeToProtoEnum(Landroid/net/NetworkRequest$Type;)I
Landroid/net/NetworkRequest;->writeToProto(Landroid/util/proto/ProtoOutputStream;J)V
Landroid/net/NetworkRequestProto;-><init>()V
Landroid/net/NetworkRequestProto;->LEGACY_TYPE:J
Landroid/net/NetworkRequestProto;->NETWORK_CAPABILITIES:J
Landroid/net/NetworkRequestProto;->REQUEST_ID:J
Landroid/net/NetworkRequestProto;->TYPE:J
Landroid/net/NetworkRequestProto;->TYPE_BACKGROUND_REQUEST:I
Landroid/net/NetworkRequestProto;->TYPE_LISTEN:I
Landroid/net/NetworkRequestProto;->TYPE_NONE:I
Landroid/net/NetworkRequestProto;->TYPE_REQUEST:I
Landroid/net/NetworkRequestProto;->TYPE_TRACK_DEFAULT:I
Landroid/net/NetworkRequestProto;->TYPE_UNKNOWN:I
Landroid/net/NetworkScoreManager;-><init>(Landroid/content/Context;)V
Landroid/net/NetworkScoreManager;->CACHE_FILTER_CURRENT_NETWORK:I
Landroid/net/NetworkScoreManager;->CACHE_FILTER_NONE:I
Landroid/net/NetworkScoreManager;->CACHE_FILTER_SCAN_RESULTS:I
Landroid/net/NetworkScoreManager;->getActiveScorer()Landroid/net/NetworkScorerAppData;
Landroid/net/NetworkScoreManager;->getAllValidScorers()Ljava/util/List;
Landroid/net/NetworkScoreManager;->isCallerActiveScorer(I)Z
Landroid/net/NetworkScoreManager;->mContext:Landroid/content/Context;
Landroid/net/NetworkScoreManager;->mService:Landroid/net/INetworkScoreService;
Landroid/net/NetworkScoreManager;->NETWORK_AVAILABLE_NOTIFICATION_CHANNEL_ID_META_DATA:Ljava/lang/String;
Landroid/net/NetworkScoreManager;->RECOMMENDATIONS_ENABLED_FORCED_OFF:I
Landroid/net/NetworkScoreManager;->RECOMMENDATIONS_ENABLED_OFF:I
Landroid/net/NetworkScoreManager;->RECOMMENDATIONS_ENABLED_ON:I
Landroid/net/NetworkScoreManager;->RECOMMENDATION_SERVICE_LABEL_META_DATA:Ljava/lang/String;
Landroid/net/NetworkScoreManager;->registerNetworkScoreCache(ILandroid/net/INetworkScoreCache;)V
Landroid/net/NetworkScoreManager;->registerNetworkScoreCache(ILandroid/net/INetworkScoreCache;I)V
Landroid/net/NetworkScoreManager;->requestScores([Landroid/net/NetworkKey;)Z
Landroid/net/NetworkScoreManager;->unregisterNetworkScoreCache(ILandroid/net/INetworkScoreCache;)V
Landroid/net/NetworkScoreManager;->USE_OPEN_WIFI_PACKAGE_META_DATA:Ljava/lang/String;
Landroid/net/NetworkScorerAppData;-><init>(ILandroid/content/ComponentName;Ljava/lang/String;Landroid/content/ComponentName;Ljava/lang/String;)V
Landroid/net/NetworkScorerAppData;-><init>(Landroid/os/Parcel;)V
Landroid/net/NetworkScorerAppData;->CREATOR:Landroid/os/Parcelable$Creator;
Landroid/net/NetworkScorerAppData;->getEnableUseOpenWifiActivity()Landroid/content/ComponentName;
Landroid/net/NetworkScorerAppData;->getNetworkAvailableNotificationChannelId()Ljava/lang/String;
Landroid/net/NetworkScorerAppData;->getRecommendationServiceComponent()Landroid/content/ComponentName;
Landroid/net/NetworkScorerAppData;->getRecommendationServiceLabel()Ljava/lang/String;
Landroid/net/NetworkScorerAppData;->getRecommendationServicePackageName()Ljava/lang/String;
Landroid/net/NetworkScorerAppData;->mEnableUseOpenWifiActivity:Landroid/content/ComponentName;
Landroid/net/NetworkScorerAppData;->mNetworkAvailableNotificationChannelId:Ljava/lang/String;
Landroid/net/NetworkScorerAppData;->mRecommendationService:Landroid/content/ComponentName;
Landroid/net/NetworkScorerAppData;->mRecommendationServiceLabel:Ljava/lang/String;
Landroid/net/NetworkScorerAppData;->packageUid:I
Landroid/net/NetworkSpecifier;-><init>()V
Landroid/net/NetworkSpecifier;->assertValidFromUid(I)V
Landroid/net/NetworkSpecifier;->satisfiedBy(Landroid/net/NetworkSpecifier;)Z
Landroid/net/NetworkState;-><init>(Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;Landroid/net/Network;Ljava/lang/String;Ljava/lang/String;)V
Landroid/net/NetworkState;->EMPTY:Landroid/net/NetworkState;
Landroid/net/NetworkState;->linkProperties:Landroid/net/LinkProperties;
Landroid/net/NetworkState;->networkCapabilities:Landroid/net/NetworkCapabilities;
Landroid/net/NetworkState;->networkId:Ljava/lang/String;
Landroid/net/NetworkState;->networkInfo:Landroid/net/NetworkInfo;
Landroid/net/NetworkState;->SANITY_CHECK_ROAMING:Z
Landroid/net/NetworkState;->subscriberId:Ljava/lang/String;
Landroid/net/NetworkStats$Entry;-><init>(JJJJJ)V
Landroid/net/NetworkStats$Entry;-><init>(Ljava/lang/String;IIIIIIJJJJJ)V
Landroid/net/NetworkStats$Entry;-><init>(Ljava/lang/String;IIIJJJJJ)V
Landroid/net/NetworkStats$Entry;->add(Landroid/net/NetworkStats$Entry;)V
Landroid/net/NetworkStats$Entry;->defaultNetwork:I
Landroid/net/NetworkStats$Entry;->isEmpty()Z
Landroid/net/NetworkStats$Entry;->isNegative()Z
Landroid/net/NetworkStats$Entry;->metered:I
Landroid/net/NetworkStats$Entry;->operations:J
Landroid/net/NetworkStats$Entry;->roaming:I
Landroid/net/NetworkStats$NonMonotonicObserver;->foundNonMonotonic(Landroid/net/NetworkStats;ILandroid/net/NetworkStats;ILjava/lang/Object;)V
Landroid/net/NetworkStats$NonMonotonicObserver;->foundNonMonotonic(Landroid/net/NetworkStats;ILjava/lang/Object;)V
Landroid/net/NetworkStats;->addIfaceValues(Ljava/lang/String;JJJJ)Landroid/net/NetworkStats;
Landroid/net/NetworkStats;->addTrafficToApplications(ILjava/lang/String;Ljava/lang/String;Landroid/net/NetworkStats$Entry;Landroid/net/NetworkStats$Entry;)Landroid/net/NetworkStats$Entry;
Landroid/net/NetworkStats;->addValues(Landroid/net/NetworkStats$Entry;)Landroid/net/NetworkStats;
Landroid/net/NetworkStats;->addValues(Ljava/lang/String;IIIIIIJJJJJ)Landroid/net/NetworkStats;
Landroid/net/NetworkStats;->addValues(Ljava/lang/String;IIIJJJJJ)Landroid/net/NetworkStats;
Landroid/net/NetworkStats;->apply464xlatAdjustments(Landroid/net/NetworkStats;Landroid/net/NetworkStats;Ljava/util/Map;)V
Landroid/net/NetworkStats;->apply464xlatAdjustments(Ljava/util/Map;)V
Landroid/net/NetworkStats;->CLATD_INTERFACE_PREFIX:Ljava/lang/String;
Landroid/net/NetworkStats;->clear()V
Landroid/net/NetworkStats;->combineValues(Ljava/lang/String;IIIJJJJJ)Landroid/net/NetworkStats;
Landroid/net/NetworkStats;->combineValues(Ljava/lang/String;IIJJJJJ)Landroid/net/NetworkStats;
Landroid/net/NetworkStats;->deductTrafficFromVpnApp(ILjava/lang/String;Landroid/net/NetworkStats$Entry;)V
Landroid/net/NetworkStats;->defaultNetworkToString(I)Ljava/lang/String;
Landroid/net/NetworkStats;->DEFAULT_NETWORK_ALL:I
Landroid/net/NetworkStats;->DEFAULT_NETWORK_NO:I
Landroid/net/NetworkStats;->DEFAULT_NETWORK_YES:I
Landroid/net/NetworkStats;->dump(Ljava/lang/String;Ljava/io/PrintWriter;)V
Landroid/net/NetworkStats;->elapsedRealtime:J
Landroid/net/NetworkStats;->filter(I[Ljava/lang/String;I)V
Landroid/net/NetworkStats;->findIndex(Ljava/lang/String;IIIIII)I
Landroid/net/NetworkStats;->findIndexHinted(Ljava/lang/String;IIIIIII)I
Landroid/net/NetworkStats;->getElapsedRealtime()J
Landroid/net/NetworkStats;->getElapsedRealtimeAge()J
Landroid/net/NetworkStats;->getTotal(Landroid/net/NetworkStats$Entry;Ljava/util/HashSet;)Landroid/net/NetworkStats$Entry;
Landroid/net/NetworkStats;->getTotal(Landroid/net/NetworkStats$Entry;Ljava/util/HashSet;IZ)Landroid/net/NetworkStats$Entry;
Landroid/net/NetworkStats;->getTotalPackets()J
Landroid/net/NetworkStats;->getUniqueIfaces()[Ljava/lang/String;
Landroid/net/NetworkStats;->groupedByIface()Landroid/net/NetworkStats;
Landroid/net/NetworkStats;->groupedByUid()Landroid/net/NetworkStats;
Landroid/net/NetworkStats;->IFACE_ALL:Ljava/lang/String;
Landroid/net/NetworkStats;->INTERFACES_ALL:[Ljava/lang/String;
Landroid/net/NetworkStats;->internalSize()I
Landroid/net/NetworkStats;->IPV4V6_HEADER_DELTA:I
Landroid/net/NetworkStats;->meteredToString(I)Ljava/lang/String;
Landroid/net/NetworkStats;->METERED_ALL:I
Landroid/net/NetworkStats;->METERED_NO:I
Landroid/net/NetworkStats;->METERED_YES:I
Landroid/net/NetworkStats;->migrateTun(ILjava/lang/String;Ljava/lang/String;)Z
Landroid/net/NetworkStats;->roamingToString(I)Ljava/lang/String;
Landroid/net/NetworkStats;->ROAMING_ALL:I
Landroid/net/NetworkStats;->ROAMING_NO:I
Landroid/net/NetworkStats;->ROAMING_YES:I
Landroid/net/NetworkStats;->setElapsedRealtime(J)V
Landroid/net/NetworkStats;->setMatches(II)Z
Landroid/net/NetworkStats;->setToCheckinString(I)Ljava/lang/String;
Landroid/net/NetworkStats;->setToString(I)Ljava/lang/String;
Landroid/net/NetworkStats;->setValues(ILandroid/net/NetworkStats$Entry;)V
Landroid/net/NetworkStats;->SET_ALL:I
Landroid/net/NetworkStats;->SET_DBG_VPN_IN:I
Landroid/net/NetworkStats;->SET_DBG_VPN_OUT:I
Landroid/net/NetworkStats;->SET_DEBUG_START:I
Landroid/net/NetworkStats;->SET_DEFAULT:I
Landroid/net/NetworkStats;->SET_FOREGROUND:I
Landroid/net/NetworkStats;->spliceOperationsFrom(Landroid/net/NetworkStats;)V
Landroid/net/NetworkStats;->STATS_PER_IFACE:I
Landroid/net/NetworkStats;->STATS_PER_UID:I
Landroid/net/NetworkStats;->subtract(Landroid/net/NetworkStats;)Landroid/net/NetworkStats;
Landroid/net/NetworkStats;->subtract(Landroid/net/NetworkStats;Landroid/net/NetworkStats;Landroid/net/NetworkStats$NonMonotonicObserver;Ljava/lang/Object;)Landroid/net/NetworkStats;
Landroid/net/NetworkStats;->subtract(Landroid/net/NetworkStats;Landroid/net/NetworkStats;Landroid/net/NetworkStats$NonMonotonicObserver;Ljava/lang/Object;Landroid/net/NetworkStats;)Landroid/net/NetworkStats;
Landroid/net/NetworkStats;->TAG:Ljava/lang/String;
Landroid/net/NetworkStats;->tagToString(I)Ljava/lang/String;
Landroid/net/NetworkStats;->TAG_ALL:I
Landroid/net/NetworkStats;->TAG_NONE:I
Landroid/net/NetworkStats;->tunAdjustmentInit(ILjava/lang/String;Ljava/lang/String;Landroid/net/NetworkStats$Entry;Landroid/net/NetworkStats$Entry;)V
Landroid/net/NetworkStats;->tunGetPool(Landroid/net/NetworkStats$Entry;Landroid/net/NetworkStats$Entry;)Landroid/net/NetworkStats$Entry;
Landroid/net/NetworkStats;->tunSubtract(ILandroid/net/NetworkStats;Landroid/net/NetworkStats$Entry;)V
Landroid/net/NetworkStats;->UID_ALL:I
Landroid/net/NetworkStats;->withoutUids([I)Landroid/net/NetworkStats;
Landroid/net/NetworkStatsHistory$DataStreamUtils;-><init>()V
Landroid/net/NetworkStatsHistory$DataStreamUtils;->readFullLongArray(Ljava/io/DataInputStream;)[J
Landroid/net/NetworkStatsHistory$DataStreamUtils;->readVarLong(Ljava/io/DataInputStream;)J
Landroid/net/NetworkStatsHistory$DataStreamUtils;->readVarLongArray(Ljava/io/DataInputStream;)[J
Landroid/net/NetworkStatsHistory$DataStreamUtils;->writeVarLong(Ljava/io/DataOutputStream;J)V
Landroid/net/NetworkStatsHistory$DataStreamUtils;->writeVarLongArray(Ljava/io/DataOutputStream;[JI)V
Landroid/net/NetworkStatsHistory$Entry;-><init>()V
Landroid/net/NetworkStatsHistory$Entry;->activeTime:J
Landroid/net/NetworkStatsHistory$Entry;->operations:J
Landroid/net/NetworkStatsHistory$Entry;->UNKNOWN:J
Landroid/net/NetworkStatsHistory$ParcelUtils;-><init>()V
Landroid/net/NetworkStatsHistory$ParcelUtils;->readLongArray(Landroid/os/Parcel;)[J
Landroid/net/NetworkStatsHistory$ParcelUtils;->writeLongArray(Landroid/os/Parcel;[JI)V
Landroid/net/NetworkStatsHistory;-><init>(JI)V
Landroid/net/NetworkStatsHistory;-><init>(JII)V
Landroid/net/NetworkStatsHistory;-><init>(Landroid/net/NetworkStatsHistory;J)V
Landroid/net/NetworkStatsHistory;-><init>(Ljava/io/DataInputStream;)V
Landroid/net/NetworkStatsHistory;->activeTime:[J
Landroid/net/NetworkStatsHistory;->addLong([JIJ)V
Landroid/net/NetworkStatsHistory;->bucketCount:I
Landroid/net/NetworkStatsHistory;->bucketDuration:J
Landroid/net/NetworkStatsHistory;->bucketStart:[J
Landroid/net/NetworkStatsHistory;->clear()V
Landroid/net/NetworkStatsHistory;->dump(Lcom/android/internal/util/IndentingPrintWriter;Z)V
Landroid/net/NetworkStatsHistory;->dumpCheckin(Ljava/io/PrintWriter;)V
Landroid/net/NetworkStatsHistory;->ensureBuckets(JJ)V
Landroid/net/NetworkStatsHistory;->estimateResizeBuckets(J)I
Landroid/net/NetworkStatsHistory;->FIELD_ACTIVE_TIME:I
Landroid/net/NetworkStatsHistory;->FIELD_ALL:I
Landroid/net/NetworkStatsHistory;->FIELD_OPERATIONS:I
Landroid/net/NetworkStatsHistory;->FIELD_RX_BYTES:I
Landroid/net/NetworkStatsHistory;->FIELD_RX_PACKETS:I
Landroid/net/NetworkStatsHistory;->FIELD_TX_BYTES:I
Landroid/net/NetworkStatsHistory;->FIELD_TX_PACKETS:I
Landroid/net/NetworkStatsHistory;->generateRandom(JJJ)V
Landroid/net/NetworkStatsHistory;->generateRandom(JJJJJJJLjava/util/Random;)V
Landroid/net/NetworkStatsHistory;->getBucketDuration()J
Landroid/net/NetworkStatsHistory;->getIndexAfter(J)I
Landroid/net/NetworkStatsHistory;->getLong([JIJ)J
Landroid/net/NetworkStatsHistory;->getTotalBytes()J
Landroid/net/NetworkStatsHistory;->insertBucket(IJ)V
Landroid/net/NetworkStatsHistory;->intersects(JJ)Z
Landroid/net/NetworkStatsHistory;->operations:[J
Landroid/net/NetworkStatsHistory;->randomLong(Ljava/util/Random;JJ)J
Landroid/net/NetworkStatsHistory;->recordData(JJJJ)V
Landroid/net/NetworkStatsHistory;->recordData(JJLandroid/net/NetworkStats$Entry;)V
Landroid/net/NetworkStatsHistory;->recordHistory(Landroid/net/NetworkStatsHistory;JJ)V
Landroid/net/NetworkStatsHistory;->removeBucketsBefore(J)V
Landroid/net/NetworkStatsHistory;->rxBytes:[J
Landroid/net/NetworkStatsHistory;->rxPackets:[J
Landroid/net/NetworkStatsHistory;->setLong([JIJ)V
Landroid/net/NetworkStatsHistory;->setValues(ILandroid/net/NetworkStatsHistory$Entry;)V
Landroid/net/NetworkStatsHistory;->totalBytes:J
Landroid/net/NetworkStatsHistory;->txBytes:[J
Landroid/net/NetworkStatsHistory;->txPackets:[J
Landroid/net/NetworkStatsHistory;->VERSION_ADD_ACTIVE:I
Landroid/net/NetworkStatsHistory;->VERSION_ADD_PACKETS:I
Landroid/net/NetworkStatsHistory;->VERSION_INIT:I
Landroid/net/NetworkStatsHistory;->writeToProto(Landroid/util/proto/ProtoOutputStream;J)V
Landroid/net/NetworkStatsHistory;->writeToProto(Landroid/util/proto/ProtoOutputStream;J[JI)V
Landroid/net/NetworkStatsHistory;->writeToStream(Ljava/io/DataOutputStream;)V
Landroid/net/NetworkTemplate;-><init>(ILjava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V
Landroid/net/NetworkTemplate;-><init>(ILjava/lang/String;[Ljava/lang/String;Ljava/lang/String;III)V
Landroid/net/NetworkTemplate;-><init>(Landroid/os/Parcel;)V
Landroid/net/NetworkTemplate;->BACKUP_VERSION:I
Landroid/net/NetworkTemplate;->buildTemplateBluetooth()Landroid/net/NetworkTemplate;
Landroid/net/NetworkTemplate;->buildTemplateProxy()Landroid/net/NetworkTemplate;
Landroid/net/NetworkTemplate;->buildTemplateWifi(Ljava/lang/String;)Landroid/net/NetworkTemplate;
Landroid/net/NetworkTemplate;->forceAllNetworkTypes()V
Landroid/net/NetworkTemplate;->getBytesForBackup()[B
Landroid/net/NetworkTemplate;->getMatchRuleName(I)Ljava/lang/String;
Landroid/net/NetworkTemplate;->getNetworkId()Ljava/lang/String;
Landroid/net/NetworkTemplate;->getNetworkTemplateFromBackup(Ljava/io/DataInputStream;)Landroid/net/NetworkTemplate;
Landroid/net/NetworkTemplate;->isKnownMatchRule(I)Z
Landroid/net/NetworkTemplate;->isMatchRuleMobile()Z
Landroid/net/NetworkTemplate;->isPersistable()Z
Landroid/net/NetworkTemplate;->matches(Landroid/net/NetworkIdentity;)Z
Landroid/net/NetworkTemplate;->matchesBluetooth(Landroid/net/NetworkIdentity;)Z
Landroid/net/NetworkTemplate;->matchesDefaultNetwork(Landroid/net/NetworkIdentity;)Z
Landroid/net/NetworkTemplate;->matchesEthernet(Landroid/net/NetworkIdentity;)Z
Landroid/net/NetworkTemplate;->matchesMetered(Landroid/net/NetworkIdentity;)Z
Landroid/net/NetworkTemplate;->matchesMobile(Landroid/net/NetworkIdentity;)Z
Landroid/net/NetworkTemplate;->matchesMobileWildcard(Landroid/net/NetworkIdentity;)Z
Landroid/net/NetworkTemplate;->matchesProxy(Landroid/net/NetworkIdentity;)Z
Landroid/net/NetworkTemplate;->matchesRoaming(Landroid/net/NetworkIdentity;)Z
Landroid/net/NetworkTemplate;->matchesSubscriberId(Ljava/lang/String;)Z
Landroid/net/NetworkTemplate;->matchesWifi(Landroid/net/NetworkIdentity;)Z
Landroid/net/NetworkTemplate;->matchesWifiWildcard(Landroid/net/NetworkIdentity;)Z
Landroid/net/NetworkTemplate;->MATCH_BLUETOOTH:I
Landroid/net/NetworkTemplate;->MATCH_ETHERNET:I
Landroid/net/NetworkTemplate;->MATCH_MOBILE:I
Landroid/net/NetworkTemplate;->MATCH_MOBILE_WILDCARD:I
Landroid/net/NetworkTemplate;->MATCH_PROXY:I
Landroid/net/NetworkTemplate;->MATCH_WIFI:I
Landroid/net/NetworkTemplate;->MATCH_WIFI_WILDCARD:I
Landroid/net/NetworkTemplate;->mDefaultNetwork:I
Landroid/net/NetworkTemplate;->mMatchRule:I
Landroid/net/NetworkTemplate;->mMatchSubscriberIds:[Ljava/lang/String;
Landroid/net/NetworkTemplate;->mMetered:I
Landroid/net/NetworkTemplate;->mNetworkId:Ljava/lang/String;
Landroid/net/NetworkTemplate;->mRoaming:I
Landroid/net/NetworkTemplate;->mSubscriberId:Ljava/lang/String;
Landroid/net/NetworkTemplate;->sForceAllNetworkTypes:Z
Landroid/net/NetworkTemplate;->TAG:Ljava/lang/String;
Landroid/net/NetworkUtils;-><init>()V
Landroid/net/NetworkUtils;->addressTypeMatches(Ljava/net/InetAddress;Ljava/net/InetAddress;)Z
Landroid/net/NetworkUtils;->bindProcessToNetwork(I)Z
Landroid/net/NetworkUtils;->bindProcessToNetworkForHostResolution(I)Z
Landroid/net/NetworkUtils;->bindSocketToNetwork(II)I
Landroid/net/NetworkUtils;->deduplicatePrefixSet(Ljava/util/TreeSet;)Ljava/util/TreeSet;
Landroid/net/NetworkUtils;->getBoundNetworkForProcess()I
Landroid/net/NetworkUtils;->getNetworkPart(Ljava/net/InetAddress;I)Ljava/net/InetAddress;
Landroid/net/NetworkUtils;->hexToInet6Address(Ljava/lang/String;)Ljava/net/InetAddress;
Landroid/net/NetworkUtils;->inetAddressToInt(Ljava/net/Inet4Address;)I
Landroid/net/NetworkUtils;->makeStrings(Ljava/util/Collection;)[Ljava/lang/String;
Landroid/net/NetworkUtils;->maskRawAddress([BI)V
Landroid/net/NetworkUtils;->netmaskIntToPrefixLength(I)I
Landroid/net/NetworkUtils;->parcelInetAddress(Landroid/os/Parcel;Ljava/net/InetAddress;I)V
Landroid/net/NetworkUtils;->parseIpAndMask(Ljava/lang/String;)Landroid/util/Pair;
Landroid/net/NetworkUtils;->protectFromVpn(I)Z
Landroid/net/NetworkUtils;->queryUserAccess(II)Z
Landroid/net/NetworkUtils;->routedIPv4AddressCount(Ljava/util/TreeSet;)J
Landroid/net/NetworkUtils;->routedIPv6AddressCount(Ljava/util/TreeSet;)Ljava/math/BigInteger;
Landroid/net/NetworkUtils;->setupRaSocket(Ljava/io/FileDescriptor;I)V
Landroid/net/NetworkUtils;->TAG:Ljava/lang/String;
Landroid/net/NetworkUtils;->unparcelInetAddress(Landroid/os/Parcel;)Ljava/net/InetAddress;
Landroid/net/NetworkWatchlistManager;-><init>(Landroid/content/Context;)V
Landroid/net/NetworkWatchlistManager;-><init>(Landroid/content/Context;Lcom/android/internal/net/INetworkWatchlistManager;)V
Landroid/net/NetworkWatchlistManager;->getWatchlistConfigHash()[B
Landroid/net/NetworkWatchlistManager;->mContext:Landroid/content/Context;
Landroid/net/NetworkWatchlistManager;->mNetworkWatchlistManager:Lcom/android/internal/net/INetworkWatchlistManager;
Landroid/net/NetworkWatchlistManager;->reloadWatchlist()V
Landroid/net/NetworkWatchlistManager;->reportWatchlistIfNecessary()V
Landroid/net/NetworkWatchlistManager;->SHARED_MEMORY_TAG:Ljava/lang/String;
Landroid/net/NetworkWatchlistManager;->TAG:Ljava/lang/String;
Landroid/net/ProxyInfo;-><init>(Landroid/net/ProxyInfo;)V
Landroid/net/ProxyInfo;-><init>(Landroid/net/Uri;)V
Landroid/net/ProxyInfo;-><init>(Landroid/net/Uri;I)V
Landroid/net/ProxyInfo;-><init>(Ljava/lang/String;)V
Landroid/net/ProxyInfo;-><init>(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/String;)V
Landroid/net/ProxyInfo;->getExclusionListAsString()Ljava/lang/String;
Landroid/net/ProxyInfo;->getSocketAddress()Ljava/net/InetSocketAddress;
Landroid/net/ProxyInfo;->isValid()Z
Landroid/net/ProxyInfo;->LOCAL_EXCL_LIST:Ljava/lang/String;
Landroid/net/ProxyInfo;->LOCAL_HOST:Ljava/lang/String;
Landroid/net/ProxyInfo;->LOCAL_PORT:I
Landroid/net/ProxyInfo;->makeProxy()Ljava/net/Proxy;
Landroid/net/ProxyInfo;->mExclusionList:Ljava/lang/String;
Landroid/net/ProxyInfo;->mHost:Ljava/lang/String;
Landroid/net/ProxyInfo;->mPacFileUrl:Landroid/net/Uri;
Landroid/net/ProxyInfo;->mParsedExclusionList:[Ljava/lang/String;
Landroid/net/ProxyInfo;->mPort:I
Landroid/net/ProxyInfo;->setExclusionList(Ljava/lang/String;)V
Landroid/net/RouteInfo;-><init>(Landroid/net/IpPrefix;)V
Landroid/net/RouteInfo;-><init>(Landroid/net/IpPrefix;I)V
Landroid/net/RouteInfo;-><init>(Landroid/net/IpPrefix;Ljava/net/InetAddress;)V
Landroid/net/RouteInfo;-><init>(Landroid/net/IpPrefix;Ljava/net/InetAddress;Ljava/lang/String;I)V
Landroid/net/RouteInfo;-><init>(Landroid/net/LinkAddress;)V
Landroid/net/RouteInfo;->getDestinationLinkAddress()Landroid/net/LinkAddress;
Landroid/net/RouteInfo;->getType()I
Landroid/net/RouteInfo;->isHostRoute()Z
Landroid/net/RouteInfo;->isIPv4Default()Z
Landroid/net/RouteInfo;->isIPv6Default()Z
Landroid/net/RouteInfo;->makeHostRoute(Ljava/net/InetAddress;Ljava/lang/String;)Landroid/net/RouteInfo;
Landroid/net/RouteInfo;->makeHostRoute(Ljava/net/InetAddress;Ljava/net/InetAddress;Ljava/lang/String;)Landroid/net/RouteInfo;
Landroid/net/RouteInfo;->mDestination:Landroid/net/IpPrefix;
Landroid/net/RouteInfo;->mHasGateway:Z
Landroid/net/RouteInfo;->mInterface:Ljava/lang/String;
Landroid/net/RouteInfo;->mType:I
Landroid/net/RouteInfo;->RTN_THROW:I
Landroid/net/RouteInfo;->RTN_UNICAST:I
Landroid/net/RouteInfo;->RTN_UNREACHABLE:I
Landroid/net/StaticIpConfiguration;-><init>(Landroid/net/StaticIpConfiguration;)V
Landroid/net/StaticIpConfiguration;->clear()V
Landroid/net/StaticIpConfiguration;->CREATOR:Landroid/os/Parcelable$Creator;
Landroid/net/StaticIpConfiguration;->readFromParcel(Landroid/net/StaticIpConfiguration;Landroid/os/Parcel;)V
Landroid/net/StaticIpConfiguration;->toLinkProperties(Ljava/lang/String;)Landroid/net/LinkProperties;
Landroid/net/UidRange;-><init>(II)V
Landroid/net/UidRange;->contains(I)Z
Landroid/net/UidRange;->containsRange(Landroid/net/UidRange;)Z
Landroid/net/UidRange;->count()I
Landroid/net/UidRange;->createForUser(I)Landroid/net/UidRange;
Landroid/net/UidRange;->CREATOR:Landroid/os/Parcelable$Creator;
Landroid/net/UidRange;->getStartUser()I
Landroid/net/UidRange;->start:I
Landroid/net/UidRange;->stop:I
